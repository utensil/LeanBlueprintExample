{"name":"Lean.Elab.MacroRules","instances":[],"imports":["Init","Lean.Elab.Syntax","Lean.Elab.AuxDef"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/MacroRules.lean#L49-L67","name":"Lean.Elab.Command.elabMacroRules","line":49,"kind":"def","docLink":"./Lean/Elab/MacroRules.html#Lean.Elab.Command.elabMacroRules","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MacroRules.html#Lean.Elab.Command.elabMacroRules\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabMacroRules</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/MacroRules.lean#L18-L47","name":"Lean.Elab.Command.elabMacroRulesAux","line":18,"kind":"def","docLink":"./Lean/Elab/MacroRules.html#Lean.Elab.Command.elabMacroRulesAux","doc":"Remark: `k` is the user provided kind with the current namespace included.\nRecall that syntax node kinds contain the current namespace.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MacroRules.html#Lean.Elab.Command.elabMacroRulesAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabMacroRulesAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(doc? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrs? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span> <span class=\"fn\">&quot,&quot</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrKind : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.attrKind</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tk : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.matchAlt</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"}]}