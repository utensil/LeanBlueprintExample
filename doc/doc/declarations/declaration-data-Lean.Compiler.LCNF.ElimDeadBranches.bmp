{"name":"Lean.Compiler.LCNF.ElimDeadBranches","instances":[{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue","className":"Repr"},{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.instBEqValue","className":"BEq"}],"imports":["Init","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.PhaseExt","Lean.Compiler.LCNF.InferType"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L601-L602","name":"Lean.Compiler.LCNF.elimDeadBranches","line":601,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.elimDeadBranches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.elimDeadBranches\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">elimDeadBranches</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L579-L599","name":"Lean.Compiler.LCNF.Decl.elimDeadBranches","line":579,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.Decl.elimDeadBranches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.Decl.elimDeadBranches\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">elimDeadBranches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L542-L574","name":"Lean.Compiler.LCNF.UnreachableBranches.elimDead.go","line":542,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">elimDead</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(assignment : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Lean.Compiler.LCNF.UnreachableBranches.Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L538-L574","name":"Lean.Compiler.LCNF.UnreachableBranches.elimDead","line":538,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead","doc":"Use the information produced by the abstract interpeter to:\n- Eliminate branches that we know cannot be hit\n- Eliminate values that we know have to be constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(assignment : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Lean.Compiler.LCNF.UnreachableBranches.Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L524-L531","name":"Lean.Compiler.LCNF.UnreachableBranches.inferMain","line":524,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferMain","doc":"Run `inferStep` until it reaches a fix point.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferMain\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">inferMain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L505-L519","name":"Lean.Compiler.LCNF.UnreachableBranches.inferStep","line":505,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferStep","doc":"Rerun the abstract interpreter on all declarations except of the unsafe\nones. Return whether any `Value` got updated in the process.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">inferStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L492-L498","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpFunCall","line":492,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpFunCall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpFunCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span>.<span class=\"name\">interpFunCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funDecl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L487-L490","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunVar","line":487,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunVar","doc":"If we see a function being passed as an argument to a higher order\nfunction we cannot know what arguments it will be passed further\ndown the line. Hence we set all of its arguments to `top` since anything\nis possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span>.<span class=\"name\">handleFunVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(var : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L477-L479","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunArg","line":477,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span>.<span class=\"name\">handleFunArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L444-L475","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpLetValue","line":444,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpLetValue","doc":"The abstract interpreter on a `LetValue`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span>.<span class=\"name\">interpLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(letVal : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L408-L498","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode","line":408,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode","doc":"The actual abstract interpreter on a block of `Code`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L373-L392","name":"Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment","line":373,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment","doc":"Return true if the assignment of at least one parameter has been updated.\nFurthermore if we see that `params.size != args.size` we know that this is\na partial application and set the values of the remaining parameters to\n`top` since it is impossible to track what will happen with them from here on.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateFunDeclParamsAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L361-L365","name":"Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary","line":361,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary","doc":"Widen the value of the current function by `v`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateCurrFnSummary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L355-L356","name":"Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment","line":355,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment","doc":"Set the value of `var` to `bot`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">resetVarAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(var : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L347-L350","name":"Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment","line":347,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment","doc":"Update the assignment of `var` by merging the current value with `newVal`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateVarAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(var : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newVal : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L339-L342","name":"Lean.Compiler.LCNF.UnreachableBranches.findArgValue","line":339,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findArgValue","doc":"Find the value of `arg` using the logic of `findVarValue`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findArgValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findArgValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L332-L334","name":"Lean.Compiler.LCNF.UnreachableBranches.findVarValue","line":332,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findVarValue","doc":"Obtain the `Value` associated with `var` from the context of `InterpM`.\nIf none is available return `Value.bot`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findVarValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findVarValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(var : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L323-L326","name":"Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment","line":323,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment","doc":"Run `f` on the variable `Assignment` of the current function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">modifyAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Lean.Compiler.LCNF.UnreachableBranches.Assignment</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Lean.Compiler.LCNF.UnreachableBranches.Assignment</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L315-L318","name":"Lean.Compiler.LCNF.UnreachableBranches.findFunVal?","line":315,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findFunVal?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findFunVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findFunVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L312-L313","name":"Lean.Compiler.LCNF.UnreachableBranches.getFunVal","line":312,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunVal","doc":"Get the `Value` of a certain function in the current block by index.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getFunVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L306-L307","name":"Lean.Compiler.LCNF.UnreachableBranches.getAssignment","line":306,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getAssignment","doc":"Get the variable `Assignment` of the current function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getAssignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">Lean.Compiler.LCNF.UnreachableBranches.InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Lean.Compiler.LCNF.UnreachableBranches.Assignment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L301-L301","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpM","line":301,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM","doc":"The monad which powers the abstract interpreter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L296-L296","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals","line":296,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals","doc":"`Value`s of functions in the `InterpContext` use during computation of\nthe fixpoint. Afterwards they are stored into the `Environment`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">funVals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">Lean.Compiler.LCNF.UnreachableBranches.InterpState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L291-L291","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments","line":291,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments","doc":"`Assignment`s of functions in the `InterpContext`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">assignments</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">Lean.Compiler.LCNF.UnreachableBranches.InterpState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Lean.Compiler.LCNF.UnreachableBranches.Assignment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L287-L296","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState","line":287,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L285-L285","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx","line":285,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx","doc":"The index of the function we are currently operating on in `decls.`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">currFnIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">Lean.Compiler.LCNF.UnreachableBranches.InterpContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L281-L281","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls","line":281,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls","doc":"The list of `Decl`s we are operating on in `InterpM`. This can be\na single declaration or a mutual block of declarations where their\nanalysis might influence each other as we approach the fixpoint.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">Lean.Compiler.LCNF.UnreachableBranches.InterpContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L275-L285","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext","line":275,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext","doc":"The context of `InterpM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L270-L270","name":"Lean.Compiler.LCNF.UnreachableBranches.Assignment","line":270,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment","doc":"A map from variable identifiers to the `Value` produced by the abstract\ninterpreter for them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Assignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L261-L264","name":"Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?","line":261,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?","doc":"Obtain the `Value` for a function name if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getFunctionSummary?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fid : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L255-L256","name":"Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary","line":255,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary","doc":"Add a `Value` for a function name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">addFunctionSummary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fid : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L242-L250","name":"Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt","line":242,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt","doc":"Storing `FunctionSummaries` for all functions in a `.olean`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">functionSummariesExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.SimplePersistentEnvExtension\">Lean.SimplePersistentEnvExtension</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span>)\n  <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries\">Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L234-L234","name":"Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries","line":234,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries","doc":"A map from function names to the `Value` that the abstract interpreter\nproduced for them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">FunctionSummaries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L223-L226","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.getNatConstant","line":223,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.getNatConstant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.getNatConstant\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getLiteral</span>.<span class=\"name\">getNatConstant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L206-L221","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.go","line":206,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getLiteral</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a> →\n  <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L199-L226","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral","line":199,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral","doc":"Attempt to turn a `Value` that is representing a literal into a set of\nauxiliary declarations + the final `FVarId` of the declaration that\ncontains the actual literal. If it is not a literal return none.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getLiteral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L186-L188","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral","line":186,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral","doc":"We say that a `Value` is a literal iff it is only a tree of `Value.ctor`\nnodes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">isLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L177-L180","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.proj","line":177,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L172-L175","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit","line":172,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofLCNFLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">Lean.Compiler.LCNF.LitValue</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L168-L170","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goSmall","line":168,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goSmall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goSmall\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofNat</span>.<span class=\"name\">goSmall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L163-L167","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goBig","line":163,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goBig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goBig\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofNat</span>.<span class=\"name\">goBig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(orig : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(curr : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L157-L170","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat","line":157,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L147-L155","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs","line":147,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs","doc":"Obtain the arguments of a certain constructor within the `Value`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getCtorArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L138-L142","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor","line":138,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor","doc":"Check whether a certain constructor is part of a `Value` by name.\nNote that both `top` and `bot` will always true here. For bot this is\nbecause we have no information about the `Value` so just to be sure\nwe don't claim the absence of a certain constructor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">containsCtor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L129-L130","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.widening","line":129,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.widening","doc":"Widening operator that guarantees termination in our abstract interpreter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.widening\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">widening</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v1 : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v2 : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L101-L126","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.truncate.go","line":101,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">truncate</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(forbiddenTypes : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(remainingDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L98-L126","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.truncate","line":98,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate","doc":"Make sure constructors of recursive inductive datatypes can only occur once in each path.\nValues at depth > `maxValueDepth` are also approximated at `top`.\nWe use this function to implement a simple widening operation for our abstract interpreter.\nRecall the widening functions is used to ensure termination in abstract interpreters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">truncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L76-L88","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.merge","line":76,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.merge","doc":"Merge two values into one. `bot` is the neutral element, `top` the annihilator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v1 : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v2 : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L63-L71","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice","line":63,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice","doc":"Fuse `v` into `vs`. That is do not only append but if we see that `v`\nis a constructor that is already contained within `vs` try to detect\nthe difference between these values and merge them accordingly into a\nchoice node further down the tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">addChoice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(vs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L53-L53","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.instBEqValue","line":53,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.instBEqValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.instBEqValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">instBEqValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L43-L51","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.beq","line":43,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L41-L41","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth","line":41,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">maxValueDepth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L36-L36","name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue","line":36,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">instReprValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L36-L36","name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","line":36,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">instInhabitedValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L32-L35","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.choice","line":32,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.choice","doc":"A set of values are possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.choice\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">choice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(vs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L28-L31","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ctor","line":28,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ctor","doc":"A certian consructor with a certain sets of parameters is possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L24-L27","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.top","line":24,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.top","doc":"All values are possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.top\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">top</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L20-L23","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.bot","line":20,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.bot","doc":"Undefined, could be anything we have no information.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.bot\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L19-L36","name":"Lean.Compiler.LCNF.UnreachableBranches.Value","line":19,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value","doc":"The abstract domain of the interpreter. Representing sets of values\nof a certain type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L1-L1","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(currFnIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">Lean.Compiler.LCNF.UnreachableBranches.InterpContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L1-L1","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(assignments : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Lean.Compiler.LCNF.UnreachableBranches.Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(funVals : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Lean.Compiler.LCNF.UnreachableBranches.Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">Lean.Compiler.LCNF.UnreachableBranches.InterpState</a></div></div>"}]}