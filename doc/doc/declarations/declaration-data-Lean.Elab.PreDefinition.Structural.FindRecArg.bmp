{"name":"Lean.Elab.PreDefinition.Structural.FindRecArg","instances":[],"imports":["Init","Lean.Elab.PreDefinition.Structural.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L74-L137","name":"Lean.Elab.Structural.findRecArg.go","line":74,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.findRecArg.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.findRecArg.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">findRecArg</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(numFixed : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indices : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(firstPass : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L58-L139","name":"Lean.Elab.Structural.findRecArg","line":58,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.findRecArg","doc":"Try to find an argument that is structurally smaller in every recursive application.\nWe use this argument to justify termination using the auxiliary `brecOn` construction.\n\nWe give preference for arguments that are *not* indices of inductive types of other arguments.\nSee issue #837 for an example where we can show termination using the index of an inductive family, but\nwe don't get the desired definitional equalities.\n\nWe perform two passes. In the first-pass, we only consider arguments that are not indices.\nIn the second pass, we consider them.\n\nTODO: explore whether there are better solutions, and whether there are other ways to break the heuristic used\nfor creating the smart unfolding auxiliary definition.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.findRecArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">findRecArg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(numFixed : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <span class=\"fn\">α</span></span></div></div>"}]}