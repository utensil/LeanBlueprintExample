{"name":"Lean.Compiler.LCNF.Simp.Main","instances":[],"imports":["Init","Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.ElimDead","Lean.Compiler.LCNF.AlphaEqv","Lean.Compiler.LCNF.PrettyPrinter","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.Simp.FunDeclInfo","Lean.Compiler.LCNF.Simp.InlineCandidate","Lean.Compiler.LCNF.Simp.InlineProj","Lean.Compiler.LCNF.Simp.Used","Lean.Compiler.LCNF.Simp.DefaultAlt","Lean.Compiler.LCNF.Simp.SimpValue","Lean.Compiler.LCNF.Simp.ConstantFold"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L218-L333","name":"Lean.Compiler.LCNF.Simp.simp","line":218,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simp","doc":"Simplify `code`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L188-L213","name":"Lean.Compiler.LCNF.Simp.simpCasesOnCtor?","line":188,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simpCasesOnCtor?","doc":"Try to simplify `cases` of `constructor`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simpCasesOnCtor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpCasesOnCtor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cases : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Lean.Compiler.LCNF.Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L179-L183","name":"Lean.Compiler.LCNF.Simp.simpFunDecl","line":179,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simpFunDecl","doc":"Simplify the given local function declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simpFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L121-L174","name":"Lean.Compiler.LCNF.Simp.inlineApp?","line":121,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.inlineApp?","doc":"If the value of the given let-declaration is an application that can be inlined,\ninline it and simplify the result.\n\n`k` is the \"continuation\" for the let declaration, if the application is inlined,\nit will also be simplified.\n\nNote: `inlineApp?` did not use to be in this mutually recursive declaration.\nIt used to be invoked by `simp`, and would return `Option Code` that would be\nthen simplified by `simp`. However, this simpler architecture produced an\nexponential blowup in when processing functions such as `Lean.Elab.Deriving.Ord.mkMatch.mkAlts`.\nThe key problem is that when inlining a declaration we often can reduce the number\nof exit points by simplified the inlined code, and then connecting the result to the\ncontinuation `k`. However, this optimization is only possible if we simplify the\ninlined code **before** we attach it to the continuation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.inlineApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">inlineApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(letDecl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L100-L102","name":"Lean.Compiler.LCNF.Simp.elimVar?","line":100,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.elimVar?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.elimVar?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">elimVar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L93-L98","name":"Lean.Compiler.LCNF.Simp.isReturnOf","line":93,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.isReturnOf","doc":"Similar to `Code.isReturnOf`, but taking the current substitution into account.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.isReturnOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">isReturnOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L75-L88","name":"Lean.Compiler.LCNF.Simp.etaPolyApp?","line":75,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.etaPolyApp?","doc":"When the configuration flag `etaPoly = true`, we eta-expand\npartial applications of functions that take local instances as arguments.\nThis kind of function is inlined or specialized, and we create new\nsimplification opportunities by eta-expanding them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.etaPolyApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">etaPolyApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(letDecl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L62-L67","name":"Lean.Compiler.LCNF.Simp.inlineJp?","line":62,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.inlineJp?","doc":"Try to inline a join point.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.inlineJp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">inlineJp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/Main.lean#L45-L57","name":"Lean.Compiler.LCNF.Simp.specializePartialApp","line":45,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.specializePartialApp","doc":"Create a new local function declaration when `info.args.size < info.params.size`.\nWe use this function to inline/specialize a partial application of a local function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.specializePartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">specializePartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a></span></div></div>"}]}