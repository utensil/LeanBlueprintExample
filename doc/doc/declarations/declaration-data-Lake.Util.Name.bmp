{"name":"Lake.Util.Name","instances":[{"typeNames":["Lean.NameMap","Prod","Lean.Name"],"name":"Lake.instForInNameMapProdName","className":"ForIn"},{"typeNames":["Lean.RBMap","Lean.Name","Lean.Name.quickCmp","Lean.NameMap"],"name":"Lake.instCoeRBMapNameQuickCmpNameMap","className":"Coe"},{"typeNames":["Lean.Name","Lean.Name.quickCmpAux"],"name":"Lake.Name.instLawfulCmpEqNameQuickCmpAux","className":"Lake.LawfulCmpEq"},{"typeNames":["Lean.Name","Lean.Name.quickCmp"],"name":"Lake.Name.instLawfulCmpEqNameQuickCmp","className":"Lake.LawfulCmpEq"}],"imports":["Init","Lean.Data.NameMap","Lake.Util.DRBMap","Lake.Util.RBArray","Lake.Util.Compare"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L80-L83","name":"Lake.Name.quoteFrom","line":80,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.Name.quoteFrom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quoteFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quoteFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L74-L76","name":"Lake.Name.instLawfulCmpEqNameQuickCmp","line":74,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.Name.instLawfulCmpEqNameQuickCmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.instLawfulCmpEqNameQuickCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulCmpEqNameQuickCmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L70-L72","name":"Lake.Name.quickCmp_rfl","line":70,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.quickCmp_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quickCmp_rfl\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickCmp_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L64-L68","name":"Lake.Name.eq_of_quickCmp","line":64,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.eq_of_quickCmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.eq_of_quickCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">eq_of_quickCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a> <span class=\"fn\">n</span> <span class=\"fn\">n'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L60-L62","name":"Lake.Name.instLawfulCmpEqNameQuickCmpAux","line":60,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.Name.instLawfulCmpEqNameQuickCmpAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.instLawfulCmpEqNameQuickCmpAux\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulCmpEqNameQuickCmpAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmpAux\">Lean.Name.quickCmpAux</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L48-L58","name":"Lake.Name.quickCmpAux_iff_eq","line":48,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.quickCmpAux_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quickCmpAux_iff_eq\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickCmpAux_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Name.html#Lean.Name.quickCmpAux\">Lean.Name.quickCmpAux</a> <span class=\"fn\">n</span> <span class=\"fn\">n'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L42-L46","name":"Lake.Name.isPrefixOf_append","line":42,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.isPrefixOf_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.isPrefixOf_append\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name.hasMacroScopes\">Lean.Name.hasMacroScopes</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name.hasMacroScopes\">Lean.Name.hasMacroScopes</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Name.html#Lean.Name.isPrefixOf\">Lean.Name.isPrefixOf</a> <span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L39-L40","name":"Lake.Name.isPrefixOf_self","line":39,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.isPrefixOf_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.isPrefixOf_self\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Name.html#Lean.Name.isPrefixOf\">Lean.Name.isPrefixOf</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L36-L37","name":"Lake.Name.beq_false","line":36,"kind":"theorem","docLink":"./Lake/Util/Name.html#Lake.Name.beq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.beq_false\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">beq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">n</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L29-L29","name":"Lake.DNameMap.empty","line":29,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.DNameMap.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.DNameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">DNameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.DNameMap\">Lake.DNameMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L28-L28","name":"Lake.DNameMap","line":28,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.DNameMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.DNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">DNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L26-L26","name":"Lake.mkOrdNameMap","line":26,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.mkOrdNameMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.mkOrdNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">mkOrdNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.OrdNameMap\">Lake.OrdNameMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L25-L25","name":"Lake.OrdNameMap.empty","line":25,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.OrdNameMap.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.OrdNameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">OrdNameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.OrdNameMap\">Lake.OrdNameMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L24-L24","name":"Lake.OrdNameMap","line":24,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.OrdNameMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.OrdNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">OrdNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L22-L22","name":"Lake.instCoeRBMapNameQuickCmpNameMap","line":22,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.instCoeRBMapNameQuickCmpNameMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.instCoeRBMapNameQuickCmpNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeRBMapNameQuickCmpNameMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<span class=\"fn\"><a href=\"./Lean/Data/RBMap.html#Lean.RBMap\">Lean.RBMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <span class=\"fn\">α</span> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span>) (<span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lake.NameMap</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L19-L20","name":"Lake.instForInNameMapProdName","line":19,"kind":"instance","docLink":"./Lake/Util/Name.html#Lake.instForInNameMapProdName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.instForInNameMapProdName\"><span class=\"name\">Lake</span>.<span class=\"name\">instForInNameMapProdName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lake.NameMap</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Name.lean#L17-L17","name":"Lake.NameMap.empty","line":17,"kind":"def","docLink":"./Lake/Util/Name.html#Lake.NameMap.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.NameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">NameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lake.NameMap</a> <span class=\"fn\">α</span></span></div></div>"}]}