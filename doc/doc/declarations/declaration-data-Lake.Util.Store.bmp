{"name":"Lake.Util.Store","instances":[{"typeNames":[],"name":"Lake.instMonadStore1","className":"Lake.MonadStore1"},{"typeNames":[],"name":"Lake.instMonadDStore","className":"Lake.MonadDStore"}],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L31-L38","name":"Lake.fetchOrCreate","line":31,"kind":"def","docLink":"./Lake/Util/Store.html#Lake.fetchOrCreate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.fetchOrCreate\"><span class=\"name\">Lake</span>.<span class=\"name\">fetchOrCreate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(key : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore1\">Lake.MonadStore1</a> <span class=\"fn\">key</span> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(create : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L27-L29","name":"Lake.instMonadDStore","line":27,"kind":"instance","docLink":"./Lake/Util/Store.html#Lake.instMonadDStore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.instMonadDStore\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadDStore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">Lake.MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">Lake.MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L25-L25","name":"Lake.MonadStore","line":25,"kind":"def","docLink":"./Lake/Util/Store.html#Lake.MonadStore","doc":"A monad equipped with a key-object store. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadStore\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadStore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u_1 u_2) u_3)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L20-L22","name":"Lake.instMonadStore1","line":20,"kind":"instance","docLink":"./Lake/Util/Store.html#Lake.instMonadStore1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.instMonadStore1\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStore1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">κ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">Lake.MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore1\">Lake.MonadStore1</a> <span class=\"fn\">k</span> (<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>) <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L18-L18","name":"Lake.MonadDStore.store","line":18,"kind":"def","docLink":"./Lake/Util/Store.html#Lake.MonadDStore.store","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadDStore.store\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadDStore</span>.<span class=\"name\">store</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">Lake.MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(key : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">key</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L17-L17","name":"Lake.MonadDStore.fetch?","line":17,"kind":"def","docLink":"./Lake/Util/Store.html#Lake.MonadDStore.fetch?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadDStore.fetch?\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadDStore</span>.<span class=\"name\">fetch?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">Lake.MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(key : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">key</span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L16-L16","name":"Lake.MonadDStore.mk","line":16,"kind":"ctor","docLink":"./Lake/Util/Store.html#Lake.MonadDStore.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadDStore.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadDStore</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fetch? : <span class=\"fn\">(<span class=\"fn\">key</span> : <span class=\"fn\">κ</span>) → <span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">key</span></span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(store : <span class=\"fn\">(<span class=\"fn\">key</span> : <span class=\"fn\">κ</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">key</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">Lake.MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L16-L18","name":"Lake.MonadDStore","line":16,"kind":"class","docLink":"./Lake/Util/Store.html#Lake.MonadDStore","doc":"A monad equipped with a dependently typed key-object store. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadDStore\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadDStore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L11-L11","name":"Lake.MonadStore1.store","line":11,"kind":"def","docLink":"./Lake/Util/Store.html#Lake.MonadStore1.store","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadStore1.store\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadStore1</span>.<span class=\"name\">store</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore1\">Lake.MonadStore1</a> <span class=\"fn\">k</span> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L10-L10","name":"Lake.MonadStore1.fetch?","line":10,"kind":"def","docLink":"./Lake/Util/Store.html#Lake.MonadStore1.fetch?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadStore1.fetch?\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadStore1</span>.<span class=\"name\">fetch?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore1\">Lake.MonadStore1</a> <span class=\"fn\">k</span> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L9-L9","name":"Lake.MonadStore1.mk","line":9,"kind":"ctor","docLink":"./Lake/Util/Store.html#Lake.MonadStore1.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadStore1.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadStore1</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\">κ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fetch? : <span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(store : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore1\">Lake.MonadStore1</a> <span class=\"fn\">k</span> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Store.lean#L9-L11","name":"Lake.MonadStore1","line":9,"kind":"class","docLink":"./Lake/Util/Store.html#Lake.MonadStore1","doc":"A monad equipped with a dependently typed key-value store for a particular key. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Store.html#Lake.MonadStore1\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadStore1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max v w)</div></div>"}]}