{"name":"Lean.Widget.TaggedText","instances":[{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instInhabitedTaggedText","className":"Inhabited"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instBEqTaggedText","className":"BEq"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instReprTaggedText","className":"Repr"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instFromJsonTaggedText","className":"Lean.FromJson"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instToJsonTaggedText","className":"Lean.ToJson"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.TaggedText.instRpcEncodableTaggedText","className":"Lean.Server.RpcEncodable"},{"typeNames":["_private.Lean.Widget.TaggedText.0.Lean.Widget.TaggedText.TaggedState"],"name":"Lean.Widget.TaggedText.instInhabitedTaggedState","className":"Inhabited"},{"typeNames":["StateM","_private.Lean.Widget.TaggedText.0.Lean.Widget.TaggedText.TaggedState"],"name":"Lean.Widget.TaggedText.instMonadPrettyFormatStateMTaggedState","className":"Std.Format.MonadPrettyFormat"}],"imports":["Init","Lean.Data.Json.FromToJson","Lean.Server.Rpc.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L95-L100","name":"Lean.Widget.TaggedText.stripTags.go","line":95,"kind":"opaque","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.stripTags.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.stripTags.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">stripTags</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(acc : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L93-L100","name":"Lean.Widget.TaggedText.stripTags","line":93,"kind":"def","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.stripTags","doc":"Remove tags, leaving just the pretty-printed string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.stripTags\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">stripTags</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tt : <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L89-L90","name":"Lean.Widget.TaggedText.prettyTagged","line":89,"kind":"def","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.prettyTagged","doc":"The output is tagged with `(tag, indent)` where `tag` is from the input `Format` and `indent`\nis the indentation level at this point. The latter is used to print sub-trees accurately by passing\nit again as the `indent` argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.prettyTagged\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">prettyTagged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indent : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\">Std.Format.defWidth</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L76-L84","name":"Lean.Widget.TaggedText.instMonadPrettyFormatStateMTaggedState","line":76,"kind":"instance","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instMonadPrettyFormatStateMTaggedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instMonadPrettyFormatStateMTaggedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">instMonadPrettyFormatStateMTaggedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> (<span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <a href=\"./Lean/Widget/TaggedText.html#_private.Lean.Widget.TaggedText.0.Lean.Widget.TaggedText.TaggedState\">Lean.Widget.TaggedText.TaggedState</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L74-L74","name":"Lean.Widget.TaggedText.instInhabitedTaggedState","line":74,"kind":"instance","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instInhabitedTaggedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instInhabitedTaggedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">instInhabitedTaggedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Widget/TaggedText.html#_private.Lean.Widget.TaggedText.0.Lean.Widget.TaggedText.TaggedState\">Lean.Widget.TaggedText.TaggedState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L66-L68","name":"Lean.Widget.TaggedText.instRpcEncodableTaggedText","line":66,"kind":"instance","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instRpcEncodableTaggedText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instRpcEncodableTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">instRpcEncodableTaggedText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Server/Rpc/Basic.html#Lean.Server.RpcEncodable\">Lean.Server.RpcEncodable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/Rpc/Basic.html#Lean.Server.RpcEncodable\">Lean.Server.RpcEncodable</a> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L61-L64","name":"Lean.Widget.TaggedText.rewriteM","line":61,"kind":"opaque","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewriteM","doc":"Like `mapM` but allows rewriting the whole subtree at `tag` nodes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewriteM\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">rewriteM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L54-L57","name":"Lean.Widget.TaggedText.rewrite","line":54,"kind":"opaque","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewrite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">rewrite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L48-L51","name":"Lean.Widget.TaggedText.mapM","line":48,"kind":"opaque","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.mapM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.mapM\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">mapM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L42-L45","name":"Lean.Widget.TaggedText.map","line":42,"kind":"opaque","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L35-L39","name":"Lean.Widget.TaggedText.appendTag","line":35,"kind":"def","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendTag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendTag\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">appendTag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t₀ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₀ : <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L28-L33","name":"Lean.Widget.TaggedText.appendText","line":28,"kind":"def","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">appendText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₀ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instToJsonTaggedText","line":24,"kind":"instance","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instToJsonTaggedText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instToJsonTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instToJsonTaggedText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instFromJsonTaggedText","line":24,"kind":"instance","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instFromJsonTaggedText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instFromJsonTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instFromJsonTaggedText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instReprTaggedText","line":24,"kind":"instance","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instReprTaggedText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instReprTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instReprTaggedText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instBEqTaggedText","line":24,"kind":"instance","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instBEqTaggedText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instBEqTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instBEqTaggedText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instInhabitedTaggedText","line":24,"kind":"instance","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instInhabitedTaggedText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instInhabitedTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instInhabitedTaggedText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L23-L23","name":"Lean.Widget.TaggedText.tag","line":23,"kind":"ctor","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.tag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.tag\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">tag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L18-L22","name":"Lean.Widget.TaggedText.append","line":18,"kind":"ctor","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.append","doc":"Invariants:\n- non-empty\n- no adjacent `text` elements (they should be collapsed)\n- no directly nested `append`s (but `append #[tag _ (append ..)]` is okay) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L17-L17","name":"Lean.Widget.TaggedText.text","line":17,"kind":"ctor","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.text","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.text\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">text</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">Lean.Widget.TaggedText</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Widget/TaggedText.lean#L16-L24","name":"Lean.Widget.TaggedText","line":16,"kind":"inductive","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText","doc":"The minimal structure needed to represent \"string with interesting (tagged) substrings\".\nMuch like Lean 3 [`sf`](https://github.com/leanprover-community/mathlib/blob/bfa6bbbce69149792cc009ab7f9bc146181dc051/src/tactic/interactive_expr.lean#L38),\nbut with indentation already stringified. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}