{"name":"Lean.Meta.Eqns","instances":[{"typeNames":["Lean.Meta.EqnsExtState"],"name":"Lean.Meta.instInhabitedEqnsExtState","className":"Inhabited"}],"imports":["Init","Lean.Meta.Basic","Lean.Meta.AppBuilder"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L137-L145","name":"Lean.Meta.getUnfoldEqnFor?","line":137,"kind":"def","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.getUnfoldEqnFor?","doc":"Return a \"unfold\" theorem for the given declaration.\nBy default, we not create unfold theorems for nonrecursive definitions.\nYou can use `nonRec := true` to override this behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.getUnfoldEqnFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnfoldEqnFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonRec : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L127-L130","name":"Lean.Meta.registerGetUnfoldEqnFn","line":127,"kind":"def","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.registerGetUnfoldEqnFn","doc":"Register a new function for retrieving a \"unfold\" equation theorem.\n\nWe generate this kind of equation theorem on demand, and it is generated by more than one module.\nFor example, the structural and well-founded recursion modules generate it.\nMost recent getters are tried first.\n\nA getter returns an `Option Name`. The result is `none` if the getter failed.\nOtherwise, it is a theorem name. Example: the definition\n\n```\ndef f (xs : List Nat) : List Nat :=\n  match xs with\n  | [] => []\n  | x::xs => (x+1)::f xs\n```\nshould have the theorem\n```\n(xs : Nat) →\n  f xs =\n    match xs with\n    | [] => []\n    | x::xs => (x+1)::f xs\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.registerGetUnfoldEqnFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">registerGetUnfoldEqnFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.GetUnfoldEqnFn\">Lean.Meta.GetUnfoldEqnFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L98-L98","name":"Lean.Meta.GetUnfoldEqnFn","line":98,"kind":"def","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.GetUnfoldEqnFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.GetUnfoldEqnFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GetUnfoldEqnFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L83-L96","name":"Lean.Meta.getEqnsFor?","line":83,"kind":"def","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.getEqnsFor?","doc":"Return equation theorems for the given declaration.\nBy default, we not create equation theorems for nonrecursive definitions.\nYou can use `nonRec := true` to override this behavior, a dummy `rfl` proof is created on the fly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.getEqnsFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getEqnsFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonRec : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L57-L58","name":"Lean.Meta.eqnsExt","line":57,"kind":"opaque","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.eqnsExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.eqnsExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">eqnsExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">Lean.Meta.EqnsExtState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L54-L54","name":"Lean.Meta.instInhabitedEqnsExtState","line":54,"kind":"instance","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.instInhabitedEqnsExtState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.instInhabitedEqnsExtState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedEqnsExtState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">Lean.Meta.EqnsExtState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L53-L53","name":"Lean.Meta.EqnsExtState.map","line":53,"kind":"def","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EqnsExtState</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">Lean.Meta.EqnsExtState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L52-L54","name":"Lean.Meta.EqnsExtState","line":52,"kind":"structure","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EqnsExtState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L40-L43","name":"Lean.Meta.registerGetEqnsFn","line":40,"kind":"def","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.registerGetEqnsFn","doc":"Register a new function for retrieving equation theorems.\nWe generate equations theorems on demand, and they are generated by more than one module.\nFor example, the structural and well-founded recursion modules generate them.\nMost recent getters are tried first.\n\nA getter returns an `Option (Array Name)`. The result is `none` if the getter failed.\nOtherwise, it is a sequence of theorem names where each one of them corresponds to\nan alternative. Example: the definition\n\n```\ndef f (xs : List Nat) : List Nat :=\n  match xs with\n  | [] => []\n  | x::xs => (x+1)::f xs\n```\nshould have two equational theorems associated with it\n```\nf [] = []\n```\nand\n```\n(x : Nat) → (xs : List Nat) → f (x :: xs) = (x+1) :: f xs\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.registerGetEqnsFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">registerGetEqnsFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.GetEqnsFn\">Lean.Meta.GetEqnsFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L11-L11","name":"Lean.Meta.GetEqnsFn","line":11,"kind":"def","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.GetEqnsFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.GetEqnsFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GetEqnsFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Eqns.lean#L1-L1","name":"Lean.Meta.EqnsExtState.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EqnsExtState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">Lean.Meta.EqnsExtState</a></div></div>"}]}