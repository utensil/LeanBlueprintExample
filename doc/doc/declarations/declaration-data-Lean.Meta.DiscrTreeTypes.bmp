{"name":"Lean.Meta.DiscrTreeTypes","instances":[{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.instInhabitedKey","className":"Inhabited"},{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.instBEqKey","className":"BEq"},{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.instReprKey","className":"Repr"},{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.instHashableKey","className":"Hashable"}],"imports":["Init","Lean.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L84-L84","name":"Lean.Meta.DiscrTree.root","line":84,"kind":"def","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.root","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.root\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">α</span> <span class=\"fn\">simpleReduce</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">Lean.PersistentHashMap</a> (<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span>) (<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie\">Lean.Meta.DiscrTree.Trie</a> <span class=\"fn\">α</span> <span class=\"fn\">simpleReduce</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L83-L83","name":"Lean.Meta.DiscrTree.mk","line":83,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(root : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">Lean.PersistentHashMap</a> (<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span>) (<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie\">Lean.Meta.DiscrTree.Trie</a> <span class=\"fn\">α</span> <span class=\"fn\">simpleReduce</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">α</span> <span class=\"fn\">simpleReduce</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L83-L84","name":"Lean.Meta.DiscrTree","line":83,"kind":"structure","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree","doc":"Discrimination trees. It is an index from terms to values of type `α`.\n\nIf `simpleReduce := true`, then only simple reduction are performed while\nindexing/retrieving terms. For example, `iota` reduction is not performed.\n\nWe use `simpleReduce := false` in the type class resolution module,\nand `simpleReduce := true` in `simp`.\n\nMotivations:\n- In `simp`, we want to have `simp` theorem such as\n```\n@[simp] theorem liftOn_mk (a : α) (f : α → γ) (h : ∀ a₁ a₂, r a₁ a₂ → f a₁ = f a₂) :\n    Quot.liftOn (Quot.mk r a) f h = f a := rfl\n```\nIf we enable `iota`, then the lhs is reduced to `f a`.\n\n- During type class resolution, we often want to reduce types using even `iota`.\nExample:\n```\ninductive Ty where\n  | int\n  | bool\n\n@[reducible] def Ty.interp (ty : Ty) : Type :=\n  Ty.casesOn (motive := fun _ => Type) ty Int Bool\n\ndef test {a b c : Ty} (f : a.interp → b.interp → c.interp) (x : a.interp) (y : b.interp) : c.interp :=\n  f x y\n\ndef f (a b : Ty.bool.interp) : Ty.bool.interp :=\n  -- We want to synthesize `BEq Ty.bool.interp` here, and it will fail\n  -- if we do not reduce `Ty.bool.interp` to `Bool`.\n  test (.==.) a b\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L41-L41","name":"Lean.Meta.DiscrTree.Trie.node","line":41,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie.node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie.node\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(vs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(children : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie\">Lean.Meta.DiscrTree.Trie</a> <span class=\"fn\">α</span> <span class=\"fn\">simpleReduce</span></span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie\">Lean.Meta.DiscrTree.Trie</a> <span class=\"fn\">α</span> <span class=\"fn\">simpleReduce</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L40-L41","name":"Lean.Meta.DiscrTree.Trie","line":40,"kind":"inductive","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie","doc":"Discrimination tree trie. See `DiscrTree`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Trie</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L35-L35","name":"Lean.Meta.DiscrTree.instHashableKey","line":35,"kind":"instance","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instHashableKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instHashableKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">instHashableKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> (<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">s</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L26-L33","name":"Lean.Meta.DiscrTree.Key.hash","line":26,"kind":"def","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.hash","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">hash</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">s</span></span> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L24-L24","name":"Lean.Meta.DiscrTree.instReprKey","line":24,"kind":"instance","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instReprKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instReprKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">instReprKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">simpleReduce</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>} → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> (<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L24-L24","name":"Lean.Meta.DiscrTree.instBEqKey","line":24,"kind":"instance","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instBEqKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instBEqKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">instBEqKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">simpleReduce</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> (<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L24-L24","name":"Lean.Meta.DiscrTree.instInhabitedKey","line":24,"kind":"instance","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instInhabitedKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instInhabitedKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">instInhabitedKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L23-L23","name":"Lean.Meta.DiscrTree.Key.proj","line":23,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L22-L22","name":"Lean.Meta.DiscrTree.Key.arrow","line":22,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.arrow\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L21-L21","name":"Lean.Meta.DiscrTree.Key.other","line":21,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.other","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">other</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L20-L20","name":"Lean.Meta.DiscrTree.Key.star","line":20,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.star\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L19-L19","name":"Lean.Meta.DiscrTree.Key.lit","line":19,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.lit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">lit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a> → <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L18-L18","name":"Lean.Meta.DiscrTree.Key.fvar","line":18,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.fvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">fvar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L17-L17","name":"Lean.Meta.DiscrTree.Key.const","line":17,"kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a> <span class=\"fn\">simpleReduce</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/DiscrTreeTypes.lean#L16-L24","name":"Lean.Meta.DiscrTree.Key","line":16,"kind":"inductive","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key","doc":"Discrimination tree key. See `DiscrTree`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">Key</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(simpleReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}