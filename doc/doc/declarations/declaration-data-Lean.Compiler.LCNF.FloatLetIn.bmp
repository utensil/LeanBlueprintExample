{"name":"Lean.Compiler.LCNF.FloatLetIn","instances":[{"typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"],"name":"Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","className":"Hashable"},{"typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"],"name":"Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"],"name":"Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"],"name":"Lean.Compiler.LCNF.FloatLetIn.instReprDecision","className":"Repr"}],"imports":["Init","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.FVarUtil","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L305-L306","name":"Lean.Compiler.LCNF.floatLetIn","line":305,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.floatLetIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(phase : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Lean.Compiler.LCNF.Phase</a> <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase.base\">Lean.Compiler.LCNF.Phase.base</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occurrence : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L302-L303","name":"Lean.Compiler.LCNF.Decl.floatLetIn","line":302,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.Decl.floatLetIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.Decl.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L263-L298","name":"Lean.Compiler.LCNF.FloatLetIn.floatLetIn.go","line":263,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">floatLetIn</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L249-L261","name":"Lean.Compiler.LCNF.FloatLetIn.floatLetIn.goCases","line":249,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn.goCases","doc":"Iterate through the collected declarations,\ndetermining from the bottom up whether they (and the declarations they refer to)\nshould get moved down into the arms of the cases statement or not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn.goCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">floatLetIn</span>.<span class=\"name\">goCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">Lean.Compiler.LCNF.FloatLetIn.FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L240-L298","name":"Lean.Compiler.LCNF.FloatLetIn.floatLetIn","line":240,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn","doc":"Iterate throgh `decl`, pushing local declarations that are only used in one\ncontrol flow arm into said arm in order to avoid useless computations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L229-L234","name":"Lean.Compiler.LCNF.FloatLetIn.float.goFVar","line":229,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float.goFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float.goFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">float</span>.<span class=\"name\">goFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvar : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arm : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">Lean.Compiler.LCNF.FloatLetIn.FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L224-L234","name":"Lean.Compiler.LCNF.FloatLetIn.float","line":224,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float","doc":"Will:\n- put `decl` into the arm it is marked to be moved into\n- for any variables that might occur in `decl` and are of interest:\n  - if they are already meant to be floated into the same arm or not at all leave them untouched:\n    ```\n    let x := ...\n    let y := x + z\n    cases z with\n    | n => x * y\n    | m => z\n    ```\n    If we are at `y` `x` is alreayd marked to be floated into `n` as well.\n  - if there hasn't be a decision yet, that is they are marked with `.unknown` we float\n    them into the same arm as the current value:\n    ```\n    let x := ..\n    let y := x + 2\n    cases z with\n    | n => y\n    | m => z\n    ```\n    Here `x` is initially marked as `.unknown` since it occurs in no branch, however\n    since we want to move `y` into the `n` branch we can also decide to move `x`\n    into the `n` branch. Note that this decision might be revoked later on in the case of:\n    ```\n    let x := ..\n    let a := x + 1\n    let y := x + 2\n    cases z with\n    | n => y\n    | m => a\n    ```\n    When we visit `a` `x` is now marked as getting moved into `n` but since it also occurs\n    in `a` which wants to be moved somewhere else we will instead decide to not move `x`\n    at all.\n  - if they are meant to be floated somewhere else decide that they wont get floated:\n    ```\n    let x := ...\n    let y := x + z\n    cases z with\n    | n => y\n    | m => x\n    ```\n    If we are at `y` `x` is still marked to be moved but we don't want that.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">float</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">Lean.Compiler.LCNF.FloatLetIn.FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L174-L176","name":"Lean.Compiler.LCNF.FloatLetIn.dontFloat.goFVar","line":174,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat.goFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat.goFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">dontFloat</span>.<span class=\"name\">goFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvar : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">Lean.Compiler.LCNF.FloatLetIn.FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L170-L176","name":"Lean.Compiler.LCNF.FloatLetIn.dontFloat","line":170,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat","doc":"Will:\n- put `decl` into the `dont` arm\n- decide that any free variable that occurs in `decl` and is a declaration\n  of interest as not getting moved either.\n```\nlet x := ...\nlet y := ...\nlet z := x + y\ncases z with\n| n => z * x\n| m => z * y\n```\nHere `x` and `y` are originally marked as getting floated into `n` and `m`\nrespectively but since `z` can't be moved we don't want that to move `x` and `y`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">dontFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">Lean.Compiler.LCNF.FloatLetIn.FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L149-L152","name":"Lean.Compiler.LCNF.FloatLetIn.initialNewArms","line":149,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialNewArms","doc":"Compute the initial new arms. This will just set up a map from all arms of\n`cs` to empty `Array`s, plus one additional entry for `dont`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialNewArms\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialNewArms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Lean.Compiler.LCNF.Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L142-L143","name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goCases","line":142,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span>.<span class=\"name\">goCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Lean.Compiler.LCNF.Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> (<span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span>)\n  <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L140-L141","name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goAlt","line":140,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span>.<span class=\"name\">goAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(alt : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Lean.Compiler.LCNF.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> (<span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span>)\n  <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L132-L137","name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goFVar","line":132,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span>.<span class=\"name\">goFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(plannedDecision : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(var : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> (<span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span>)\n  <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L118-L143","name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions","line":118,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions","doc":"Compute the initial decision for all declarations that `BaseFloatM` collected\nup to this point, with respect to `cs`. The initial decisions are:\n- `dont` if the declaration is detected by `ignore?`\n- `dont` if the declaration is the discriminant of `cs` since we obviously need\n  the discriminant to be computed before the match.\n- `dont` if we see the declaration being used in more than one cases arm\n- `arm` or `default` if we see the declaration only being used in exactly one cases arm\n- `unknown` otherwise\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Lean.Compiler.LCNF.Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> (<span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L100-L106","name":"Lean.Compiler.LCNF.FloatLetIn.ignore?","line":100,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.ignore?","doc":"Whether to ignore `decl` for the floating mechanism. We want to do this if:\n- `decl`' is storing a typeclass instance\n- `decl` is a projection from a variable that is storing a typeclass instance\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.ignore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">ignore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L91-L93","name":"Lean.Compiler.LCNF.FloatLetIn.withNewScope","line":91,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewScope","doc":"Run `x` with an empty list of declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">withNewScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L84-L86","name":"Lean.Compiler.LCNF.FloatLetIn.withNewCandidate","line":84,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewCandidate","doc":"Add `decl` to the list of declarations and run `x` with that updated context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">withNewCandidate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L79-L79","name":"Lean.Compiler.LCNF.FloatLetIn.FloatM","line":79,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM","doc":"Use to compute the actual floating.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L74-L74","name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatM","line":74,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM","doc":"Use to collect relevant declarations for the floating mechanism.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L69-L69","name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms","line":69,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms","doc":"A map from decisions (excluding `unknown`) to the declarations with\nthese decisions (in correct order). Basically:\n- Which declarations do we not move\n- Which declarations do we move into a certain arm\n- Which declarations do we move into the default arm\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">newArms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">Lean.Compiler.LCNF.FloatLetIn.FloatState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L61-L61","name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.decision","line":61,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.decision","doc":"A map from identifiers of declarations to their current decision.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.decision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">decision</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">Lean.Compiler.LCNF.FloatLetIn.FloatState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L57-L69","name":"Lean.Compiler.LCNF.FloatLetIn.FloatState","line":57,"kind":"structure","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState","doc":"The state for `FloatM`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L52-L52","name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls","line":52,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls","doc":"All the declarations that were collected in the current LCNF basic\nblock up to the current statement (in reverse order for efficiency).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L47-L52","name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext","line":47,"kind":"structure","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext","doc":"The context for `BaseFloatM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L40-L42","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt","line":40,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">ofAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Lean.Compiler.LCNF.Alt</a> → <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L38-L38","name":"Lean.Compiler.LCNF.FloatLetIn.instReprDecision","line":38,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instReprDecision","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instReprDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instReprDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L38-L38","name":"Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","line":38,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instInhabitedDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L38-L38","name":"Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","line":38,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instBEqDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instBEqDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L38-L38","name":"Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","line":38,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instHashableDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instHashableDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L33-L37","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.unknown","line":33,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.unknown","doc":"No decision has been made yet.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.unknown\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">unknown</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L28-L32","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.dont","line":28,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.dont","doc":"Dont move this declaration it is needed where it is right now.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.dont\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">dont</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L24-L27","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.default","line":24,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.default","doc":"Push into the default arm.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L19-L23","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.arm","line":19,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.arm","doc":"Push into the arm with name `name`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.arm\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">arm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L18-L38","name":"Lean.Compiler.LCNF.FloatLetIn.Decision","line":18,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision","doc":"The decision of the float mechanism.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L1-L1","name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decision : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newArms : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Lean.Compiler.LCNF.FloatLetIn.Decision</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">Lean.Compiler.LCNF.FloatLetIn.FloatState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FloatLetIn.lean#L1-L1","name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\">Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext</a></div></div>"}]}