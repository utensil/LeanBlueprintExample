{"name":"Lean.Meta.GetUnfoldableConst","instances":[],"imports":["Init","Lean.Meta.GlobalInstances"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/GetUnfoldableConst.lean#L47-L52","name":"Lean.Meta.getUnfoldableConstNoEx?","line":47,"kind":"def","docLink":"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.getUnfoldableConstNoEx?","doc":"As with `getUnfoldableConst?` but return `none` instead of failing if the constant is not found.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.getUnfoldableConstNoEx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnfoldableConstNoEx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/GetUnfoldableConst.lean#L37-L42","name":"Lean.Meta.getUnfoldableConst?","line":37,"kind":"def","docLink":"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.getUnfoldableConst?","doc":"Look up a constant name, returning the `ConstantInfo`\nif it should be unfolded at the current reducibility settings,\nor `none` otherwise.\n\nThis is part of the implementation of `whnf`.\nExternal users wanting to look up names should be using `Lean.getConstInfo`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.getUnfoldableConst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnfoldableConst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/GetUnfoldableConst.lean#L22-L27","name":"Lean.Meta.canUnfold","line":22,"kind":"def","docLink":"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.canUnfold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.canUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">canUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}