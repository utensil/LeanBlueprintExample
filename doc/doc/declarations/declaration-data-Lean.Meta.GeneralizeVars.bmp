{"name":"Lean.Meta.GeneralizeVars","instances":[],"imports":["Init","Lean.Meta.Basic","Lean.Util.CollectFVars"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/GeneralizeVars.lean#L68-L71","name":"Lean.Meta.getFVarsToGeneralize","line":68,"kind":"def","docLink":"./Lean/Meta/GeneralizeVars.html#Lean.Meta.getFVarsToGeneralize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GeneralizeVars.html#Lean.Meta.getFVarsToGeneralize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getFVarsToGeneralize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(targets : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(forbidden : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ignoreLetDecls : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/GeneralizeVars.lean#L57-L66","name":"Lean.Meta.getFVarSetToGeneralize","line":57,"kind":"def","docLink":"./Lean/Meta/GeneralizeVars.html#Lean.Meta.getFVarSetToGeneralize","doc":"Collect variables to be generalized.\nIt uses the following heuristic\n- Collect forward dependencies that are not in the forbidden set, and depend on some variable in `targets`.\n\n- We use `mkForbiddenSet` to compute `forbidden`.\n\nRemark: we *not* collect instance implicit arguments nor auxiliary declarations for compiling\nrecursive declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GeneralizeVars.html#Lean.Meta.getFVarSetToGeneralize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getFVarSetToGeneralize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(targets : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(forbidden : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ignoreLetDecls : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/GeneralizeVars.lean#L37-L45","name":"Lean.Meta.mkGeneralizationForbiddenSet.loop","line":37,"kind":"opaque","docLink":"./Lean/Meta/GeneralizeVars.html#Lean.Meta.mkGeneralizationForbiddenSet.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GeneralizeVars.html#Lean.Meta.mkGeneralizationForbiddenSet.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkGeneralizationForbiddenSet</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(todo : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/GeneralizeVars.lean#L24-L35","name":"Lean.Meta.mkGeneralizationForbiddenSet.visit","line":24,"kind":"def","docLink":"./Lean/Meta/GeneralizeVars.html#Lean.Meta.mkGeneralizationForbiddenSet.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GeneralizeVars.html#Lean.Meta.mkGeneralizationForbiddenSet.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkGeneralizationForbiddenSet</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(todo : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/GeneralizeVars.lean#L14-L45","name":"Lean.Meta.mkGeneralizationForbiddenSet","line":14,"kind":"def","docLink":"./Lean/Meta/GeneralizeVars.html#Lean.Meta.mkGeneralizationForbiddenSet","doc":"Add to `forbidden` all a set of `FVarId`s containing `targets` and all variables they depend on.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GeneralizeVars.html#Lean.Meta.mkGeneralizationForbiddenSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkGeneralizationForbiddenSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(targets : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(forbidden : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></span></div></div>"}]}