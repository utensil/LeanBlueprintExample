{"name":"Lean.Compiler.LCNF.Testing","instances":[],"imports":["Init","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.PrettyPrinter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L239-L244","name":"Lean.Compiler.LCNF.Testing.assertNoFun","line":239,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertNoFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertNoFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertNoFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L236-L237","name":"Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter","line":236,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter","doc":"Assert that the pass under test produces `Decl`s that do not contain\n`Expr.const constName` in their `Code.let` values anymore.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertDoesNotContainConstAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L229-L230","name":"Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize","line":229,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize","doc":"Assert that the overall size of the `Decl`s in the compilation pipeline gets reduced or stays unchanged\nby `passUnderTestName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertReducesOrPreservesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L222-L223","name":"Lean.Compiler.LCNF.Testing.assertReducesSize","line":222,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesSize","doc":"Assert that the overall size of the `Decl`s in the compilation pipeline gets reduced by `passUnderTestName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertReducesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L216-L217","name":"Lean.Compiler.LCNF.Testing.assertPreservesSize","line":216,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertPreservesSize","doc":"Assert that the overall size of the `Decl`s in the compilation pipeline does not change\nafter `passUnderTestName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertPreservesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertPreservesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L207-L210","name":"Lean.Compiler.LCNF.Testing.assertSize","line":207,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertSize","doc":"Compare the overall sizes of the input and output of `passUnderTest` with `assertion`.\nIf `assertion inputSize outputSize` is `false` throw an exception with `msg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(assertion : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L187-L201","name":"Lean.Compiler.LCNF.Testing.assertIsAtFixPoint","line":187,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertIsAtFixPoint","doc":"Insert a pass after `passUnderTestName`, that ensures, that if\n`passUnderTestName` is executed twice in a row, no change in the resulting\nexpression will occur, i.e. the pass is at a fix point.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertIsAtFixPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertIsAtFixPoint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L168-L171","name":"Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence","line":168,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence","doc":"Replace all occurrences of a pass with a wrapper one that allows\nthe user to provide an assertion which takes into account both the\ndeclarations that were sent to and produced by the pass under test.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAroundEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(test : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\">Lean.Compiler.LCNF.Testing.InOutTest</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L158-L161","name":"Lean.Compiler.LCNF.Testing.assertAround","line":158,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAround","doc":"Replace a specific occurrence, default is first, of a pass with a wrapper one that allows\nthe user to provide an assertion which takes into account both the\ndeclarations that were sent to and produced by the pass under test.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAround\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAround</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(test : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\">Lean.Compiler.LCNF.Testing.InOutTest</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occurrence : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L135-L138","name":"Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence","line":135,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence","doc":"Install an assertion pass right after the each occurrence of a pass. The\nassertion operates on a per declaration basis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertForEachDeclAfterEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(assertion : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L125-L129","name":"Lean.Compiler.LCNF.Testing.assertForEachDeclAfter","line":125,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfter","doc":"Install an assertion pass right after a specific occurrence of a pass,\ndefault is first. The assertion operates on a per declaration basis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertForEachDeclAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(assertion : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occurrence : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L116-L119","name":"Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence","line":116,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence","doc":"Install an assertion pass right after each occurrence of a pass.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAfterEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(test : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\">Lean.Compiler.LCNF.Testing.SimpleTest</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L108-L111","name":"Lean.Compiler.LCNF.Testing.assertAfter","line":108,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfter","doc":"Install an assertion pass right after a specific occurrence of a pass,\ndefault is first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(test : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\">Lean.Compiler.LCNF.Testing.SimpleTest</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occurrence : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L88-L90","name":"Lean.Compiler.LCNF.Testing.assert","line":88,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assert","doc":"If `property` is `false` throw an exception with `msg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assert\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(property : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">Lean.Compiler.LCNF.Testing.TestM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L82-L83","name":"Lean.Compiler.LCNF.Testing.getOutputDecls","line":82,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getOutputDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getOutputDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getOutputDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">Lean.Compiler.LCNF.Testing.InOutAssertionM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L79-L80","name":"Lean.Compiler.LCNF.Testing.getInputDecls","line":79,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getInputDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getInputDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getInputDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">Lean.Compiler.LCNF.Testing.InOutAssertionM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L76-L77","name":"Lean.Compiler.LCNF.Testing.getDecls","line":76,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\">Lean.Compiler.LCNF.Testing.SimpleAssertionM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L73-L74","name":"Lean.Compiler.LCNF.Testing.getPassUnderTest","line":73,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getPassUnderTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getPassUnderTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getPassUnderTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">Lean.Compiler.LCNF.Testing.TestM</a> <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L70-L71","name":"Lean.Compiler.LCNF.Testing.getTestName","line":70,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getTestName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getTestName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getTestName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">Lean.Compiler.LCNF.Testing.TestM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L67-L68","name":"Lean.Compiler.LCNF.Testing.InOutAssertionM.run","line":67,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">Lean.Compiler.LCNF.Testing.InOutAssertionM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(output : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(passUnderTest : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(testName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L64-L65","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionM.run","line":64,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\">Lean.Compiler.LCNF.Testing.SimpleAssertionM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(passUnderTest : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(testName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L61-L62","name":"Lean.Compiler.LCNF.Testing.TestM.run","line":61,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">Lean.Compiler.LCNF.Testing.TestM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(passUnderTest : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(testName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L58-L59","name":"Lean.Compiler.LCNF.Testing.TestInstaller.install","line":58,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller.install","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller.install\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstaller</span>.<span class=\"name\">install</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">Lean.Compiler.LCNF.Testing.TestInstaller</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(passUnderTestName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(testName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.PassInstaller\">Lean.Compiler.LCNF.PassInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L56-L56","name":"Lean.Compiler.LCNF.Testing.InOutTest","line":56,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L55-L55","name":"Lean.Compiler.LCNF.Testing.SimpleTest","line":55,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L54-L54","name":"Lean.Compiler.LCNF.Testing.InOutAssertionM","line":54,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L53-L53","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionM","line":53,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L52-L52","name":"Lean.Compiler.LCNF.Testing.TestM","line":52,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L50-L50","name":"Lean.Compiler.LCNF.Testing.TestInstaller","line":50,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstaller</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L49-L49","name":"Lean.Compiler.LCNF.Testing.TestInstallerM","line":49,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L47-L47","name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.output","line":47,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.output","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.output\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">output</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">Lean.Compiler.LCNF.Testing.InOutAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L46-L46","name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.input","line":46,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.input","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.input\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">input</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">Lean.Compiler.LCNF.Testing.InOutAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L45-L47","name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext","line":45,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L43-L43","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls","line":43,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\">Lean.Compiler.LCNF.Testing.SimpleAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L42-L43","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext","line":42,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L40-L40","name":"Lean.Compiler.LCNF.Testing.TestContext.testName","line":40,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.testName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.testName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">testName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">Lean.Compiler.LCNF.Testing.TestContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L39-L39","name":"Lean.Compiler.LCNF.Testing.TestContext.passUnderTest","line":39,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.passUnderTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.passUnderTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">passUnderTest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">Lean.Compiler.LCNF.Testing.TestContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L38-L40","name":"Lean.Compiler.LCNF.Testing.TestContext","line":38,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L36-L36","name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.testName","line":36,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.testName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.testName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">testName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">Lean.Compiler.LCNF.Testing.TestInstallerContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L35-L35","name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName","line":35,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">passUnderTestName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">Lean.Compiler.LCNF.Testing.TestInstallerContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L34-L36","name":"Lean.Compiler.LCNF.Testing.TestInstallerContext","line":34,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L27-L30","name":"Lean.Compiler.LCNF.Code.containsConst.goLetValue","line":27,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst.goLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst.goLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">containsConst</span>.<span class=\"name\">goLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L19-L26","name":"Lean.Compiler.LCNF.Code.containsConst.goExpr","line":19,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst.goExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst.goExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">containsConst</span>.<span class=\"name\">goExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L11-L30","name":"Lean.Compiler.LCNF.Code.containsConst","line":11,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">containsConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L1-L1","name":"Lean.Compiler.LCNF.Testing.TestContext.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(passUnderTest : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(testName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">Lean.Compiler.LCNF.Testing.TestContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L1-L1","name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(passUnderTestName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(testName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">Lean.Compiler.LCNF.Testing.TestInstallerContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L1-L1","name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(input : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(output : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">Lean.Compiler.LCNF.Testing.InOutAssertionContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Testing.lean#L1-L1","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\">Lean.Compiler.LCNF.Testing.SimpleAssertionContext</a></div></div>"}]}