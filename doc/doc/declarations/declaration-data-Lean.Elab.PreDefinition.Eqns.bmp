{"name":"Lean.Elab.PreDefinition.Eqns","instances":[{"typeNames":["Lean.Elab.Eqns.EqnInfoCore"],"name":"Lean.Elab.Eqns.instInhabitedEqnInfoCore","className":"Inhabited"},{"typeNames":["Lean.Elab.Eqns.UnfoldEqnExtState"],"name":"Lean.Elab.Eqns.instInhabitedUnfoldEqnExtState","className":"Inhabited"}],"imports":["Init","Lean.Meta.Eqns","Lean.Util.CollectFVars","Lean.Util.ForEachExprWhere","Lean.Meta.Tactic.Split","Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Refl","Lean.Meta.Match.MatchEqs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L378-L387","name":"Lean.Elab.Eqns.getUnfoldFor?","line":378,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.getUnfoldFor?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.getUnfoldFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">getUnfoldFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(getInfo? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">Lean.Elab.Eqns.EqnInfoCore</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L360-L376","name":"Lean.Elab.Eqns.mkUnfoldEq","line":360,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldEq","doc":"Generate the \"unfold\" lemma for `declName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">mkUnfoldEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">Lean.Elab.Eqns.EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L339-L356","name":"Lean.Elab.Eqns.mkUnfoldProof.go","line":339,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldProof.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldProof.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">mkUnfoldProof</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tryEqns : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L326-L357","name":"Lean.Elab.Eqns.mkUnfoldProof","line":326,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldProof","doc":"Auxiliary method for `mkUnfoldEq`. The structure is based on `mkEqnTypes`.\n`mvarId` is the goal to be proved. It is a goal of the form\n```\ndeclName x_1 ... x_n = body[x_1, ..., x_n]\n```\nThe proof is constracted using the automatically generated equational theorems.\nWe basically keep splitting the `match` and `if-then-else` expressions in the right hand side\nuntil one of the equational theorems is applicable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">mkUnfoldProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L313-L314","name":"Lean.Elab.Eqns.unfoldEqnExt","line":313,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.unfoldEqnExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.unfoldEqnExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">unfoldEqnExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState\">Lean.Elab.Eqns.UnfoldEqnExtState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L310-L310","name":"Lean.Elab.Eqns.instInhabitedUnfoldEqnExtState","line":310,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedUnfoldEqnExtState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedUnfoldEqnExtState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">instInhabitedUnfoldEqnExtState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState\">Lean.Elab.Eqns.UnfoldEqnExtState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L309-L309","name":"Lean.Elab.Eqns.UnfoldEqnExtState.map","line":309,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">UnfoldEqnExtState</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState\">Lean.Elab.Eqns.UnfoldEqnExtState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L308-L310","name":"Lean.Elab.Eqns.UnfoldEqnExtState","line":308,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">UnfoldEqnExtState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L305-L306","name":"Lean.Elab.Eqns.tryContradiction","line":305,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryContradiction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryContradiction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">tryContradiction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L296-L303","name":"Lean.Elab.Eqns.whnfReducibleLHS?","line":296,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.whnfReducibleLHS?","doc":"Apply `whnfR` to lhs, return `none` if `lhs` was not modified "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.whnfReducibleLHS?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">whnfReducibleLHS?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L282-L286","name":"Lean.Elab.Eqns.deltaRHS?","line":282,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaRHS?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaRHS?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">deltaRHS?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L276-L280","name":"Lean.Elab.Eqns.deltaLHS","line":276,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaLHS","doc":"Delta reduce the equation left-hand-side "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaLHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">deltaLHS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L254-L273","name":"Lean.Elab.Eqns.removeUnusedEqnHypotheses.go","line":254,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.removeUnusedEqnHypotheses.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.removeUnusedEqnHypotheses.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">removeUnusedEqnHypotheses</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declValue : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> (<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L251-L273","name":"Lean.Elab.Eqns.removeUnusedEqnHypotheses","line":251,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.removeUnusedEqnHypotheses","doc":"Some of the hypotheses added by `mkEqnTypes` may not be used by the actual proof (i.e., `value` argument).\nThis method eliminates them.\n\nAlternative solution: improve `saveEqn` and make sure it never includes unnecessary hypotheses.\nThese hypotheses are leftovers from tactics such as `splitMatch?` used in `mkEqnTypes`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.removeUnusedEqnHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">removeUnusedEqnHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declValue : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> (<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L223-L242","name":"Lean.Elab.Eqns.mkEqnTypes.go","line":223,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqnTypes.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqnTypes.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">mkEqnTypes</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context\">Lean.Elab.Eqns.Context</a> (<span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>) <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a></span>) <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L219-L242","name":"Lean.Elab.Eqns.mkEqnTypes","line":219,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqnTypes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqnTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">mkEqnTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L140-L149","name":"Lean.Elab.Eqns.simpEqnType.collect","line":140,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpEqnType.collect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpEqnType.collect\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">simpEqnType</span>.<span class=\"name\">collect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L112-L149","name":"Lean.Elab.Eqns.simpEqnType","line":112,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpEqnType","doc":"Eliminate `namedPatterns` from equation, and trivial hypotheses.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpEqnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">simpEqnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(eqnType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L105-L107","name":"Lean.Elab.Eqns.tryURefl","line":105,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryURefl","doc":"Try to close goal using `rfl` with smart unfolding turned off. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryURefl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">tryURefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L95-L95","name":"Lean.Elab.Eqns.Context.declNames","line":95,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context.declNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context.declNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">Context</span>.<span class=\"name\">declNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context\">Lean.Elab.Eqns.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L94-L95","name":"Lean.Elab.Eqns.Context","line":94,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L83-L91","name":"Lean.Elab.Eqns.splitMatch?.go","line":83,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.splitMatch?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.splitMatch?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">splitMatch?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(badCases : <a href=\"./Lean/Expr.html#Lean.ExprSet\">Lean.ExprSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L81-L92","name":"Lean.Elab.Eqns.splitMatch?","line":81,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.splitMatch?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.splitMatch?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">splitMatch?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L48-L50","name":"Lean.Elab.Eqns.simpIf?","line":48,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpIf?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpIf?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">simpIf?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L44-L46","name":"Lean.Elab.Eqns.simpMatch?","line":44,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpMatch?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpMatch?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">simpMatch?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L35-L42","name":"Lean.Elab.Eqns.funext?","line":35,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.funext?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.funext?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">funext?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L29-L33","name":"Lean.Elab.Eqns.expandRHS?","line":29,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expandRHS?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expandRHS?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">expandRHS?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L24-L27","name":"Lean.Elab.Eqns.expand","line":24,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expand","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expand\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">expand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L22-L22","name":"Lean.Elab.Eqns.instInhabitedEqnInfoCore","line":22,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedEqnInfoCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedEqnInfoCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">instInhabitedEqnInfoCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">Lean.Elab.Eqns.EqnInfoCore</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L21-L21","name":"Lean.Elab.Eqns.EqnInfoCore.value","line":21,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">Lean.Elab.Eqns.EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L20-L20","name":"Lean.Elab.Eqns.EqnInfoCore.type","line":20,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">Lean.Elab.Eqns.EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L19-L19","name":"Lean.Elab.Eqns.EqnInfoCore.levelParams","line":19,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.levelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.levelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">levelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">Lean.Elab.Eqns.EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L18-L18","name":"Lean.Elab.Eqns.EqnInfoCore.declName","line":18,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.declName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">Lean.Elab.Eqns.EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L17-L22","name":"Lean.Elab.Eqns.EqnInfoCore","line":17,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L1-L1","name":"Lean.Elab.Eqns.Context.mk","line":1,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context\">Lean.Elab.Eqns.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L1-L1","name":"Lean.Elab.Eqns.EqnInfoCore.mk","line":1,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">Lean.Elab.Eqns.EqnInfoCore</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Eqns.lean#L1-L1","name":"Lean.Elab.Eqns.UnfoldEqnExtState.mk","line":1,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">UnfoldEqnExtState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(map : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState\">Lean.Elab.Eqns.UnfoldEqnExtState</a></div></div>"}]}