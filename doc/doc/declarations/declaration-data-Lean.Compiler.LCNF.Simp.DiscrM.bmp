{"name":"Lean.Compiler.LCNF.Simp.DiscrM","instances":[],"imports":["Init","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.Simp.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L106-L109","name":"Lean.Compiler.LCNF.Simp.simpCtorDiscrCore?","line":106,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.simpCtorDiscrCore?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.simpCtorDiscrCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpCtorDiscrCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">Lean.Compiler.LCNF.Simp.DiscrM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L103-L104","name":"Lean.Compiler.LCNF.Simp.withDiscrCtor","line":103,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtor","doc":"Execute `x` with the information that `discr = ctorName ctorFields`.\nWe use this information to simplify nested cases on the same discriminant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withDiscrCtor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">Lean.Compiler.LCNF.Simp.DiscrM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(discr : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorFields : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L89-L101","name":"Lean.Compiler.LCNF.Simp.withDiscrCtorImp.updateCtx","line":89,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtorImp.updateCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtorImp.updateCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withDiscrCtorImp</span>.<span class=\"name\">updateCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(discr : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorFields : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">Lean.Compiler.LCNF.Simp.DiscrM</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\">Lean.Compiler.LCNF.Simp.DiscrM.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L85-L101","name":"Lean.Compiler.LCNF.Simp.withDiscrCtorImp","line":85,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtorImp","doc":"Execute `x` with the information that `discr = ctorName ctorFields`.\nWe use this information to simplify nested cases on the same discriminant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtorImp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withDiscrCtorImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(discr : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorFields : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">Lean.Compiler.LCNF.Simp.DiscrM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">Lean.Compiler.LCNF.Simp.DiscrM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L71-L79","name":"Lean.Compiler.LCNF.Simp.getIndInfo?","line":71,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.getIndInfo?","doc":"If `type` is an inductive datatype, return its universe levels and parameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.getIndInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getIndInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L64-L66","name":"Lean.Compiler.LCNF.Simp.findCtorName?","line":64,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtorName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtorName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">findCtorName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">Lean.Compiler.LCNF.Simp.DiscrM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L54-L62","name":"Lean.Compiler.LCNF.Simp.findCtor?","line":54,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtor?","doc":"If `fvarId` is a constructor application, returns constructor information.\nRemark: we use the map `discrCtorMap`.\nRemark: We use this method when simplifying projections and cases-constructor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">findCtor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">Lean.Compiler.LCNF.Simp.DiscrM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">Lean.Compiler.LCNF.Simp.CtorInfo</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L47-L47","name":"Lean.Compiler.LCNF.Simp.DiscrM","line":47,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM","doc":"Helper monad for tracking mappings from discriminant to constructor applications and back.\nThe combinator `withDiscrCtor` should be used when visiting `cases` alternatives.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L41-L41","name":"Lean.Compiler.LCNF.Simp.DiscrM.Context.ctorDiscrMap","line":41,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.ctorDiscrMap","doc":"A mapping from constructor application to discriminant it is equal to in the current context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.ctorDiscrMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span>.<span class=\"name\">Context</span>.<span class=\"name\">ctorDiscrMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\">Lean.Compiler.LCNF.Simp.DiscrM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.PersistentExprMap\">Lean.PersistentExprMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L37-L37","name":"Lean.Compiler.LCNF.Simp.DiscrM.Context.discrCtorMap","line":37,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.discrCtorMap","doc":"A mapping from discriminant to constructor application it is equal to in the current context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.discrCtorMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span>.<span class=\"name\">Context</span>.<span class=\"name\">discrCtorMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\">Lean.Compiler.LCNF.Simp.DiscrM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">Lean.Compiler.LCNF.Simp.CtorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L33-L41","name":"Lean.Compiler.LCNF.Simp.DiscrM.Context","line":33,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L28-L31","name":"Lean.Compiler.LCNF.Simp.CtorInfo.getNumFields","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getNumFields","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getNumFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">getNumFields</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">Lean.Compiler.LCNF.Simp.CtorInfo</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L24-L26","name":"Lean.Compiler.LCNF.Simp.CtorInfo.getNumParams","line":24,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getNumParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getNumParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">getNumParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">Lean.Compiler.LCNF.Simp.CtorInfo</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L19-L22","name":"Lean.Compiler.LCNF.Simp.CtorInfo.getName","line":19,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">getName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">Lean.Compiler.LCNF.Simp.CtorInfo</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L16-L17","name":"Lean.Compiler.LCNF.Simp.CtorInfo.natVal","line":16,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.natVal","doc":"Natural numbers are morally constructor applications "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.natVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">natVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">Lean.Compiler.LCNF.Simp.CtorInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L15-L15","name":"Lean.Compiler.LCNF.Simp.CtorInfo.ctor","line":15,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">Lean.Compiler.LCNF.Simp.CtorInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L14-L17","name":"Lean.Compiler.LCNF.Simp.CtorInfo","line":14,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L1-L1","name":"Lean.Compiler.LCNF.Simp.DiscrM.Context.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(discrCtorMap : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">Lean.Compiler.LCNF.Simp.CtorInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorDiscrMap : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.PersistentExprMap\">Lean.PersistentExprMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\">Lean.Compiler.LCNF.Simp.DiscrM.Context</a></div></div>"}]}