{"name":"Lean.Compiler.IR.Basic","instances":[{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instInhabitedVarId","className":"Inhabited"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instInhabitedJoinPointId","className":"Inhabited"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instBEqVarId","className":"BEq"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instToStringVarId","className":"ToString"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instToFormatVarId","className":"Std.ToFormat"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instHashableVarId","className":"Hashable"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instBEqJoinPointId","className":"BEq"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instToStringJoinPointId","className":"ToString"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instToFormatJoinPointId","className":"Std.ToFormat"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instHashableJoinPointId","className":"Hashable"},{"typeNames":["Lean.IR.IRType"],"name":"Lean.IR.instInhabitedIRType","className":"Inhabited"},{"typeNames":["Lean.IR.IRType"],"name":"Lean.IR.IRType.instBEqIRType","className":"BEq"},{"typeNames":["Lean.IR.Arg"],"name":"Lean.IR.instInhabitedArg","className":"Inhabited"},{"typeNames":["Lean.IR.Arg"],"name":"Lean.IR.instBEqArg","className":"BEq"},{"typeNames":["Lean.IR.LitVal"],"name":"Lean.IR.instBEqLitVal","className":"BEq"},{"typeNames":["Lean.IR.CtorInfo"],"name":"Lean.IR.instReprCtorInfo","className":"Repr"},{"typeNames":["Lean.IR.CtorInfo"],"name":"Lean.IR.instBEqCtorInfo","className":"BEq"},{"typeNames":["Lean.IR.Param"],"name":"Lean.IR.instInhabitedParam","className":"Inhabited"},{"typeNames":["Lean.IR.FnBody"],"name":"Lean.IR.instInhabitedFnBody","className":"Inhabited"},{"typeNames":["Lean.IR.Alt"],"name":"Lean.IR.instInhabitedAlt","className":"Inhabited"},{"typeNames":["Lean.IR.Decl"],"name":"Lean.IR.instInhabitedDecl","className":"Inhabited"},{"typeNames":["Lean.IR.IndexSet"],"name":"Lean.IR.instInhabitedIndexSet","className":"Inhabited"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instAlphaEqvVarId","className":"Lean.IR.AlphaEqv"},{"typeNames":["Lean.IR.Arg"],"name":"Lean.IR.instAlphaEqvArg","className":"Lean.IR.AlphaEqv"},{"typeNames":["Array","Lean.IR.Arg"],"name":"Lean.IR.instAlphaEqvArrayArg","className":"Lean.IR.AlphaEqv"},{"typeNames":["Lean.IR.Expr"],"name":"Lean.IR.instAlphaEqvExpr","className":"Lean.IR.AlphaEqv"},{"typeNames":["Lean.IR.FnBody"],"name":"Lean.IR.instBEqFnBody","className":"BEq"},{"typeNames":["Lean.IR.VarIdSet"],"name":"Lean.IR.instInhabitedVarIdSet","className":"Inhabited"}],"imports":["Init","Lean.Data.KVMap","Lean.Data.Name","Lean.Data.Format","Lean.Compiler.ExternAttr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L611-L617","name":"Lean.IR.getUnboxOpName","line":611,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.getUnboxOpName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.getUnboxOpName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">getUnboxOpName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L605-L609","name":"Lean.IR.mkIf","line":605,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIf\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkIf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L603-L603","name":"Lean.IR.instInhabitedVarIdSet","line":603,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarIdSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarIdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedVarIdSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarIdSet\">Lean.IR.VarIdSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L602-L602","name":"Lean.IR.VarIdSet","line":602,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarIdSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarIdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarIdSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L600-L600","name":"Lean.IR.instBEqFnBody","line":600,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L597-L598","name":"Lean.IR.FnBody.beq","line":597,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b₁ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₂ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L573-L595","name":"Lean.IR.FnBody.alphaEqv","line":573,"kind":"opaque","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L564-L571","name":"Lean.IR.addParamsRename","line":564,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamsRename","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamsRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addParamsRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ps₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ps₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L558-L562","name":"Lean.IR.addParamRename","line":558,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamRename","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addParamRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L555-L556","name":"Lean.IR.addVarRename","line":555,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addVarRename","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addVarRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addVarRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x₁ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L553-L553","name":"Lean.IR.instAlphaEqvExpr","line":553,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">Lean.IR.AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L537-L551","name":"Lean.IR.Expr.alphaEqv","line":537,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L535-L535","name":"Lean.IR.instAlphaEqvArrayArg","line":535,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArrayArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArrayArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvArrayArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">Lean.IR.AlphaEqv</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L532-L533","name":"Lean.IR.args.alphaEqv","line":532,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.args.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.args.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">args</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L530-L530","name":"Lean.IR.instAlphaEqvArg","line":530,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">Lean.IR.AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L525-L528","name":"Lean.IR.Arg.alphaEqv","line":525,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L523-L523","name":"Lean.IR.instAlphaEqvVarId","line":523,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">Lean.IR.AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L518-L521","name":"Lean.IR.VarId.alphaEqv","line":518,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ρ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₁ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₂ : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L514-L514","name":"Lean.IR.AlphaEqv.aeqv","line":514,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.aeqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.aeqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">aeqv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">Lean.IR.AlphaEqv</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L513-L513","name":"Lean.IR.AlphaEqv.mk","line":513,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(aeqv : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">Lean.IR.IndexRenaming</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">Lean.IR.AlphaEqv</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L513-L514","name":"Lean.IR.AlphaEqv","line":513,"kind":"class","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L511-L511","name":"Lean.IR.IndexRenaming","line":511,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IndexRenaming</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L506-L509","name":"Lean.IR.LocalContext.getValue","line":506,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getValue\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L500-L504","name":"Lean.IR.LocalContext.getType","line":500,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L497-L498","name":"Lean.IR.LocalContext.eraseJoinPointDecl","line":497,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.eraseJoinPointDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.eraseJoinPointDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">eraseJoinPointDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L494-L495","name":"Lean.IR.LocalContext.contains","line":494,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L489-L492","name":"Lean.IR.LocalContext.isLocalVar","line":489,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isLocalVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isLocalVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isLocalVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L484-L487","name":"Lean.IR.LocalContext.isParam","line":484,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L479-L482","name":"Lean.IR.LocalContext.getJPParams","line":479,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getJPParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L474-L477","name":"Lean.IR.LocalContext.getJPBody","line":474,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getJPBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L469-L472","name":"Lean.IR.LocalContext.isJP","line":469,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L466-L467","name":"Lean.IR.LocalContext.addParams","line":466,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L463-L464","name":"Lean.IR.LocalContext.addParam","line":463,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L460-L461","name":"Lean.IR.LocalContext.addJP","line":460,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L457-L458","name":"Lean.IR.LocalContext.addLocal","line":457,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addLocal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addLocal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">Lean.IR.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L455-L455","name":"Lean.IR.LocalContext","line":455,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L453-L453","name":"Lean.IR.LocalContextEntry.joinPoint","line":453,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.joinPoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.joinPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">joinPoint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">Lean.IR.LocalContextEntry</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L452-L452","name":"Lean.IR.LocalContextEntry.localVar","line":452,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.localVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.localVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">localVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">Lean.IR.LocalContextEntry</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L451-L451","name":"Lean.IR.LocalContextEntry.param","line":451,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.param","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.param\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">param</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">Lean.IR.LocalContextEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L450-L453","name":"Lean.IR.LocalContextEntry","line":450,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L447-L448","name":"Lean.IR.mkIndexSet","line":447,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIndexSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIndexSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkIndexSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet\">Lean.IR.IndexSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L445-L445","name":"Lean.IR.instInhabitedIndexSet","line":445,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIndexSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIndexSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedIndexSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet\">Lean.IR.IndexSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L444-L444","name":"Lean.IR.IndexSet","line":444,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet","doc":"Set of variable and join point names "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IndexSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L440-L441","name":"Lean.IR.mkDummyExternDecl","line":440,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDummyExternDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDummyExternDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkDummyExternDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L436-L437","name":"Lean.IR.mkExternDecl","line":436,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkExternDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkExternDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkExternDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/ExternAttr.html#Lean.ExternAttrData\">Lean.ExternAttrData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L433-L434","name":"Lean.IR.mkDecl","line":433,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L426-L429","name":"Lean.IR.Decl.updateBody!","line":426,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.updateBody!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.updateBody!\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">updateBody!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bNew : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L422-L424","name":"Lean.IR.Decl.getInfo","line":422,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.getInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.getInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">getInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">Lean.IR.DeclInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L418-L420","name":"Lean.IR.Decl.isExtern","line":418,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.isExtern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.isExtern\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">isExtern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L414-L416","name":"Lean.IR.Decl.resultType","line":414,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.resultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">resultType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L410-L412","name":"Lean.IR.Decl.params","line":410,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.params","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.params\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L406-L408","name":"Lean.IR.Decl.name","line":406,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.name\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L402-L402","name":"Lean.IR.instInhabitedDecl","line":402,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L401-L401","name":"Lean.IR.Decl.extern","line":401,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.extern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.extern\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">extern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ext : <a href=\"./Lean/Compiler/ExternAttr.html#Lean.ExternAttrData\">Lean.ExternAttrData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L400-L400","name":"Lean.IR.Decl.fdecl","line":400,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.fdecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.fdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">fdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">Lean.IR.DeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L399-L402","name":"Lean.IR.Decl","line":399,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L397-L397","name":"Lean.IR.DeclInfo.sorryDep?","line":397,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.sorryDep?","doc":"If `some <blame>`, then declaration depends on `<blame>` which uses a `sorry` axiom. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.sorryDep?\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span>.<span class=\"name\">sorryDep?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">Lean.IR.DeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L395-L397","name":"Lean.IR.DeclInfo","line":395,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo","doc":"Extra information associated with a declaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L391-L392","name":"Lean.IR.mkAlt","line":391,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(usize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ssize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L386-L389","name":"Lean.IR.mmodifyJPs","line":386,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mmodifyJPs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mmodifyJPs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mmodifyJPs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L381-L384","name":"Lean.IR.modifyJPs","line":381,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.modifyJPs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.modifyJPs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">modifyJPs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L378-L379","name":"Lean.IR.reshape","line":378,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.reshape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.reshape\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">reshape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(term : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L370-L376","name":"Lean.IR.reshapeAux","line":370,"kind":"opaque","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.reshapeAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.reshapeAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">reshapeAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L367-L368","name":"Lean.IR.FnBody.flatten","line":367,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.flatten","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.flatten\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">flatten</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L363-L365","name":"Lean.IR.flattenAux","line":363,"kind":"opaque","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.flattenAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.flattenAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">flattenAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L359-L361","name":"Lean.IR.push","line":359,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.push\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L355-L357","name":"Lean.IR.Alt.isDefault","line":355,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.isDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.isDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">isDefault</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L351-L353","name":"Lean.IR.AltCore.mmodifyBody","line":351,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.mmodifyBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.mmodifyBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">mmodifyBody</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">Lean.IR.AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L347-L349","name":"Lean.IR.AltCore.modifyBody","line":347,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.modifyBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.modifyBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">modifyBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">Lean.IR.AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L343-L345","name":"Lean.IR.AltCore.setBody","line":343,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.setBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.setBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">setBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L339-L341","name":"Lean.IR.AltCore.body","line":339,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.body","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.body\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L334-L337","name":"Lean.IR.FnBody.split","line":334,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.split","doc":"If b is a non terminal, then return a pair `(c, b')` s.t. `b == c <;> b'`,\nand c.body == FnBody.nil "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.split\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L329-L330","name":"Lean.IR.FnBody.resetBody","line":329,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.resetBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.resetBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">resetBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L316-L327","name":"Lean.IR.FnBody.setBody","line":316,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">setBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L303-L314","name":"Lean.IR.FnBody.body","line":303,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.body","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.body\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L296-L301","name":"Lean.IR.FnBody.isTerminal","line":296,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.isTerminal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.isTerminal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">isTerminal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L294-L294","name":"Lean.IR.instInhabitedAlt","line":294,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Lean.IR.Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L292-L292","name":"Lean.IR.Alt.default","line":292,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">Lean.IR.AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L291-L291","name":"Lean.IR.Alt.ctor","line":291,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">Lean.IR.AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L290-L290","name":"Lean.IR.Alt","line":290,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L288-L288","name":"Lean.IR.mkUnreachable","line":288,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUnreachable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUnreachable\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkUnreachable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L287-L287","name":"Lean.IR.mkJmp","line":287,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkJmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L286-L286","name":"Lean.IR.mkRet","line":286,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkRet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkRet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkRet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L283-L285","name":"Lean.IR.mkCase","line":283,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkCase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkCase\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tid : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">Lean.IR.AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L282-L282","name":"Lean.IR.mkSSet","line":282,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkSSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkSSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkSSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offset : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L281-L281","name":"Lean.IR.mkUSet","line":281,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkUSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L280-L280","name":"Lean.IR.mkJDecl","line":280,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkJDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkJDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkJDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L279-L279","name":"Lean.IR.mkVDecl","line":279,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkVDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkVDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkVDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L277-L277","name":"Lean.IR.FnBody.nil","line":277,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L275-L275","name":"Lean.IR.instInhabitedFnBody","line":275,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L273-L273","name":"Lean.IR.FnBody.unreachable","line":273,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.unreachable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.unreachable\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">unreachable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L271-L272","name":"Lean.IR.FnBody.jmp","line":271,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jmp","doc":"Jump to join point `j` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jmp\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">jmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L270-L270","name":"Lean.IR.FnBody.ret","line":270,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.ret\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">ret</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L269-L269","name":"Lean.IR.FnBody.case","line":269,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.case\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">case</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tid : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xType : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">Lean.IR.AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L268-L268","name":"Lean.IR.FnBody.mdata","line":268,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.mdata","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.mdata\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">mdata</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.MData\">Lean.IR.MData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L267-L267","name":"Lean.IR.FnBody.del","line":267,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.del","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.del\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">del</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L264-L266","name":"Lean.IR.FnBody.dec","line":264,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.dec","doc":"RC decrement for `object`. If c == `true`, then `inc` must check whether `x` is a tagged pointer or not.\nIf `persistent == true` then `x` is statically known to be a persistent object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.dec\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">dec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(persistent : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L261-L263","name":"Lean.IR.FnBody.inc","line":261,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.inc","doc":"RC increment for `object`. If c == `true`, then `inc` must check whether `x` is a tagged pointer or not.\nIf `persistent == true` then `x` is statically known to be a persistent object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.inc\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">inc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(persistent : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L258-L260","name":"Lean.IR.FnBody.sset","line":258,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.sset","doc":"Store `y : ty` at Position `sizeof(void*)*i + offset` in `x`. `x` must be a Constructor object and `RC(x)` must be 1.\n`ty` must not be `object`, `tobject`, `irrelevant` nor `Usize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.sset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">sset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offset : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L256-L257","name":"Lean.IR.FnBody.uset","line":256,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.uset","doc":"Store `y : Usize` at Position `sizeof(void*)*i` in `x`. `x` must be a Constructor object and `RC(x)` must be 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.uset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">uset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L255-L255","name":"Lean.IR.FnBody.setTag","line":255,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setTag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setTag\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">setTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L252-L254","name":"Lean.IR.FnBody.set","line":252,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.set","doc":"Store `y` at Position `sizeof(void*)*i` in `x`. `x` must be a Constructor object and `RC(x)` must be 1.\nThis operation is not part of λPure is only used during optimization. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.set\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L250-L251","name":"Lean.IR.FnBody.jdecl","line":250,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jdecl","doc":"Join point Declaration `block_j (xs) := e; b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">jdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L248-L249","name":"Lean.IR.FnBody.vdecl","line":248,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.vdecl","doc":"`let x : ty := e; b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.vdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">vdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L247-L273","name":"Lean.IR.FnBody","line":247,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L245-L245","name":"Lean.IR.AltCore.default","line":245,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{FnBody : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">FnBody</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">Lean.IR.AltCore</a> <span class=\"fn\">FnBody</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L244-L244","name":"Lean.IR.AltCore.ctor","line":244,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">ctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{FnBody : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">FnBody</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">Lean.IR.AltCore</a> <span class=\"fn\">FnBody</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L243-L245","name":"Lean.IR.AltCore","line":243,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(FnBody : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L241-L241","name":"Lean.IR.mkParam","line":241,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(borrow : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L238-L238","name":"Lean.IR.instInhabitedParam","line":238,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L237-L237","name":"Lean.IR.Param.ty","line":237,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.ty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.ty\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">ty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L236-L236","name":"Lean.IR.Param.borrow","line":236,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.borrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.borrow\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">borrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L235-L235","name":"Lean.IR.Param.x","line":235,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.x","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.x\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">x</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L234-L238","name":"Lean.IR.Param","line":234,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L232-L232","name":"Lean.IR.mkStrExpr","line":232,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkStrExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkStrExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkStrExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L231-L231","name":"Lean.IR.mkNumExpr","line":231,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkNumExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkNumExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkNumExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L230-L230","name":"Lean.IR.mkAppExpr","line":230,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkAppExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkAppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkAppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L229-L229","name":"Lean.IR.mkPAppExpr","line":229,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkPAppExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkPAppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkPAppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L228-L228","name":"Lean.IR.mkFAppExpr","line":228,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkFAppExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkFAppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkFAppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L227-L227","name":"Lean.IR.mkSProjExpr","line":227,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkSProjExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkSProjExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkSProjExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offset : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L226-L226","name":"Lean.IR.mkUProjExpr","line":226,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUProjExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUProjExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkUProjExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L225-L225","name":"Lean.IR.mkProjExpr","line":225,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkProjExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkProjExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkProjExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L223-L224","name":"Lean.IR.mkCtorExpr","line":223,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkCtorExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkCtorExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkCtorExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(usize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ssize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L220-L221","name":"Lean.IR.Expr.isShared","line":220,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.isShared","doc":"Return `1 : uint8` Iff `RC(x) > 1` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.isShared\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isShared</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L219-L219","name":"Lean.IR.Expr.lit","line":219,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.lit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">Lean.IR.LitVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L217-L218","name":"Lean.IR.Expr.unbox","line":217,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.unbox","doc":"Given `x : [t]object`, obtain the scalar value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.unbox\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">unbox</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L214-L216","name":"Lean.IR.Expr.box","line":214,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.box","doc":"Given `x : ty` where `ty` is a scalar type, this operation returns a value of Type `tobject`.\nFor small scalar values, the Result is a tagged pointer, and no memory allocation is performed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.box\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">box</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L212-L213","name":"Lean.IR.Expr.ap","line":212,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ap","doc":"Application. `x` must be a `pap` value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L210-L211","name":"Lean.IR.Expr.pap","line":210,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.pap","doc":"Partial application that creates a `pap` value (aka closure in our nonstandard terminology). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.pap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">pap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L208-L209","name":"Lean.IR.Expr.fap","line":208,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.fap","doc":"Full application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.fap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">fap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">Lean.IR.FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L206-L207","name":"Lean.IR.Expr.sproj","line":206,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.sproj","doc":"Extract the scalar value at Position `sizeof(void*)*n + offset` from `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.sproj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sproj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offset : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L204-L205","name":"Lean.IR.Expr.uproj","line":204,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.uproj","doc":"Extract the `Usize` value at Position `sizeof(void*)*i` from `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.uproj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">uproj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L201-L203","name":"Lean.IR.Expr.proj","line":201,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.proj","doc":"Extract the `tobject` value at Position `sizeof(void*)*i` from `x`.\nWe also use `proj` for extracting fields from `struct` return values, and casting `union` return values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L199-L200","name":"Lean.IR.Expr.reuse","line":199,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reuse","doc":"`reuse x in ctor_i ys` instruction in the paper. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reuse\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">reuse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(updtHeader : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L198-L198","name":"Lean.IR.Expr.reset","line":198,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">reset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L194-L197","name":"Lean.IR.Expr.ctor","line":194,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ctor","doc":"We use `ctor` mainly for constructing Lean object/tobject values `lean_ctor_object` in the runtime.\nThis instruction is also used to creat `struct` and `union` return values.\nFor `union`, only `i.cidx` is relevant. For `struct`, `i` is irrelevant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L193-L221","name":"Lean.IR.Expr","line":193,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L190-L191","name":"Lean.IR.CtorInfo.isScalar","line":190,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isScalar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isScalar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">isScalar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L187-L188","name":"Lean.IR.CtorInfo.isRef","line":187,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isRef\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">isRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L185-L185","name":"Lean.IR.instBEqCtorInfo","line":185,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqCtorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqCtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqCtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L181-L183","name":"Lean.IR.CtorInfo.beq","line":181,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L179-L179","name":"Lean.IR.instReprCtorInfo","line":179,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprCtorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprCtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprCtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L178-L178","name":"Lean.IR.CtorInfo.ssize","line":178,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.ssize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.ssize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">ssize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L177-L177","name":"Lean.IR.CtorInfo.usize","line":177,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.usize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.usize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">usize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L176-L176","name":"Lean.IR.CtorInfo.size","line":176,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.size\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L175-L175","name":"Lean.IR.CtorInfo.cidx","line":175,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.cidx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.cidx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">cidx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L174-L174","name":"Lean.IR.CtorInfo.name","line":174,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.name\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L173-L179","name":"Lean.IR.CtorInfo","line":173,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo","doc":"Constructor information.\n\n   - `name` is the Name of the Constructor in Lean.\n   - `cidx` is the Constructor index (aka tag).\n   - `size` is the number of arguments of type `object/tobject`.\n   - `usize` is the number of arguments of type `usize`.\n   - `ssize` is the number of bytes used to store scalar values.\n\nRecall that a Constructor object contains a header, then a sequence of\npointers to other Lean objects, a sequence of `USize` (i.e., `size_t`)\nscalar values, and a sequence of other scalar values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L160-L160","name":"Lean.IR.instBEqLitVal","line":160,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqLitVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqLitVal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqLitVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">Lean.IR.LitVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L155-L158","name":"Lean.IR.LitVal.beq","line":155,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">Lean.IR.LitVal</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">Lean.IR.LitVal</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L153-L153","name":"Lean.IR.LitVal.str","line":153,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.str\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">Lean.IR.LitVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L152-L152","name":"Lean.IR.LitVal.num","line":152,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.num","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.num\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">Lean.IR.LitVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L151-L153","name":"Lean.IR.LitVal","line":151,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L149-L149","name":"Lean.IR.mkVarArg","line":149,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkVarArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkVarArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkVarArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L147-L147","name":"Lean.IR.instBEqArg","line":147,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L142-L145","name":"Lean.IR.Arg.beq","line":142,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L140-L140","name":"Lean.IR.instInhabitedArg","line":140,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L139-L139","name":"Lean.IR.Arg.irrelevant","line":139,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.irrelevant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.irrelevant\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">irrelevant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L138-L138","name":"Lean.IR.Arg.var","line":138,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.var\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L137-L140","name":"Lean.IR.Arg","line":137,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg","doc":"Arguments to applications, constructors, etc.\nWe use `irrelevant` for Lean types, propositions and proofs that have been erased.\nRecall that for a Function `f`, we also generate `f._rarg` which does not take\n`irrelevant` arguments. However, `f._rarg` is only safe to be used in full applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L127-L129","name":"Lean.IR.IRType.isUnion","line":127,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isUnion\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isUnion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L123-L125","name":"Lean.IR.IRType.isStruct","line":123,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isStruct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L119-L121","name":"Lean.IR.IRType.isIrrelevant","line":119,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isIrrelevant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isIrrelevant\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isIrrelevant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L114-L117","name":"Lean.IR.IRType.isObj","line":114,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isObj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isObj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L105-L112","name":"Lean.IR.IRType.isScalar","line":105,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isScalar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isScalar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isScalar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L103-L103","name":"Lean.IR.IRType.instBEqIRType","line":103,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.instBEqIRType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.instBEqIRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">instBEqIRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L89-L101","name":"Lean.IR.IRType.beq","line":89,"kind":"opaque","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L85-L85","name":"Lean.IR.instInhabitedIRType","line":85,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIRType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedIRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L84-L84","name":"Lean.IR.IRType.union","line":84,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.union\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(leanTypeName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L83-L83","name":"Lean.IR.IRType.struct","line":83,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.struct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.struct\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">struct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(leanTypeName : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.tobject","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.tobject","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.tobject\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">tobject</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.object","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.object","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.object\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">object</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.irrelevant","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.irrelevant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.irrelevant\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">irrelevant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L81-L81","name":"Lean.IR.IRType.usize","line":81,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.usize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.usize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">usize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L81-L81","name":"Lean.IR.IRType.uint64","line":81,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint64\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L81-L81","name":"Lean.IR.IRType.uint32","line":81,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint32\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L81-L81","name":"Lean.IR.IRType.uint16","line":81,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint16\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L81-L81","name":"Lean.IR.IRType.uint8","line":81,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint8\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L81-L81","name":"Lean.IR.IRType.float","line":81,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">float</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L80-L85","name":"Lean.IR.IRType","line":80,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType","doc":"Low Level IR types. Most are self explanatory.\n\n   - `usize` represents the C++ `size_t` Type. We have it here\n      because it is 32-bit in 32-bit machines, and 64-bit in 64-bit machines,\n      and we want the C++ backend for our Compiler to generate platform independent code.\n\n   - `irrelevant` for Lean types, propositions and proofs.\n\n   - `object` a pointer to a value in the heap.\n\n   - `tobject` a pointer to a value in the heap or tagged pointer\n      (i.e., the least significant bit is 1) storing a scalar value.\n\n   - `struct` and `union` are used to return small values (e.g., `Option`, `Prod`, `Except`)\n      on the stack.\n\nRemark: the RC operations for `tobject` are slightly more expensive because we\nfirst need to test whether the `tobject` is really a pointer or not.\n\nRemark: the Lean runtime assumes that sizeof(void*) == sizeof(sizeT).\nLean cannot be compiled on old platforms where this is not True.\n\nSince values of type `struct` and `union` are only used to return values,\nWe assume they must be used/consumed \"linearly\". We use the term \"linear\" here\nto mean \"exactly once\" in each execution. That is, given `x : S`, where `S` is a struct,\nthen one of the following must hold in each (execution) branch.\n1- `x` occurs only at a single `ret x` instruction. That is, it is being consumed by being returned.\n2- `x` occurs only at a single `ctor`. That is, it is being \"consumed\" by being stored into another `struct/union`.\n3- We extract (aka project) every single field of `x` exactly once. That is, we are consuming `x` by consuming each\n   of one of its components. Minor refinement: we don't need to consume scalar fields or struct/union\n   fields that do not contain object fields.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L46-L46","name":"Lean.IR.MData.empty","line":46,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.MData.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.MData.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MData</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.MData\">Lean.IR.MData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L45-L45","name":"Lean.IR.MData","line":45,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.MData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.MData\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L43-L43","name":"Lean.IR.instHashableJoinPointId","line":43,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instHashableJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L42-L42","name":"Lean.IR.instToFormatJoinPointId","line":42,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToFormatJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToFormatJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToFormatJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L41-L41","name":"Lean.IR.instToStringJoinPointId","line":41,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToStringJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L40-L40","name":"Lean.IR.instBEqJoinPointId","line":40,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L38-L38","name":"Lean.IR.instHashableVarId","line":38,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instHashableVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L37-L37","name":"Lean.IR.instToFormatVarId","line":37,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToFormatVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToFormatVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToFormatVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L36-L36","name":"Lean.IR.instToStringVarId","line":36,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToStringVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L35-L35","name":"Lean.IR.instBEqVarId","line":35,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L33-L33","name":"Lean.IR.Index.lt","line":33,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Index.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Index</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L31-L31","name":"Lean.IR.instInhabitedJoinPointId","line":31,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L30-L30","name":"Lean.IR.JoinPointId.idx","line":30,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L29-L31","name":"Lean.IR.JoinPointId","line":29,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId","doc":"Join point identifier "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L26-L26","name":"Lean.IR.instInhabitedVarId","line":26,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L25-L25","name":"Lean.IR.VarId.idx","line":25,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L24-L26","name":"Lean.IR.VarId","line":24,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId","doc":"Variable identifier "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L22-L22","name":"Lean.IR.Index","line":22,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Index","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Index</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L21-L21","name":"Lean.IR.FunId","line":21,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId","doc":"Function identifier "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FunId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L1-L1","name":"Lean.IR.VarId.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L1-L1","name":"Lean.IR.CtorInfo.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(usize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ssize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">Lean.IR.CtorInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L1-L1","name":"Lean.IR.DeclInfo.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(sorryDep? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">Lean.IR.DeclInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L1-L1","name":"Lean.IR.Param.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(borrow : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">Lean.IR.IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/Basic.lean#L1-L1","name":"Lean.IR.JoinPointId.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a></div></div>"}]}