{"name":"Init.Data.Format.Basic","instances":[{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instInhabitedFlattenBehavior","className":"Inhabited"},{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instBEqFlattenBehavior","className":"BEq"},{"typeNames":["Std.Format"],"name":"Std.instInhabitedFormat","className":"Inhabited"},{"typeNames":["Std.Format"],"name":"Std.Format.instAppendFormat","className":"Append"},{"typeNames":["String","Std.Format"],"name":"Std.Format.instCoeStringFormat","className":"Coe"},{"typeNames":["_private.Init.Data.Format.Basic.0.Std.Format.SpaceResult"],"name":"Std.Format.instInhabitedSpaceResult","className":"Inhabited"},{"typeNames":["StateM","_private.Init.Data.Format.Basic.0.Std.Format.State"],"name":"Std.Format.instMonadPrettyFormatStateMState","className":"Std.Format.MonadPrettyFormat"},{"typeNames":["Std.Format"],"name":"Std.instToFormatFormat","className":"Std.ToFormat"},{"typeNames":["String"],"name":"Std.instToFormatString","className":"Std.ToFormat"}],"imports":["Init.Control.State","Init.Data.Int.Basic","Init.Data.String.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L337-L339","name":"Std.Format.joinSuffix","line":337,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSuffix","doc":"Format each item in `items` and append `suffix`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.joinSuffix\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">joinSuffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L332-L334","name":"Std.Format.prefixJoin","line":332,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.prefixJoin","doc":"Format each item in `items` and prepend prefix `pre`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.prefixJoin\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">prefixJoin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L326-L329","name":"Std.Format.joinSep","line":326,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSep","doc":"Intersperse the given list (each item printed with `format`) with the given `sep` format. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.joinSep\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">joinSep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L322-L323","name":"Std.instToFormatString","line":322,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instToFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">instToFormatString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L319-L320","name":"Std.instToFormatFormat","line":319,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instToFormatFormat\"><span class=\"name\">Std</span>.<span class=\"name\">instToFormatFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L314-L314","name":"Std.ToFormat.format","line":314,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat.format\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span>.<span class=\"name\">format</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L313-L313","name":"Std.ToFormat.mk","line":313,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(format : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L313-L314","name":"Std.ToFormat","line":313,"kind":"class","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat","doc":"Class for converting a given type α to a `Format` object for pretty-printing.\nSee also `Repr`, which also outputs a `Format` object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L305-L307","name":"Std.Format.pretty","line":305,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.pretty","doc":"Pretty-print a `Format` object as a string with expected width `w`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.pretty\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">pretty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\">Std.Format.defWidth</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L295-L301","name":"Std.Format.instMonadPrettyFormatStateMState","line":295,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instMonadPrettyFormatStateMState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instMonadPrettyFormatStateMState\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instMonadPrettyFormatStateMState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> (<span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <a href=\"./Init/Data/Format/Basic.html#_private.Init.Data.Format.Basic.0.Std.Format.State\">Std.Format.State</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L287-L288","name":"Std.Format.indentD","line":287,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.indentD","doc":"Insert a newline and then `f`, all nested by the default indent amount. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.indentD\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">indentD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L283-L284","name":"Std.Format.nestD","line":283,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.nestD","doc":"Nest with the default indentation amount."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nestD\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nestD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L280-L280","name":"Std.Format.defWidth","line":280,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defWidth","doc":"Default width of the targeted output pane. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L278-L278","name":"Std.Format.defUnicode","line":278,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defUnicode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defUnicode\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defUnicode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L277-L277","name":"Std.Format.defIndent","line":277,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defIndent","doc":"Default indentation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defIndent\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defIndent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L273-L274","name":"Std.Format.bracketFill","line":273,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracketFill","doc":"Same as `bracket` except uses the `fill` flattening behaviour. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.bracketFill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">bracketFill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L269-L270","name":"Std.Format.sbracket","line":269,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.sbracket","doc":"Creates the format `\"[\" ++ f ++ \"]\"` with a flattening group."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.sbracket\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">sbracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L265-L266","name":"Std.Format.paren","line":265,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.paren","doc":"Creates the format `\"(\" ++ f ++ \")\"` with a flattening group."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.paren\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L261-L262","name":"Std.Format.bracket","line":261,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracket","doc":"Create a format `l ++ f ++ r` with a flatten group.\nFlattenBehaviour is `allOrNone`; for `fill` use `bracketFill`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.bracket\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L256-L257","name":"Std.Format.prettyM","line":256,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.prettyM","doc":"Render the given `f : Format` with a line width of `w`.\n`indent` is the starting amount to indent each line by. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.prettyM\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">prettyM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indent : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L164-L164","name":"Std.Format.MonadPrettyFormat.endTags","line":164,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags","doc":"Exit the scope of `n`-many opened tags. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">endTags</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L162-L162","name":"Std.Format.MonadPrettyFormat.startTag","line":162,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag","doc":"Start a scope tagged with `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">startTag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L160-L160","name":"Std.Format.MonadPrettyFormat.currColumn","line":160,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">currColumn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L159-L159","name":"Std.Format.MonadPrettyFormat.pushNewline","line":159,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">pushNewline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(indent : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L158-L158","name":"Std.Format.MonadPrettyFormat.pushOutput","line":158,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">pushOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L157-L157","name":"Std.Format.MonadPrettyFormat.mk","line":157,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pushOutput : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pushNewline : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(currColumn : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(startTag : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(endTags : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">Std.Format.MonadPrettyFormat</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L157-L164","name":"Std.Format.MonadPrettyFormat","line":157,"kind":"class","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat","doc":"A monad in which we can pretty-print `Format` objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L111-L111","name":"Std.Format.instInhabitedSpaceResult","line":111,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedSpaceResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instInhabitedSpaceResult\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instInhabitedSpaceResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#_private.Init.Data.Format.Basic.0.Std.Format.SpaceResult\">Std.Format.SpaceResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L103-L105","name":"Std.Format.isNil","line":103,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.isNil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.isNil\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">isNil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L100-L101","name":"Std.Format.join","line":100,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.join\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L98-L98","name":"Std.Format.instCoeStringFormat","line":98,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instCoeStringFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instCoeStringFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instCoeStringFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L97-L97","name":"Std.Format.instAppendFormat","line":97,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instAppendFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instAppendFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instAppendFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L94-L95","name":"Std.Format.fill","line":94,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.fill","doc":"Alias for a group with `FlattenBehavior` set to `fill`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.fill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L83-L91","name":"Std.Format.isEmpty","line":83,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.isEmpty","doc":"Check whether the given format contains no characters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L78-L78","name":"Std.instInhabitedFormat","line":78,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instInhabitedFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instInhabitedFormat\"><span class=\"name\">Std</span>.<span class=\"name\">instInhabitedFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L76-L77","name":"Std.Format.tag","line":76,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.tag","doc":"Used for associating auxiliary information (e.g. `Expr`s) with `Format` objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.tag\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">tag</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L74-L75","name":"Std.Format.group","line":74,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.group","doc":"Creates a new flattening group for the given inner format.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.group\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">Std.Format.FlattenBehavior</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone\">Std.Format.FlattenBehavior.allOrNone</a></span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L72-L73","name":"Std.Format.append","line":72,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.append","doc":"Concatenation of two Formats. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.append\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L59-L71","name":"Std.Format.nest","line":59,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.nest","doc":"`nest n f` tells the formatter that `f` is nested inside something with length `n`\nso that it is pretty-printed with the correct indentation on a line break.\nFor example, we can define a formatter for list `l : List Format` as:\n\n```\nlet f := join <| l.intersperse <| \", \" ++ Format.line\ngroup (nest 1 <| \"[\" ++ f ++ \"]\")\n```\n\nThis will be written all on one line, but if the text is too large,\nthe formatter will put in linebreaks after the commas and indent later lines by 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nest\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(indent : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L57-L58","name":"Std.Format.text","line":57,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.text","doc":"A node containing a plain string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.text\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">text</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L44-L56","name":"Std.Format.align","line":44,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.align","doc":"`align` tells the formatter to pad with spaces to the current indent,\nor else add a newline if we are already at or past the indent. For example:\n```\nnest 2 <| \".\" ++ align ++ \"a\" ++ line ++ \"b\"\n```\nresults in:\n```\n. a\n  b\n```\nIf `force` is true, then it will pad to the indent even if it is in a flattened group.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.align\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">align</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(force : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L41-L43","name":"Std.Format.line","line":41,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.line","doc":"A position where a newline may be inserted\nif the current group does not fit within the allotted column width. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.line\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">line</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L39-L40","name":"Std.Format.nil","line":39,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.nil","doc":"The empty format. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nil\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L38-L78","name":"Std.Format","line":38,"kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format","doc":"A string with pretty-printing information for rendering in a column-width-aware way.\n\nThe pretty-printing algorithm is based on Wadler's paper\n[_A Prettier Printer_](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L31-L31","name":"Std.Format.instBEqFlattenBehavior","line":31,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instBEqFlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">Std.Format.FlattenBehavior</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L31-L31","name":"Std.Format.instInhabitedFlattenBehavior","line":31,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instInhabitedFlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">Std.Format.FlattenBehavior</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L30-L30","name":"Std.Format.FlattenBehavior.fill","line":30,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">Std.Format.FlattenBehavior</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L29-L29","name":"Std.Format.FlattenBehavior.allOrNone","line":29,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span>.<span class=\"name\">allOrNone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">Std.Format.FlattenBehavior</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Format/Basic.lean#L28-L31","name":"Std.Format.FlattenBehavior","line":28,"kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior","doc":"Determines how groups should have linebreaks inserted when the\ntext would overfill its remaining space.\n\n- `allOrNone` will make a linebreak on every `Format.line` in the group or none of them.\n  ```\n  [1,\n   2,\n   3]\n  ```\n- `fill` will only make linebreaks on as few `Format.line`s as possible:\n  ```\n  [1, 2,\n   3]\n  ```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}