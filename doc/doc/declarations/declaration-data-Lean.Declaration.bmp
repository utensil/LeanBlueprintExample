{"name":"Lean.Declaration","instances":[{"typeNames":["Lean.ReducibilityHints"],"name":"Lean.instInhabitedReducibilityHints","className":"Inhabited"},{"typeNames":["Lean.ConstantVal"],"name":"Lean.instInhabitedConstantVal","className":"Inhabited"},{"typeNames":["Lean.AxiomVal"],"name":"Lean.instInhabitedAxiomVal","className":"Inhabited"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instInhabitedDefinitionSafety","className":"Inhabited"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instBEqDefinitionSafety","className":"BEq"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instReprDefinitionSafety","className":"Repr"},{"typeNames":["Lean.DefinitionVal"],"name":"Lean.instInhabitedDefinitionVal","className":"Inhabited"},{"typeNames":["Lean.TheoremVal"],"name":"Lean.instInhabitedTheoremVal","className":"Inhabited"},{"typeNames":["Lean.OpaqueVal"],"name":"Lean.instInhabitedOpaqueVal","className":"Inhabited"},{"typeNames":["Lean.Constructor"],"name":"Lean.instInhabitedConstructor","className":"Inhabited"},{"typeNames":["Lean.InductiveType"],"name":"Lean.instInhabitedInductiveType","className":"Inhabited"},{"typeNames":["Lean.Declaration"],"name":"Lean.instInhabitedDeclaration","className":"Inhabited"},{"typeNames":["Lean.InductiveVal"],"name":"Lean.instInhabitedInductiveVal","className":"Inhabited"},{"typeNames":["Lean.ConstructorVal"],"name":"Lean.instInhabitedConstructorVal","className":"Inhabited"},{"typeNames":["Lean.RecursorRule"],"name":"Lean.instInhabitedRecursorRule","className":"Inhabited"},{"typeNames":["Lean.RecursorVal"],"name":"Lean.instInhabitedRecursorVal","className":"Inhabited"},{"typeNames":["Lean.QuotKind"],"name":"Lean.instInhabitedQuotKind","className":"Inhabited"},{"typeNames":["Lean.QuotVal"],"name":"Lean.instInhabitedQuotVal","className":"Inhabited"},{"typeNames":["Lean.ConstantInfo"],"name":"Lean.instInhabitedConstantInfo","className":"Inhabited"}],"imports":["Init","Lean.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L456-L457","name":"Lean.mkRecName","line":456,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkRecName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkRecName\"><span class=\"name\">Lean</span>.<span class=\"name\">mkRecName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L447-L452","name":"Lean.ConstantInfo.all","line":447,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.all","doc":"List of all (including this one) declarations in the same mutual block.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.all\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L440-L442","name":"Lean.ConstantInfo.isInductive","line":440,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isInductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.isInductive\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">isInductive</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L436-L438","name":"Lean.ConstantInfo.isCtor","line":436,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isCtor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.isCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">isCtor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L432-L434","name":"Lean.ConstantInfo.hints","line":432,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.hints","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.hints\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">hints</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L427-L430","name":"Lean.ConstantInfo.value!","line":427,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.value!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.value!\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">value!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L422-L425","name":"Lean.ConstantInfo.hasValue","line":422,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.hasValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.hasValue\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">hasValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L417-L420","name":"Lean.ConstantInfo.value?","line":417,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.value?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.value?\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">value?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L414-L415","name":"Lean.ConstantInfo.type","line":414,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.type\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L411-L412","name":"Lean.ConstantInfo.numLevelParams","line":411,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.numLevelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.numLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">numLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L408-L409","name":"Lean.ConstantInfo.levelParams","line":408,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.levelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.levelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">levelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L405-L406","name":"Lean.ConstantInfo.name","line":405,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.name\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L401-L403","name":"Lean.ConstantInfo.isPartial","line":401,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isPartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.isPartial\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">isPartial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L391-L399","name":"Lean.ConstantInfo.isUnsafe","line":391,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.isUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">isUnsafe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L381-L389","name":"Lean.ConstantInfo.toConstantVal","line":381,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.toConstantVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.toConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">toConstantVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L377-L377","name":"Lean.instInhabitedConstantInfo","line":377,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstantInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedConstantInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedConstantInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L376-L376","name":"Lean.ConstantInfo.recInfo","line":376,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.recInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.recInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">recInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L375-L375","name":"Lean.ConstantInfo.ctorInfo","line":375,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.ctorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.ctorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">ctorInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L374-L374","name":"Lean.ConstantInfo.inductInfo","line":374,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.inductInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.inductInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">inductInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L373-L373","name":"Lean.ConstantInfo.quotInfo","line":373,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.quotInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.quotInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">quotInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.QuotVal\">Lean.QuotVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L372-L372","name":"Lean.ConstantInfo.opaqueInfo","line":372,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.opaqueInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.opaqueInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">opaqueInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L371-L371","name":"Lean.ConstantInfo.thmInfo","line":371,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.thmInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.thmInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">thmInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.TheoremVal\">Lean.TheoremVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L370-L370","name":"Lean.ConstantInfo.defnInfo","line":370,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.defnInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.defnInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">defnInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L369-L369","name":"Lean.ConstantInfo.axiomInfo","line":369,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.axiomInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo.axiomInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">axiomInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.AxiomVal\">Lean.AxiomVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L368-L377","name":"Lean.ConstantInfo","line":368,"kind":"inductive","docLink":"./Lean/Declaration.html#Lean.ConstantInfo","doc":"Information associated with constant declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L365-L365","name":"Lean.QuotVal.kindEx","line":365,"kind":"def","docLink":"./Lean/Declaration.html#Lean.QuotVal.kindEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotVal.kindEx\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotVal</span>.<span class=\"name\">kindEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.QuotVal\">Lean.QuotVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L361-L363","name":"Lean.mkQuotValEx","line":361,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkQuotValEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkQuotValEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkQuotValEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.QuotVal\">Lean.QuotVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L358-L358","name":"Lean.instInhabitedQuotVal","line":358,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedQuotVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedQuotVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedQuotVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.QuotVal\">Lean.QuotVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L357-L357","name":"Lean.QuotVal.kind","line":357,"kind":"def","docLink":"./Lean/Declaration.html#Lean.QuotVal.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotVal.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotVal</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.QuotVal\">Lean.QuotVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L356-L358","name":"Lean.QuotVal","line":356,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.QuotVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotVal\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotVal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L354-L354","name":"Lean.instInhabitedQuotKind","line":354,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedQuotKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedQuotKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedQuotKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L353-L353","name":"Lean.QuotKind.ind","line":353,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotKind.ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotKind.ind\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotKind</span>.<span class=\"name\">ind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L352-L352","name":"Lean.QuotKind.lift","line":352,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotKind.lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotKind.lift\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotKind</span>.<span class=\"name\">lift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L351-L351","name":"Lean.QuotKind.ctor","line":351,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotKind.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotKind.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotKind</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L350-L350","name":"Lean.QuotKind.type","line":350,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotKind.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotKind.type\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotKind</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L349-L354","name":"Lean.QuotKind","line":349,"kind":"inductive","docLink":"./Lean/Declaration.html#Lean.QuotKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotKind\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L346-L347","name":"Lean.RecursorVal.getInduct","line":346,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getInduct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.getInduct\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">getInduct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L343-L344","name":"Lean.RecursorVal.getFirstMinorIdx","line":343,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getFirstMinorIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.getFirstMinorIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">getFirstMinorIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L340-L341","name":"Lean.RecursorVal.getFirstIndexIdx","line":340,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getFirstIndexIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.getFirstIndexIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">getFirstIndexIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L337-L338","name":"Lean.RecursorVal.getMajorIdx","line":337,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getMajorIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.getMajorIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">getMajorIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L335-L335","name":"Lean.RecursorVal.isUnsafeEx","line":335,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.isUnsafeEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.isUnsafeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">isUnsafeEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L334-L334","name":"Lean.RecursorVal.kEx","line":334,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.kEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.kEx\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">kEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L328-L332","name":"Lean.mkRecursorValEx","line":328,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkRecursorValEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkRecursorValEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkRecursorValEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numIndices : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numMotives : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numMinors : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rules : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.RecursorRule\">Lean.RecursorRule</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L325-L325","name":"Lean.instInhabitedRecursorVal","line":325,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedRecursorVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedRecursorVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedRecursorVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L324-L324","name":"Lean.RecursorVal.isUnsafe","line":324,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.isUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.isUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">isUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L323-L323","name":"Lean.RecursorVal.k","line":323,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.k","doc":"It supports K-like reduction.\nA recursor is said to support K-like reduction if one can assume it behaves\nlike `Eq` under axiom `K` --- that is, it has one constructor, the constructor has 0 arguments,\nand it is an inductive predicate (ie, it lives in Prop).\n\nExamples of inductives with K-like reduction is `Eq`, `Acc`, and `And.intro`.\nNon-examples are `exists` (where the constructor has arguments) and\n  `Or.intro` (which has multiple constructors).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.k\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L313-L313","name":"Lean.RecursorVal.rules","line":313,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.rules","doc":"A reduction for each Constructor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.rules\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">rules</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.RecursorRule\">Lean.RecursorRule</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L311-L311","name":"Lean.RecursorVal.numMinors","line":311,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.numMinors","doc":"Number of minor premises "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.numMinors\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">numMinors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L309-L309","name":"Lean.RecursorVal.numMotives","line":309,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.numMotives","doc":"Number of motives "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.numMotives\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">numMotives</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L307-L307","name":"Lean.RecursorVal.numIndices","line":307,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.numIndices","doc":"Number of indices "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.numIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">numIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L305-L305","name":"Lean.RecursorVal.numParams","line":305,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.numParams","doc":"Number of parameters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.numParams\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">numParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L303-L303","name":"Lean.RecursorVal.all","line":303,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.all","doc":"List of all inductive datatypes in the mutual declaration that generated this recursor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.all\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L301-L325","name":"Lean.RecursorVal","line":301,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.RecursorVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L299-L299","name":"Lean.instInhabitedRecursorRule","line":299,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedRecursorRule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedRecursorRule\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedRecursorRule</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.RecursorRule\">Lean.RecursorRule</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L298-L298","name":"Lean.RecursorRule.rhs","line":298,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorRule.rhs","doc":"Right hand side of the reduction rule "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorRule.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorRule</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorRule\">Lean.RecursorRule</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L296-L296","name":"Lean.RecursorRule.nfields","line":296,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorRule.nfields","doc":"Number of fields (i.e., without counting inductive datatype parameters) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorRule.nfields\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorRule</span>.<span class=\"name\">nfields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorRule\">Lean.RecursorRule</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L294-L294","name":"Lean.RecursorRule.ctor","line":294,"kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorRule.ctor","doc":"Reduction rule for this Constructor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorRule.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorRule</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.RecursorRule\">Lean.RecursorRule</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L292-L299","name":"Lean.RecursorRule","line":292,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.RecursorRule","doc":"Information for reducing a recursor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorRule\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorRule</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L289-L289","name":"Lean.ConstructorVal.isUnsafeEx","line":289,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.isUnsafeEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstructorVal.isUnsafeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstructorVal</span>.<span class=\"name\">isUnsafeEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L278-L287","name":"Lean.mkConstructorValEx","line":278,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkConstructorValEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkConstructorValEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkConstructorValEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(induct : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numFields : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L275-L275","name":"Lean.instInhabitedConstructorVal","line":275,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstructorVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedConstructorVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedConstructorVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L274-L274","name":"Lean.ConstructorVal.isUnsafe","line":274,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.isUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstructorVal.isUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstructorVal</span>.<span class=\"name\">isUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L273-L273","name":"Lean.ConstructorVal.numFields","line":273,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.numFields","doc":"Number of fields (i.e., arity - nparams) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstructorVal.numFields\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstructorVal</span>.<span class=\"name\">numFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L271-L271","name":"Lean.ConstructorVal.numParams","line":271,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.numParams","doc":"Number of parameters in inductive datatype. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstructorVal.numParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstructorVal</span>.<span class=\"name\">numParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L269-L269","name":"Lean.ConstructorVal.cidx","line":269,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.cidx","doc":"Constructor index (i.e., Position in the inductive declaration) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstructorVal.cidx\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstructorVal</span>.<span class=\"name\">cidx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L267-L267","name":"Lean.ConstructorVal.induct","line":267,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.induct","doc":"Inductive type this constructor is a member of "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstructorVal.induct\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstructorVal</span>.<span class=\"name\">induct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L265-L275","name":"Lean.ConstructorVal","line":265,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.ConstructorVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstructorVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstructorVal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L263-L263","name":"Lean.InductiveVal.numCtors","line":263,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.numCtors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.numCtors\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">numCtors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L261-L261","name":"Lean.InductiveVal.isNestedEx","line":261,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isNestedEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.isNestedEx\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">isNestedEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L260-L260","name":"Lean.InductiveVal.isReflexiveEx","line":260,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isReflexiveEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.isReflexiveEx\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">isReflexiveEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L259-L259","name":"Lean.InductiveVal.isUnsafeEx","line":259,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isUnsafeEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.isUnsafeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">isUnsafeEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L258-L258","name":"Lean.InductiveVal.isRecEx","line":258,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isRecEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.isRecEx\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">isRecEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L243-L256","name":"Lean.mkInductiveValEx","line":243,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkInductiveValEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkInductiveValEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkInductiveValEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numIndices : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctors : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isRec : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isReflexive : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isNested : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L240-L240","name":"Lean.instInhabitedInductiveVal","line":240,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedInductiveVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedInductiveVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedInductiveVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L239-L239","name":"Lean.InductiveVal.isNested","line":239,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isNested","doc":"An inductive definition `T` is nested when there is a constructor with an argument `x : F T`,\nwhere `F : Type → Type` is some suitably behaved (ie strictly positive) function (Eg `Array T`, `List T`, `T × T`, ...). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.isNested\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">isNested</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L236-L236","name":"Lean.InductiveVal.isReflexive","line":236,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isReflexive","doc":"An inductive type is called reflexive if it has at least one constructor that takes as an argument a function returning the\nsame type we are defining.\nConsider the type:\n```\ninductive WideTree where\n| branch: (Nat -> WideTree) -> WideTree\n| leaf: WideTree\n```\nthis is reflexive due to the presence of the `branch : (Nat -> WideTree) -> WideTree` constructor.\n\nSee also: 'Inductive Definitions in the system Coq Rules and Properties' by Christine Paulin-Mohring\nSection 2.2, Definition 3\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.isReflexive\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">isReflexive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L222-L222","name":"Lean.InductiveVal.isUnsafe","line":222,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isUnsafe","doc":"Whether the definition is flagged as unsafe. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.isUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">isUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L220-L220","name":"Lean.InductiveVal.isRec","line":220,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isRec","doc":"`true` when recursive (that is, the inductive type appears as an argument in a constructor). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.isRec\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">isRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L218-L218","name":"Lean.InductiveVal.ctors","line":218,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.ctors","doc":"List of the names of the constructors for this inductive datatype. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.ctors\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">ctors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L216-L216","name":"Lean.InductiveVal.all","line":216,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.all","doc":"List of all (including this one) inductive datatypes in the mutual declaration containing this one "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.all\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L214-L214","name":"Lean.InductiveVal.numIndices","line":214,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.numIndices","doc":"Number of indices. An index is an argument that varies over constructors.\n\nAn example of this is the `n : Nat` argument in the vector constructor `cons : α → Vector α n → Vector α (n+1)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.numIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">numIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L209-L209","name":"Lean.InductiveVal.numParams","line":209,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.numParams","doc":"Number of parameters. A parameter is an argument to the defined type that is fixed over constructors.\nAn example of this is the `α : Type` argument in the vector constructors\n`nil : Vector α 0` and `cons : α → Vector α n → Vector α (n+1)`.\n\nThe intuition is that the inductive type must exhibit _parametric polymorphism_ over the inductive\nparameter, as opposed to _ad-hoc polymorphism_.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.numParams\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">numParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L201-L240","name":"Lean.InductiveVal","line":201,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.InductiveVal","doc":"The kernel compiles (mutual) inductive declarations (see `inductiveDecls`) into a set of\n- `Declaration.inductDecl` (for each inductive datatype in the mutual Declaration),\n- `Declaration.ctorDecl` (for each Constructor in the mutual Declaration),\n- `Declaration.recDecl` (automatically generated recursors).\n\nThis data is used to implement iota-reduction efficiently and compile nested inductive\ndeclarations.\n\nA series of checks are performed by the kernel to check whether a `inductiveDecls`\nis valid or not. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L188-L189","name":"Lean.Declaration.forExprM","line":188,"kind":"def","docLink":"./Lean/Declaration.html#Lean.Declaration.forExprM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.forExprM\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">forExprM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L173-L186","name":"Lean.Declaration.foldExprM","line":173,"kind":"def","docLink":"./Lean/Declaration.html#Lean.Declaration.foldExprM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.foldExprM\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">foldExprM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L169-L171","name":"Lean.Declaration.isUnsafeInductiveDeclEx","line":169,"kind":"def","docLink":"./Lean/Declaration.html#Lean.Declaration.isUnsafeInductiveDeclEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.isUnsafeInductiveDeclEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">isUnsafeInductiveDeclEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L165-L166","name":"Lean.mkInductiveDeclEs","line":165,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkInductiveDeclEs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkInductiveDeclEs\"><span class=\"name\">Lean</span>.<span class=\"name\">mkInductiveDeclEs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lparams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nparams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.InductiveType\">Lean.InductiveType</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L162-L162","name":"Lean.instInhabitedDeclaration","line":162,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedDeclaration","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedDeclaration\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedDeclaration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L161-L161","name":"Lean.Declaration.inductDecl","line":161,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.inductDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.inductDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">inductDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lparams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nparams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(types : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.InductiveType\">Lean.InductiveType</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L160-L160","name":"Lean.Declaration.mutualDefnDecl","line":160,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.mutualDefnDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.mutualDefnDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">mutualDefnDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(defns : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L159-L159","name":"Lean.Declaration.quotDecl","line":159,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.quotDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.quotDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">quotDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L158-L158","name":"Lean.Declaration.opaqueDecl","line":158,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.opaqueDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.opaqueDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">opaqueDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L157-L157","name":"Lean.Declaration.thmDecl","line":157,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.thmDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.thmDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">thmDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.TheoremVal\">Lean.TheoremVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L156-L156","name":"Lean.Declaration.defnDecl","line":156,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.defnDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.defnDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">defnDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L155-L155","name":"Lean.Declaration.axiomDecl","line":155,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.axiomDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration.axiomDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span>.<span class=\"name\">axiomDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Declaration.html#Lean.AxiomVal\">Lean.AxiomVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L154-L162","name":"Lean.Declaration","line":154,"kind":"inductive","docLink":"./Lean/Declaration.html#Lean.Declaration","doc":"Declaration object that can be sent to the kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Declaration\"><span class=\"name\">Lean</span>.<span class=\"name\">Declaration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L151-L151","name":"Lean.instInhabitedInductiveType","line":151,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedInductiveType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedInductiveType\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedInductiveType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.InductiveType\">Lean.InductiveType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L150-L150","name":"Lean.InductiveType.ctors","line":150,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveType.ctors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveType.ctors\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveType</span>.<span class=\"name\">ctors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveType\">Lean.InductiveType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.Constructor\">Lean.Constructor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L149-L149","name":"Lean.InductiveType.type","line":149,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveType.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveType.type\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveType</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveType\">Lean.InductiveType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L148-L148","name":"Lean.InductiveType.name","line":148,"kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveType.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveType.name\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveType</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.InductiveType\">Lean.InductiveType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L147-L151","name":"Lean.InductiveType","line":147,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.InductiveType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveType\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L145-L145","name":"Lean.instInhabitedConstructor","line":145,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstructor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedConstructor\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedConstructor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.Constructor\">Lean.Constructor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L144-L144","name":"Lean.Constructor.type","line":144,"kind":"def","docLink":"./Lean/Declaration.html#Lean.Constructor.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Constructor.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Constructor</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.Constructor\">Lean.Constructor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L143-L143","name":"Lean.Constructor.name","line":143,"kind":"def","docLink":"./Lean/Declaration.html#Lean.Constructor.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Constructor.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Constructor</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.Constructor\">Lean.Constructor</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L142-L145","name":"Lean.Constructor","line":142,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.Constructor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Constructor\"><span class=\"name\">Lean</span>.<span class=\"name\">Constructor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L139-L140","name":"Lean.OpaqueVal.isUnsafeEx","line":139,"kind":"def","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.isUnsafeEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.OpaqueVal.isUnsafeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">OpaqueVal</span>.<span class=\"name\">isUnsafeEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L135-L137","name":"Lean.mkOpaqueValEx","line":135,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkOpaqueValEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkOpaqueValEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkOpaqueValEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L132-L132","name":"Lean.instInhabitedOpaqueVal","line":132,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedOpaqueVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedOpaqueVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedOpaqueVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L131-L131","name":"Lean.OpaqueVal.all","line":131,"kind":"def","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.all","doc":"List of all (including this one) declarations in the same mutual block.\nSee comment at `DefinitionVal.all`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.OpaqueVal.all\"><span class=\"name\">Lean</span>.<span class=\"name\">OpaqueVal</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L127-L127","name":"Lean.OpaqueVal.isUnsafe","line":127,"kind":"def","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.isUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.OpaqueVal.isUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">OpaqueVal</span>.<span class=\"name\">isUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L126-L126","name":"Lean.OpaqueVal.value","line":126,"kind":"def","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.OpaqueVal.value\"><span class=\"name\">Lean</span>.<span class=\"name\">OpaqueVal</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L125-L132","name":"Lean.OpaqueVal","line":125,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.OpaqueVal","doc":"Value for an opaque constant declaration `opaque x : t := e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.OpaqueVal\"><span class=\"name\">Lean</span>.<span class=\"name\">OpaqueVal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L122-L122","name":"Lean.instInhabitedTheoremVal","line":122,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedTheoremVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedTheoremVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedTheoremVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.TheoremVal\">Lean.TheoremVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L121-L121","name":"Lean.TheoremVal.all","line":121,"kind":"def","docLink":"./Lean/Declaration.html#Lean.TheoremVal.all","doc":"List of all (including this one) declarations in the same mutual block.\nSee comment at `DefinitionVal.all`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.TheoremVal.all\"><span class=\"name\">Lean</span>.<span class=\"name\">TheoremVal</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.TheoremVal\">Lean.TheoremVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L117-L117","name":"Lean.TheoremVal.value","line":117,"kind":"def","docLink":"./Lean/Declaration.html#Lean.TheoremVal.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.TheoremVal.value\"><span class=\"name\">Lean</span>.<span class=\"name\">TheoremVal</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.TheoremVal\">Lean.TheoremVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L116-L122","name":"Lean.TheoremVal","line":116,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.TheoremVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.TheoremVal\"><span class=\"name\">Lean</span>.<span class=\"name\">TheoremVal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L113-L114","name":"Lean.DefinitionVal.getSafetyEx","line":113,"kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.getSafetyEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionVal.getSafetyEx\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionVal</span>.<span class=\"name\">getSafetyEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L109-L111","name":"Lean.mkDefinitionValEx","line":109,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkDefinitionValEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkDefinitionValEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkDefinitionValEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hints : <a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(safety : <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L106-L106","name":"Lean.instInhabitedDefinitionVal","line":106,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedDefinitionVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedDefinitionVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedDefinitionVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L105-L105","name":"Lean.DefinitionVal.all","line":105,"kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.all","doc":"List of all (including this one) declarations in the same mutual block.\nNote that this information is not used by the kernel, and is only used\nto save the information provided by the user when using mutual blocks.\nRecall that the Lean kernel does not support recursive definitions and they\nare compiled using recursors and `WellFounded.fix`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionVal.all\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionVal</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L97-L97","name":"Lean.DefinitionVal.safety","line":97,"kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.safety","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionVal.safety\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionVal</span>.<span class=\"name\">safety</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L96-L96","name":"Lean.DefinitionVal.hints","line":96,"kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.hints","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionVal.hints\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionVal</span>.<span class=\"name\">hints</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L95-L95","name":"Lean.DefinitionVal.value","line":95,"kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionVal.value\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionVal</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L94-L106","name":"Lean.DefinitionVal","line":94,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.DefinitionVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionVal\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionVal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L92-L92","name":"Lean.instReprDefinitionSafety","line":92,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instReprDefinitionSafety","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instReprDefinitionSafety\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprDefinitionSafety</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L92-L92","name":"Lean.instBEqDefinitionSafety","line":92,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instBEqDefinitionSafety","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instBEqDefinitionSafety\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqDefinitionSafety</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L92-L92","name":"Lean.instInhabitedDefinitionSafety","line":92,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedDefinitionSafety","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedDefinitionSafety\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedDefinitionSafety</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L91-L91","name":"Lean.DefinitionSafety.partial","line":91,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety.partial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionSafety.partial\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionSafety</span>.<span class=\"name\">partial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L91-L91","name":"Lean.DefinitionSafety.safe","line":91,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety.safe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionSafety.safe\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionSafety</span>.<span class=\"name\">safe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L91-L91","name":"Lean.DefinitionSafety.unsafe","line":91,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety.unsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionSafety.unsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionSafety</span>.<span class=\"name\">unsafe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L90-L92","name":"Lean.DefinitionSafety","line":90,"kind":"inductive","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionSafety\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionSafety</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L87-L88","name":"Lean.AxiomVal.isUnsafeEx","line":87,"kind":"def","docLink":"./Lean/Declaration.html#Lean.AxiomVal.isUnsafeEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.AxiomVal.isUnsafeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">AxiomVal</span>.<span class=\"name\">isUnsafeEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Declaration.html#Lean.AxiomVal\">Lean.AxiomVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L80-L85","name":"Lean.mkAxiomValEx","line":80,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkAxiomValEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkAxiomValEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAxiomValEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.AxiomVal\">Lean.AxiomVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L77-L77","name":"Lean.instInhabitedAxiomVal","line":77,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedAxiomVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedAxiomVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAxiomVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.AxiomVal\">Lean.AxiomVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L76-L76","name":"Lean.AxiomVal.isUnsafe","line":76,"kind":"def","docLink":"./Lean/Declaration.html#Lean.AxiomVal.isUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.AxiomVal.isUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">AxiomVal</span>.<span class=\"name\">isUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.AxiomVal\">Lean.AxiomVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L75-L77","name":"Lean.AxiomVal","line":75,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.AxiomVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.AxiomVal\"><span class=\"name\">Lean</span>.<span class=\"name\">AxiomVal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L73-L73","name":"Lean.instInhabitedConstantVal","line":73,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstantVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedConstantVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L72-L72","name":"Lean.ConstantVal.type","line":72,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantVal.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal.type\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L71-L71","name":"Lean.ConstantVal.levelParams","line":71,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantVal.levelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal.levelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span>.<span class=\"name\">levelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L70-L70","name":"Lean.ConstantVal.name","line":70,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantVal.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal.name\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L69-L73","name":"Lean.ConstantVal","line":69,"kind":"structure","docLink":"./Lean/Declaration.html#Lean.ConstantVal","doc":"Base structure for `AxiomVal`, `DefinitionVal`, `TheoremVal`, `InductiveVal`, `ConstructorVal`, `RecursorVal` and `QuotVal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L62-L64","name":"Lean.ReducibilityHints.isRegular","line":62,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.isRegular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ReducibilityHints.isRegular\"><span class=\"name\">Lean</span>.<span class=\"name\">ReducibilityHints</span>.<span class=\"name\">isRegular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L58-L60","name":"Lean.ReducibilityHints.isAbbrev","line":58,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.isAbbrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ReducibilityHints.isAbbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">ReducibilityHints</span>.<span class=\"name\">isAbbrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L51-L56","name":"Lean.ReducibilityHints.lt","line":51,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ReducibilityHints.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">ReducibilityHints</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a> → <a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L44-L47","name":"Lean.ReducibilityHints.getHeightEx","line":44,"kind":"def","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.getHeightEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ReducibilityHints.getHeightEx\"><span class=\"name\">Lean</span>.<span class=\"name\">ReducibilityHints</span>.<span class=\"name\">getHeightEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L40-L41","name":"Lean.mkReducibilityHintsRegularEx","line":40,"kind":"def","docLink":"./Lean/Declaration.html#Lean.mkReducibilityHintsRegularEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.mkReducibilityHintsRegularEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkReducibilityHintsRegularEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L37-L37","name":"Lean.instInhabitedReducibilityHints","line":37,"kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedReducibilityHints","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.instInhabitedReducibilityHints\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedReducibilityHints</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L36-L36","name":"Lean.ReducibilityHints.regular","line":36,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.regular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ReducibilityHints.regular\"><span class=\"name\">Lean</span>.<span class=\"name\">ReducibilityHints</span>.<span class=\"name\">regular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a> → <a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L35-L35","name":"Lean.ReducibilityHints.abbrev","line":35,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.abbrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ReducibilityHints.abbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">ReducibilityHints</span>.<span class=\"name\">abbrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L34-L34","name":"Lean.ReducibilityHints.opaque","line":34,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.opaque","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ReducibilityHints.opaque\"><span class=\"name\">Lean</span>.<span class=\"name\">ReducibilityHints</span>.<span class=\"name\">opaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L33-L37","name":"Lean.ReducibilityHints","line":33,"kind":"inductive","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints","doc":"Reducibility hints are used in the convertibility checker.\nWhen trying to solve a constraint such a\n\n           (f ...) =?= (g ...)\n\nwhere f and g are definitions, the checker has to decide which one will be unfolded.\n  If      f (g) is opaque,     then g (f) is unfolded if it is also not marked as opaque,\n  Else if f (g) is abbrev,     then f (g) is unfolded if g (f) is also not marked as abbrev,\n  Else if f and g are regular, then we unfold the one with the biggest definitional height.\n  Otherwise both are unfolded.\n\nThe arguments of the `regular` Constructor are: the definitional height and the flag `selfOpt`.\n\nThe definitional height is by default computed by the kernel. It only takes into account\nother regular definitions used in a definition. When creating declarations using meta-programming,\nwe can specify the definitional depth manually.\n\nRemark: the hint only affects performance. None of the hints prevent the kernel from unfolding a\ndeclaration during Type checking.\n\nRemark: the ReducibilityHints are not related to the attributes: reducible/irrelevance/semireducible.\nThese attributes are used by the Elaborator. The ReducibilityHints are used by the kernel (and Elaborator).\nMoreover, the ReducibilityHints cannot be changed after a declaration is added to the kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ReducibilityHints\"><span class=\"name\">Lean</span>.<span class=\"name\">ReducibilityHints</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.OpaqueVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.OpaqueVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">OpaqueVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConstantVal : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.OpaqueVal\">Lean.OpaqueVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.ConstructorVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstructorVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstructorVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConstantVal : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(induct : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cidx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numFields : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.DefinitionVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.DefinitionVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">DefinitionVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConstantVal : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hints : <a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">Lean.ReducibilityHints</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(safety : <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.InductiveType.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.InductiveType.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveType.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveType</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctors : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.Constructor\">Lean.Constructor</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.InductiveType\">Lean.InductiveType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.ConstantVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.ConstantVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.Constructor.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Constructor.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.Constructor.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Constructor</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.Constructor\">Lean.Constructor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.TheoremVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.TheoremVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.TheoremVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">TheoremVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConstantVal : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.TheoremVal\">Lean.TheoremVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.AxiomVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.AxiomVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.AxiomVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AxiomVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConstantVal : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.AxiomVal\">Lean.AxiomVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.QuotVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.QuotVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">QuotVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConstantVal : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Lean/Declaration.html#Lean.QuotKind\">Lean.QuotKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.QuotVal\">Lean.QuotVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.InductiveVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.InductiveVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.InductiveVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">InductiveVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConstantVal : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numIndices : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctors : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isRec : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isReflexive : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isNested : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.RecursorVal.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.RecursorVal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorVal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorVal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConstantVal : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(all : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numIndices : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numMotives : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numMinors : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rules : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.RecursorRule\">Lean.RecursorRule</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isUnsafe : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.RecursorVal\">Lean.RecursorVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Declaration.lean#L1-L1","name":"Lean.RecursorRule.mk","line":1,"kind":"ctor","docLink":"./Lean/Declaration.html#Lean.RecursorRule.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Declaration.html#Lean.RecursorRule.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">RecursorRule</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctor : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nfields : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.RecursorRule\">Lean.RecursorRule</a></div></div>"}]}