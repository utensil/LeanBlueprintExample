{"name":"Lean.Elab.Notation","instances":[],"imports":["Init","Lean.Elab.Syntax","Lean.Elab.AuxDef","Lean.Elab.BuiltinNotation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L163-L169","name":"Lean.Elab.Command.expandNotation","line":163,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L120-L124","name":"Lean.Elab.Command.mkUnexpander.flattenApp","line":120,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.mkUnexpander.flattenApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.mkUnexpander.flattenApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkUnexpander</span>.<span class=\"name\">flattenApp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L86-L124","name":"Lean.Elab.Command.mkUnexpander","line":86,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.mkUnexpander","doc":"Try to derive an unexpander from a notation.\nThe notation must be of the form `notation ... => c body`\nwhere `c` is a declaration in the current scope and `body` any syntax\nthat contains each variable from the LHS at most once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.mkUnexpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkUnexpander</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(attrKind : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.attrKind</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pat : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(qrhs : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L70-L80","name":"Lean.Elab.Command.hasDuplicateAntiquot","line":70,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.hasDuplicateAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.hasDuplicateAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">hasDuplicateAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stxs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L62-L68","name":"Lean.Elab.Command.removeParentheses","line":62,"kind":"opaque","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParentheses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParentheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">removeParentheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L55-L60","name":"Lean.Elab.Command.removeParenthesesAux","line":55,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParenthesesAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParenthesesAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">removeParenthesesAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(parens : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L46-L53","name":"Lean.Elab.Command.expandNotationItemIntoPattern","line":46,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoPattern","doc":"Convert `notation` command lhs item into a pattern element "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNotationItemIntoPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L40-L43","name":"Lean.Elab.Command.expandNotationItemIntoSyntaxItem","line":40,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoSyntaxItem","doc":"Convert `notation` command lhs item into a `syntax` command item "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoSyntaxItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNotationItemIntoSyntaxItem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.notationItem</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`stx</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Notation.lean#L27-L37","name":"Lean.Elab.Command.addInheritDocDefault","line":27,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.addInheritDocDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.addInheritDocDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">addInheritDocDefault</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rhs : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrs? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span> <span class=\"fn\">&quot,&quot</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span> <span class=\"fn\">&quot,&quot</span></span>)</span></div></div>"}]}