{"name":"Lean.Meta.Tactic.Cleanup","instances":[],"imports":["Init","Lean.Meta.CollectFVars","Lean.Meta.Tactic.Clear"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cleanup.lean#L70-L71","name":"Lean.Meta.cleanup","line":70,"kind":"def","docLink":"./Lean/Meta/Tactic/Cleanup.html#Lean.Meta.cleanup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cleanup.html#Lean.Meta.cleanup\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">cleanup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cleanup.lean#L66-L67","name":"Lean.MVarId.cleanup","line":66,"kind":"def","docLink":"./Lean/Meta/Tactic/Cleanup.html#Lean.MVarId.cleanup","doc":"Auxiliary tactic for cleaning the local context. It removes local declarations (aka hypotheses) that are *not* relevant.\nWe say a variable `x` is \"relevant\" if\n- It occurs in the target type, or\n- There is a relevant variable `y` that depends on `x`, or\n- The type of `x` is a proposition and it depends on a relevant variable `y`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cleanup.html#Lean.MVarId.cleanup\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">cleanup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"}]}