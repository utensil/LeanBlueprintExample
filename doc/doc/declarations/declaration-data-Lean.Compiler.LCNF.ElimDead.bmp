{"name":"Lean.Compiler.LCNF.ElimDead","instances":[],"imports":["Init","Lean.Compiler.LCNF.CompilerM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L96-L97","name":"Lean.Compiler.LCNF.Decl.elimDead","line":96,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.Decl.elimDead","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.Decl.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L93-L94","name":"Lean.Compiler.LCNF.Code.elimDead","line":93,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.Code.elimDead","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.Code.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L62-L87","name":"Lean.Compiler.LCNF.ElimDead.elimDead","line":62,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.elimDead","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ElimDead</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.M\">Lean.Compiler.LCNF.ElimDead.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L58-L60","name":"Lean.Compiler.LCNF.ElimDead.visitFunDecl","line":58,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.visitFunDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.visitFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ElimDead</span>.<span class=\"name\">visitFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(funDecl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.M\">Lean.Compiler.LCNF.ElimDead.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L46-L46","name":"Lean.Compiler.LCNF.ElimDead.M","line":46,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ElimDead</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Î± : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L37-L42","name":"Lean.Compiler.LCNF.collectLocalDeclsLetValue","line":37,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectLocalDeclsLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L34-L35","name":"Lean.Compiler.LCNF.collectLocalDeclsArgs","line":34,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectLocalDeclsArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L28-L32","name":"Lean.Compiler.LCNF.collectLocalDeclsArg","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectLocalDeclsArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L19-L26","name":"Lean.Compiler.LCNF.collectLocalDeclsType.go","line":19,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsType.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsType.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectLocalDeclsType</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L16-L26","name":"Lean.Compiler.LCNF.collectLocalDeclsType","line":16,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsType","doc":"Collect set of (let) free variables in a LCNF value.\nThis code exploits the LCNF property that local declarations do not occur in types.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectLocalDeclsType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">Lean.Compiler.LCNF.UsedLocalDecls</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ElimDead.lean#L10-L10","name":"Lean.Compiler.LCNF.UsedLocalDecls","line":10,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UsedLocalDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}