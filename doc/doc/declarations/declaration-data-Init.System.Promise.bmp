{"name":"Init.System.Promise","instances":[{"typeNames":["IO.Promise"],"name":"IO.instNonemptyPromise","className":"Nonempty"}],"imports":["Init.System.IO"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Promise.lean#L55-L57","name":"IO.Promise.result","line":55,"kind":"opaque","docLink":"./Init/System/Promise.html#IO.Promise.result","doc":"The result task of a `Promise`.\n\nThe task blocks until `Promise.resolve` is called.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.result\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">result</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(promise : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Promise.lean#L44-L44","name":"IO.Promise.resolve","line":44,"kind":"opaque","docLink":"./Init/System/Promise.html#IO.Promise.resolve","doc":"Resolves a `Promise`.\n\nOnly the first call to this function has an effect.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.resolve\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">resolve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(promise : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Promise.lean#L36-L36","name":"IO.Promise.new","line":36,"kind":"opaque","docLink":"./Init/System/Promise.html#IO.Promise.new","doc":"Creates a new `Promise`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.new\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Promise.lean#L31-L32","name":"IO.instNonemptyPromise","line":31,"kind":"instance","docLink":"./Init/System/Promise.html#IO.instNonemptyPromise","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.instNonemptyPromise\"><span class=\"name\">IO</span>.<span class=\"name\">instNonemptyPromise</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> (<span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Promise.lean#L29-L29","name":"IO.Promise","line":29,"kind":"def","docLink":"./Init/System/Promise.html#IO.Promise","doc":"`Promise α` allows you to create a `Task α` whose value is provided later by calling `resolve`.\n\nTypical usage is as follows:\n1. `let promise ← Promise.new` creates a promise\n2. `promise.result : Task α` can now be passed around\n3. `promise.result.get` blocks until the promise is resolved\n4. `promise.resolve a` resolves the promise\n5. `promise.result.get` now returns `a`\n\nEvery promise must eventually be resolved.\nOtherwise the memory used for the promise will be leaked,\nand any tasks depending on the promise's result will wait forever.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}