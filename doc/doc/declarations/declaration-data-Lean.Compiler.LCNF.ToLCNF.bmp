{"name":"Lean.Compiler.LCNF.ToLCNF","instances":[{"typeNames":["Lean.Compiler.LCNF.ToLCNF.Element"],"name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","className":"Inhabited"}],"imports":["Init","Lean.ProjFns","Lean.Compiler.BorrowedAnnotation","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L739-L752","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet","line":739,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L734-L737","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj","line":734,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L728-L732","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData","line":728,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitMData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mdata : <a href=\"./Lean/Expr.html#Lean.MData\">Lean.MData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L692-L726","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda","line":692,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L660-L690","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp","line":660,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L645-L658","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn","line":645,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitProjFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(projInfo : <a href=\"./Lean/ProjFns.html#Lean.ProjectionFunctionInfo\">Lean.ProjectionFunctionInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L635-L643","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor","line":635,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">expandNoConfusionMajor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(major : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numFields : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L610-L633","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion","line":610,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitNoConfusion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L600-L608","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndIffRecCore","line":600,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndIffRecCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndIffRecCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitAndIffRecCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minorPos : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L594-L598","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec","line":594,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitFalseRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L586-L592","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec","line":586,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitEqRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L571-L584","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift","line":571,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitQuotLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L567-L569","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor","line":567,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L537-L565","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases","line":537,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(casesInfo : <a href=\"./Lean/Compiler/LCNF/Util.html#Lean.Compiler.LCNF.CasesInfo\">Lean.Compiler.LCNF.CasesInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L508-L535","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt","line":508,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt","doc":"Visit a `matcher`/`casesOn` alternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> (<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Lean.Compiler.LCNF.Alt</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L493-L503","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication","line":493,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication","doc":"If `args.size == arity`, then just return `app`.\nOtherwise return\n```\nlet k := app\nk args[arity:]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">mkOverApplication</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(app : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L478-L483","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied","line":478,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied","doc":"Eta expand if under applied, otherwise apply k "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">etaIfUnderApplied</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L472-L475","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefaultConst","line":472,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefaultConst","doc":"Giving `f` a constant `.const declName us`, convert `args` into `args'`, and return `.const declName us args'` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefaultConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitAppDefaultConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L454-L469","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg","line":454,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitAppArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L451-L452","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLit","line":451,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lit : <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L435-L449","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visit","line":435,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L419-L433","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore","line":419,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span>.<span class=\"name\">visitCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L416-L752","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF","line":416,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF","doc":"Put the given expression in `LCNF`.\n\n- Nested proofs are replaced with `lcProof`-applications.\n- Eta-expand applications of declarations that satisfy `shouldEtaExpand`.\n- Put computationally relevant expressions in A-normal form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L404-L407","name":"Lean.Compiler.LCNF.ToLCNF.litToValue","line":404,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.litToValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.litToValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">litToValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lit : <a href=\"./Lean/Expr.html#Lean.Literal\">Lean.Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">Lean.Compiler.LCNF.LitValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L388-L402","name":"Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","line":388,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","doc":"Eta reduce implicits. We use this function to eliminate introduced by the implicit lambda feature,\nwhere it generates terms such as `fun {α} => ReaderT.pure`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">etaReduceImplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L377-L382","name":"Lean.Compiler.LCNF.ToLCNF.etaExpandN","line":377,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaExpandN","doc":"Eta-expand with `n` lambdas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaExpandN\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">etaExpandN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L366-L372","name":"Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","line":366,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mustEtaExpand\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mustEtaExpand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L356-L364","name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go","line":356,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitBoundedLambda</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L353-L364","name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","line":353,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitBoundedLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L345-L351","name":"Lean.Compiler.LCNF.ToLCNF.visitLambda.go","line":345,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitLambda</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L342-L351","name":"Lean.Compiler.LCNF.ToLCNF.visitLambda","line":342,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L330-L340","name":"Lean.Compiler.LCNF.ToLCNF.mkLetDecl","line":330,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(binderName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type' : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L322-L328","name":"Lean.Compiler.LCNF.ToLCNF.mkParam","line":322,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkParam","doc":"Create a new local declaration using a Lean regular type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(binderName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L314-L319","name":"Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","line":314,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.cleanupBinderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">cleanupBinderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(binderName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L305-L312","name":"Lean.Compiler.LCNF.ToLCNF.toLCNFType","line":305,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNFType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNFType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNFType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L299-L303","name":"Lean.Compiler.LCNF.ToLCNF.applyToAny","line":299,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.applyToAny","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.applyToAny\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">applyToAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L280-L292","name":"Lean.Compiler.LCNF.ToLCNF.withNewScope","line":280,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.withNewScope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.withNewScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">withNewScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L247-L248","name":"Lean.Compiler.LCNF.ToLCNF.run","line":247,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L240-L245","name":"Lean.Compiler.LCNF.ToLCNF.toCode","line":240,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toCode","doc":"Create `Code` that executes the current `seq` and then returns `result` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(result : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L236-L237","name":"Lean.Compiler.LCNF.ToLCNF.letValueToArg","line":236,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.letValueToArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.letValueToArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">letValueToArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prefixName : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <span class=\"fn\">`_x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L228-L234","name":"Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","line":228,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkAuxLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prefixName : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <span class=\"fn\">`_x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L223-L226","name":"Lean.Compiler.LCNF.ToLCNF.mkUnreachable","line":223,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkUnreachable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkUnreachable\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkUnreachable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L220-L221","name":"Lean.Compiler.LCNF.ToLCNF.pushElement","line":220,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.pushElement","doc":"Add LCNF element to the current sequence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.pushElement\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">pushElement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(elem : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L216-L217","name":"Lean.Compiler.LCNF.ToLCNF.liftMetaM","line":216,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.liftMetaM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.liftMetaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">liftMetaM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">Lean.Compiler.LCNF.ToLCNF.M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L214-L214","name":"Lean.Compiler.LCNF.ToLCNF.M","line":214,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L212-L212","name":"Lean.Compiler.LCNF.ToLCNF.State.toAny","line":212,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.toAny","doc":"Fields that are type formers must be replaced with `◾`\nin the resulting code. Otherwise, we have data occurring in\ntypes.\nWhen converting a `casesOn` into LCNF, we add constructor fields\nthat are types and type formers into this set. See `visitCases`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.toAny\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">toAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">Lean.Compiler.LCNF.ToLCNF.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L204-L204","name":"Lean.Compiler.LCNF.ToLCNF.State.seq","line":204,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.seq","doc":"LCNF sequence, we chain it to create a LCNF `Code` object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.seq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">seq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">Lean.Compiler.LCNF.ToLCNF.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L202-L202","name":"Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache","line":202,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache","doc":"isTypeFormerType cache "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">isTypeFormerTypeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">Lean.Compiler.LCNF.ToLCNF.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L200-L200","name":"Lean.Compiler.LCNF.ToLCNF.State.typeCache","line":200,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.typeCache","doc":"`toLCNFType` cache "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.typeCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">typeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">Lean.Compiler.LCNF.ToLCNF.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L198-L198","name":"Lean.Compiler.LCNF.ToLCNF.State.cache","line":198,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.cache","doc":"Cache from Lean regular expression to LCNF argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">Lean.Compiler.LCNF.ToLCNF.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L196-L196","name":"Lean.Compiler.LCNF.ToLCNF.State.lctx","line":196,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.lctx","doc":"Local context containing the original Lean types (not LCNF ones). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">Lean.Compiler.LCNF.ToLCNF.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L194-L212","name":"Lean.Compiler.LCNF.ToLCNF.State","line":194,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L154-L192","name":"Lean.Compiler.LCNF.ToLCNF.seqToCode.go","line":154,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">seqToCode</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(seq : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L151-L192","name":"Lean.Compiler.LCNF.ToLCNF.seqToCode","line":151,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">seqToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(seq : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L78-L149","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.go","line":78,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(jpDecl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM\">Lean.Compiler.LCNF.ToLCNF.BindCasesM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L70-L76","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?","line":70,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span>.<span class=\"name\">findFun?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L67-L68","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts","line":67,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span>.<span class=\"name\">visitAlts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(jpDecl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Lean.Compiler.LCNF.Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM\">Lean.Compiler.LCNF.ToLCNF.BindCasesM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Lean.Compiler.LCNF.Alt</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L60-L149","name":"Lean.Compiler.LCNF.ToLCNF.bindCases","line":60,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases","doc":"This method returns code that at each exit point of `cases`, it jumps to `jpDecl`.\nIt is similar to `Code.bind`, but we add special support for `inlineMatcher`.\nThe `inlineMatcher` function inlines the auxiliary `_match_<idx>` declarations.\nTo make sure there is no code duplication, `inlineMatcher` creates auxiliary declarations `_alt.<idx>`.\nWe can say the `_alt.<idx>` declarations are pre join points. For each auxiliary declaration used at\nan exit point of `cases`, this method creates an new auxiliary join point that invokes `_alt.<idx>`,\nand then jumps to `jpDecl`. The goal is to make sure the auxiliary join point is the only occurrence\nof `_alt.<idx>`, then `simp` will inline it.\nThat is, our goal is to try to promote the pre join points `_alt.<idx>` into a proper join point.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(jpDecl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cases : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Lean.Compiler.LCNF.Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L47-L47","name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM","line":47,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM","doc":"Auxiliary monad for implementing `bindCases` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">BindCasesM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L44-L44","name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","line":44,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","doc":"State for `BindCasesM` monad\nMapping from `_alt.<idx>` variables to new join points\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">BindCasesM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L38-L38","name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","line":38,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">instInhabitedElement</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L37-L37","name":"Lean.Compiler.LCNF.ToLCNF.Element.unreach","line":37,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.unreach","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.unreach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">unreach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L36-L36","name":"Lean.Compiler.LCNF.ToLCNF.Element.cases","line":36,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cases : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Lean.Compiler.LCNF.Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L35-L35","name":"Lean.Compiler.LCNF.ToLCNF.Element.let","line":35,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.let","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.let\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">let</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L34-L34","name":"Lean.Compiler.LCNF.ToLCNF.Element.fun","line":34,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.fun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.fun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">fun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L33-L33","name":"Lean.Compiler.LCNF.ToLCNF.Element.jp","line":33,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.jp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.jp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">jp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L32-L38","name":"Lean.Compiler.LCNF.ToLCNF.Element","line":32,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element","doc":"Auxiliary inductive datatype for constructing LCNF `Code` objects.\nThe `toLCNF` function maintains a sequence of elements that is eventually\nconverted into `Code`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L24-L25","name":"Lean.Compiler.LCNF.ToLCNF.mkLcProof","line":24,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLcProof","doc":"Create the temporary `lcProof` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLcProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkLcProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L20-L21","name":"Lean.Compiler.LCNF.ToLCNF.isLCProof","line":20,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.isLCProof","doc":"Return `true` if `e` is a `lcProof` application.\nRecall that we use `lcProof` to erase all nested proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.isLCProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">isLCProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToLCNF.lean#L1-L1","name":"Lean.Compiler.LCNF.ToLCNF.State.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cache : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(typeCache : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isTypeFormerTypeCache : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(seq : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Lean.Compiler.LCNF.ToLCNF.Element</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toAny : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">Lean.Compiler.LCNF.ToLCNF.State</a></div></div>"}]}