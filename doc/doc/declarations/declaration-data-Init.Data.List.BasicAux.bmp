{"name":"Init.Data.List.BasicAux","instances":[{"typeNames":["List","List","LE.le","List.instLEList"],"name":"List.instAntisymmListLeInstLEList","className":"Antisymm"}],"imports":["Init.Data.Nat.Linear","Init.Data.List.Basic","Init.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L207-L208","name":"List.mapMono","line":207,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.mapMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.mapMono\"><span class=\"name\">List</span>.<span class=\"name\">mapMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L202-L205","name":"List.mapMonoM","line":202,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.mapMonoM","doc":"Monomorphic `List.mapM`. The internal implementation uses pointer equality, and does not allocate a new list\nif the result of each `f a` is a pointer equal value `a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.mapMonoM\"><span class=\"name\">List</span>.<span class=\"name\">mapMonoM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L184-L185","name":"List.instAntisymmListLeInstLEList","line":184,"kind":"instance","docLink":"./Init/Data/List/BasicAux.html#List.instAntisymmListLeInstLEList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.instAntisymmListLeInstLEList\"><span class=\"name\">List</span>.<span class=\"name\">instAntisymmListLeInstLEList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Antisymm\">Antisymm</a> <span class=\"fn\">fun <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> =&gt <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\">x_1</span></span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Antisymm\">Antisymm</a> <span class=\"fn\">fun <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> =&gt <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L168-L182","name":"List.le_antisymm","line":168,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.le_antisymm\"><span class=\"name\">List</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[s : <span class=\"fn\"><a href=\"./Init/Core.html#Antisymm\">Antisymm</a> <span class=\"fn\">fun <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> =&gt <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\">x_1</span></span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">bs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">bs</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">as</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L160-L166","name":"List.sizeOf_get","line":160,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.sizeOf_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.sizeOf_get\"><span class=\"name\">List</span>.<span class=\"name\">sizeOf_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">as</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> <span class=\"fn\">as</span> <span class=\"fn\">i</span></span>)</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">as</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L155-L158","name":"List.append_cancel_right_eq","line":155,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.append_cancel_right_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.append_cancel_right_eq\"><span class=\"name\">List</span>.<span class=\"name\">append_cancel_right_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L150-L153","name":"List.append_cancel_left_eq","line":150,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.append_cancel_left_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.append_cancel_left_eq\"><span class=\"name\">List</span>.<span class=\"name\">append_cancel_left_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs</span></span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">bs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L143-L148","name":"List.append_cancel_right","line":143,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.append_cancel_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.append_cancel_right\"><span class=\"name\">List</span>.<span class=\"name\">append_cancel_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L136-L141","name":"List.append_cancel_left","line":136,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.append_cancel_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.append_cancel_left\"><span class=\"name\">List</span>.<span class=\"name\">append_cancel_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">bs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L127-L132","name":"List.tacticSizeOf_list_dec","line":127,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.tacticSizeOf_list_dec","doc":"This tactic, added to the `decreasing_trivial` toolbox, proves that\n`sizeOf a < sizeOf as` when `a ∈ as`, which is useful for well founded recursions\nover a nested inductive like `inductive T | mk : List T → T`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.tacticSizeOf_list_dec\"><span class=\"name\">List</span>.<span class=\"name\">tacticSizeOf_list_dec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L119-L122","name":"List.sizeOf_lt_of_mem","line":119,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.sizeOf_lt_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.sizeOf_lt_of_mem\"><span class=\"name\">List</span>.<span class=\"name\">sizeOf_lt_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">as</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">as</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L109-L117","name":"List.get_last","line":109,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.get_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.get_last\"><span class=\"name\">List</span>.<span class=\"name\">get_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> (<span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">a</span>]</span></span>)</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.val</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">as</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> (<span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">a</span>]</span></span>) <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L102-L107","name":"List.get_append_right","line":102,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.get_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.get_append_right\"><span class=\"name\">List</span>.<span class=\"name\">get_append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">as</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h' : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> (<span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h'' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">as</span></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">bs</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> (<span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span>) <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h'</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> <span class=\"fn\">bs</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">as</span></span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h''</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L94-L100","name":"List.get_append_left","line":94,"kind":"theorem","docLink":"./Init/Data/List/BasicAux.html#List.get_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.get_append_left\"><span class=\"name\">List</span>.<span class=\"name\">get_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">as</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h' : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> (<span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> (<span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span>) <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h'</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> <span class=\"fn\">as</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L84-L92","name":"List.rotateRight","line":84,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.rotateRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.rotateRight\"><span class=\"name\">List</span>.<span class=\"name\">rotateRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L74-L82","name":"List.rotateLeft","line":74,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.rotateLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.rotateLeft\"><span class=\"name\">List</span>.<span class=\"name\">rotateLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L70-L72","name":"List.getLastD","line":70,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.getLastD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.getLastD\"><span class=\"name\">List</span>.<span class=\"name\">getLastD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L66-L68","name":"List.getLast?","line":66,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.getLast?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.getLast?\"><span class=\"name\">List</span>.<span class=\"name\">getLast?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L62-L64","name":"List.getLast!","line":62,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.getLast!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.getLast!\"><span class=\"name\">List</span>.<span class=\"name\">getLast!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L57-L60","name":"List.getLast","line":57,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.getLast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.getLast\"><span class=\"name\">List</span>.<span class=\"name\">getLast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L53-L55","name":"List.tailD","line":53,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.tailD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.tailD\"><span class=\"name\">List</span>.<span class=\"name\">tailD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L49-L51","name":"List.tail?","line":49,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.tail?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.tail?\"><span class=\"name\">List</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L45-L47","name":"List.tail!","line":45,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.tail!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.tail!\"><span class=\"name\">List</span>.<span class=\"name\">tail!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L42-L43","name":"List.head","line":42,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.head\"><span class=\"name\">List</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L38-L40","name":"List.headD","line":38,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.headD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.headD\"><span class=\"name\">List</span>.<span class=\"name\">headD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L34-L36","name":"List.head?","line":34,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.head?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.head?\"><span class=\"name\">List</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L30-L32","name":"List.head!","line":30,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.head!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.head!\"><span class=\"name\">List</span>.<span class=\"name\">head!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L27-L28","name":"List.getD","line":27,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.getD\"><span class=\"name\">List</span>.<span class=\"name\">getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₀ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L22-L25","name":"List.get?","line":22,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.get?\"><span class=\"name\">List</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/List/BasicAux.lean#L17-L20","name":"List.get!","line":17,"kind":"def","docLink":"./Init/Data/List/BasicAux.html#List.get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/BasicAux.html#List.get!\"><span class=\"name\">List</span>.<span class=\"name\">get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">α</span></span></span></div></div>"}]}