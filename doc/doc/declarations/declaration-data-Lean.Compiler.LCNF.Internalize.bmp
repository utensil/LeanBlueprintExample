{"name":"Lean.Compiler.LCNF.Internalize","instances":[{"typeNames":["Lean.Compiler.LCNF.Internalize.InternalizeM","Bool.true"],"name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","className":"Lean.Compiler.LCNF.MonadFVarSubst"},{"typeNames":["Lean.Compiler.LCNF.Internalize.InternalizeM"],"name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","className":"Lean.Compiler.LCNF.MonadFVarSubstState"}],"imports":["Init","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.CompilerM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L122-L128","name":"Lean.Compiler.LCNF.normalizeFVarIds","line":122,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.normalizeFVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.normalizeFVarIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">normalizeFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L116-L120","name":"Lean.Compiler.LCNF.cleanup","line":116,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.cleanup","doc":"Create a fresh local context and internalize the given decls.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.cleanup\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">cleanup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L107-L111","name":"Lean.Compiler.LCNF.Decl.internalize.go","line":107,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Decl.internalize.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Decl.internalize.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">internalize</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Lean.Compiler.LCNF.Internalize.InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L104-L111","name":"Lean.Compiler.LCNF.Decl.internalize","line":104,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Decl.internalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Decl.internalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">internalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FVarSubst\">Lean.Compiler.LCNF.FVarSubst</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L100-L101","name":"Lean.Compiler.LCNF.Code.internalize","line":100,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Code.internalize","doc":"Refresh free variables ids in `code`, and store their declarations in the local context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Code.internalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">internalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FVarSubst\">Lean.Compiler.LCNF.FVarSubst</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L89-L93","name":"Lean.Compiler.LCNF.Internalize.internalizeCodeDecl","line":89,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCodeDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCodeDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeCodeDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Lean.Compiler.LCNF.Internalize.InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L69-L85","name":"Lean.Compiler.LCNF.Internalize.internalizeCode","line":69,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Lean.Compiler.LCNF.Internalize.InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L59-L67","name":"Lean.Compiler.LCNF.Internalize.internalizeFunDecl","line":59,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeFunDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Lean.Compiler.LCNF.Internalize.InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L48-L55","name":"Lean.Compiler.LCNF.Internalize.internalizeLetDecl","line":48,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Lean.Compiler.LCNF.Internalize.InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L40-L46","name":"Lean.Compiler.LCNF.Internalize.internalizeParam","line":40,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Lean.Compiler.LCNF.Internalize.InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L32-L33","name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","line":32,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">instMonadFVarSubstStateInternalizeM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubstState\">Lean.Compiler.LCNF.MonadFVarSubstState</a> <a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Lean.Compiler.LCNF.Internalize.InternalizeM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L29-L30","name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","line":29,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","doc":"The `InternalizeM` monad is a translator. It \"translates\" the free variables\nin the input expressions and `Code`, into new fresh free variables in the\nlocal context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">instMonadFVarSubstInternalizeMTrue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubst\">Lean.Compiler.LCNF.MonadFVarSubst</a> <a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Lean.Compiler.LCNF.Internalize.InternalizeM</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Internalize.lean#L22-L22","name":"Lean.Compiler.LCNF.Internalize.InternalizeM","line":22,"kind":"def","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">InternalizeM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}