{"name":"Lean.Meta.Injective","instances":[],"imports":["Init","Lean.Meta.Transform","Lean.Meta.Tactic.Injection","Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Refl","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Subst","Lean.Meta.Tactic.Simp.Types","Lean.Meta.Tactic.Assumption"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Injective.lean#L150-L165","name":"Lean.Meta.mkInjectiveTheorems","line":150,"kind":"def","docLink":"./Lean/Meta/Injective.html#Lean.Meta.mkInjectiveTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Injective.html#Lean.Meta.mkInjectiveTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkInjectiveTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Injective.lean#L145-L148","name":"Lean.Meta.genInjectivity","line":145,"kind":"opaque","docLink":"./Lean/Meta/Injective.html#Lean.Meta.genInjectivity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Injective.html#Lean.Meta.genInjectivity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">genInjectivity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Injective.lean#L113-L114","name":"Lean.Meta.mkInjectiveEqTheoremNameFor","line":113,"kind":"def","docLink":"./Lean/Meta/Injective.html#Lean.Meta.mkInjectiveEqTheoremNameFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Injective.html#Lean.Meta.mkInjectiveEqTheoremNameFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkInjectiveEqTheoremNameFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Injective.lean#L98-L99","name":"Lean.Meta.mkInjectiveTheoremNameFor","line":98,"kind":"def","docLink":"./Lean/Meta/Injective.html#Lean.Meta.mkInjectiveTheoremNameFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Injective.html#Lean.Meta.mkInjectiveTheoremNameFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkInjectiveTheoremNameFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Injective.lean#L26-L31","name":"Lean.Meta.elimOptParam","line":26,"kind":"def","docLink":"./Lean/Meta/Injective.html#Lean.Meta.elimOptParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Injective.html#Lean.Meta.elimOptParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">elimOptParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}