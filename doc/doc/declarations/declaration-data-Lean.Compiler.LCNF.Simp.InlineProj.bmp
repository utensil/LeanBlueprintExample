{"name":"Lean.Compiler.LCNF.Simp.InlineProj","instances":[],"imports":["Init","Lean.Compiler.LCNF.Simp.SimpM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineProj.lean#L77-L82","name":"Lean.Compiler.LCNF.Simp.inlineProjInst?.visitCode","line":77,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/InlineProj.html#Lean.Compiler.LCNF.Simp.inlineProjInst?.visitCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineProj.html#Lean.Compiler.LCNF.Simp.inlineProjInst?.visitCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">inlineProjInst?</span>.<span class=\"name\">visitCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(projs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> (<span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span>) <a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a></span>) <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineProj.lean#L50-L75","name":"Lean.Compiler.LCNF.Simp.inlineProjInst?.visit","line":50,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/InlineProj.html#Lean.Compiler.LCNF.Simp.inlineProjInst?.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineProj.html#Lean.Compiler.LCNF.Simp.inlineProjInst?.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">inlineProjInst?</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(projs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> (<span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span>) <a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a></span>) <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineProj.lean#L37-L82","name":"Lean.Compiler.LCNF.Simp.inlineProjInst?","line":37,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineProj.html#Lean.Compiler.LCNF.Simp.inlineProjInst?","doc":"Auxiliary function for projecting \"type class dictionary access\".\nThat is, we are trying to extract one of the type class instance elements.\nRemark: We do not consider parent instances to be elements.\nFor example, suppose `e` is `_x_4.1`, and we have\n```\n_x_2 : Monad (ReaderT Bool (ExceptT String Id)) := @ReaderT.Monad Bool (ExceptT String Id) _x_1\n_x_3 : Applicative (ReaderT Bool (ExceptT String Id)) := _x_2.1\n_x_4 : Functor (ReaderT Bool (ExceptT String Id)) := _x_3.1\n```\nThen, we will expand `_x_4.1` since it corresponds to the `Functor` `map` element,\nand its type is not a type class, but is of the form\n```\n{α β : Type u} → (α → β) → ...\n```\nIn the example above, the compiler should not expand `_x_3.1` or `_x_2.1` because they are\ntype class applications: `Functor` and `Applicative` respectively.\nBy eagerly expanding them, we may produce inefficient and bloated code.\nFor example, we may be using `_x_3.1` to invoke a function that expects a `Functor` instance.\nBy expanding `_x_3.1` we will be just expanding the code that creates this instance.\n\nThe result is representing a sequence of code containing let-declarations and local function declarations (`Array CodeDecl`)\nand the free variable containing the result (`FVarId`). The resulting `FVarId` often depends only on a small\nsubset of `Array CodeDecl`. However, this method does try to filter the relevant ones.\nWe rely on the `used` var set available in `SimpM` to filter them. See `attachCodeDecls`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineProj.html#Lean.Compiler.LCNF.Simp.inlineProjInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">inlineProjInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">Lean.Compiler.LCNF.CodeDecl</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span>)</span></div></div>"}]}