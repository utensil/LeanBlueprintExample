{"name":"Init.Data.AC","instances":[{"typeNames":["Lean.Data.AC.Expr"],"name":"Lean.Data.AC.instInhabitedExpr","className":"Inhabited"},{"typeNames":["Lean.Data.AC.Expr"],"name":"Lean.Data.AC.instReprExpr","className":"Repr"},{"typeNames":["Lean.Data.AC.Expr"],"name":"Lean.Data.AC.instBEqExpr","className":"BEq"},{"typeNames":["Lean.Data.AC.Context"],"name":"Lean.Data.AC.instContextInformationContext","className":"Lean.Data.AC.ContextInformation"},{"typeNames":["Lean.Data.AC.Context"],"name":"Lean.Data.AC.instEvalInformationContext","className":"Lean.Data.AC.EvalInformation"}],"imports":["Init.Classical","Init.Data.List"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L317-L320","name":"Lean.Data.AC.Context.eq_of_norm","line":317,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eq_of_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eq_of_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eq_of_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">Lean.Data.AC.norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">Lean.Data.AC.norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">Lean.Data.AC.eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">Lean.Data.AC.eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L312-L315","name":"Lean.Data.AC.Context.eval_norm","line":312,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eval_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eval_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eval_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">Lean.Data.AC.norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">Lean.Data.AC.eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L305-L310","name":"Lean.Data.AC.Context.eval_toList","line":305,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eval_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eval_toList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eval_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\">Lean.Data.AC.Expr.toList</a> <span class=\"fn\">e</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">Lean.Data.AC.eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L291-L303","name":"Lean.Data.AC.Context.evalList_append","line":291,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_append\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">Lean.Data.AC.Context.op</a> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">l</span></span>) (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L278-L289","name":"Lean.Data.AC.Context.evalList_removeNeutrals","line":278,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_removeNeutrals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_removeNeutrals\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_removeNeutrals</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals\">Lean.Data.AC.removeNeutrals</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L269-L276","name":"Lean.Data.AC.Context.unwrap_isNeutral","line":269,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.unwrap_isNeutral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.unwrap_isNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">unwrap_isNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral\">Lean.Data.AC.ContextInformation.isNeutral</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> →\n  <span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsNeutral\">Lean.IsNeutral</a> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp\">Lean.Data.AC.EvalInformation.evalOp</a> <span class=\"fn\">ctx</span></span>) (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar\">Lean.Data.AC.EvalInformation.evalVar</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L260-L267","name":"Lean.Data.AC.Context.toList_nonEmpty","line":260,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.toList_nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.toList_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">toList_nonEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\">Lean.Data.AC.Expr.toList</a> <span class=\"fn\">e</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L249-L258","name":"Lean.Data.AC.Context.evalList_sort","line":249,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm\">Lean.Data.AC.ContextInformation.isComm</a> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">Lean.Data.AC.sort</a> <span class=\"fn\">e</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L225-L247","name":"Lean.Data.AC.Context.evalList_sort_cons","line":225,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsCommutative\">Lean.IsCommutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.op</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">Lean.Data.AC.sort</a> (<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">Lean.Data.AC.sort</a> <span class=\"fn\">xs</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L210-L223","name":"Lean.Data.AC.Context.evalList_sort_loop_swap","line":210,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_loop_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_loop_swap\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_loop_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsCommutative\">Lean.IsCommutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.op</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">Lean.Data.AC.sort.loop</a> <span class=\"fn\">xs</span> (<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">Lean.Data.AC.sort.loop</a> (<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>) <span class=\"fn\">ys</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L191-L208","name":"Lean.Data.AC.Context.evalList_sort_congr","line":191,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_congr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsCommutative\">Lean.IsCommutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.op</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₃ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₄ : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">Lean.Data.AC.sort.loop</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">Lean.Data.AC.sort.loop</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L170-L189","name":"Lean.Data.AC.Context.evalList_insert","line":170,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsCommutative\">Lean.IsCommutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.op</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.insert\">Lean.Data.AC.insert</a> <span class=\"fn\">x</span> <span class=\"fn\">xs</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L165-L168","name":"Lean.Data.AC.Context.sort_loop_nonEmpty","line":165,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.sort_loop_nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.sort_loop_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">sort_loop_nonEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">Lean.Data.AC.sort.loop</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L160-L163","name":"Lean.Data.AC.insert_nonEmpty","line":160,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.insert_nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.insert_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">insert_nonEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.insert\">Lean.Data.AC.insert</a> <span class=\"fn\">x</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L130-L158","name":"Lean.Data.AC.Context.evalList_mergeIdem","line":130,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_mergeIdem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_mergeIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_mergeIdem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem\">Lean.Data.AC.ContextInformation.isIdem</a> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">Lean.Data.AC.mergeIdem</a> <span class=\"fn\">e</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">Lean.Data.AC.evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L127-L128","name":"Lean.Data.AC.Context.mergeIdem_head2","line":127,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head2\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_head2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">Lean.Data.AC.mergeIdem</a> (<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">Lean.Data.AC.mergeIdem</a> (<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L124-L125","name":"Lean.Data.AC.Context.mergeIdem_head","line":124,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">Lean.Data.AC.mergeIdem</a> (<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">Lean.Data.AC.mergeIdem</a> (<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L118-L122","name":"Lean.Data.AC.Context.mergeIdem_nonEmpty","line":118,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_nonEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_nonEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">Lean.Data.AC.mergeIdem</a> <span class=\"fn\">e</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L107-L116","name":"Lean.Data.AC.List.two_step_induction","line":107,"kind":"theorem","docLink":"./Init/Data/AC.html#Lean.Data.AC.List.two_step_induction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.List.two_step_induction\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">List</span>.<span class=\"name\">two_step_induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <a href=\"./foundational_types.html\">Sort</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(empty : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(single : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[<span class=\"fn\">a</span>]</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(step : <span class=\"fn\">(<span class=\"fn\">a </span>b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L101-L105","name":"Lean.Data.AC.norm","line":101,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[info : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">Lean.Data.AC.ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L94-L99","name":"Lean.Data.AC.removeNeutrals.loop","line":94,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">removeNeutrals</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[info : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">Lean.Data.AC.ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L88-L99","name":"Lean.Data.AC.removeNeutrals","line":88,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">removeNeutrals</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[info : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">Lean.Data.AC.ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L76-L82","name":"Lean.Data.AC.mergeIdem.loop","line":76,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.mergeIdem.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">mergeIdem</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L75-L86","name":"Lean.Data.AC.mergeIdem","line":75,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.mergeIdem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">mergeIdem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L70-L72","name":"Lean.Data.AC.sort.loop","line":70,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.sort.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">sort</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L69-L73","name":"Lean.Data.AC.sort","line":69,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.sort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">sort</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L65-L67","name":"Lean.Data.AC.insert","line":65,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L60-L63","name":"Lean.Data.AC.evalList","line":60,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.evalList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">evalList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">Lean.Data.AC.EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L56-L58","name":"Lean.Data.AC.Expr.toList","line":56,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L52-L54","name":"Lean.Data.AC.eval","line":52,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">Lean.Data.AC.EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ex : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L47-L50","name":"Lean.Data.AC.instEvalInformationContext","line":47,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instEvalInformationContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instEvalInformationContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instEvalInformationContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">Lean.Data.AC.EvalInformation</a> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>) <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L42-L45","name":"Lean.Data.AC.instContextInformationContext","line":42,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instContextInformationContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instContextInformationContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instContextInformationContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">Lean.Data.AC.ContextInformation</a> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L39-L40","name":"Lean.Data.AC.Context.var","line":39,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">var</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Lean.Data.AC.Variable</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L37-L37","name":"Lean.Data.AC.EvalInformation.evalVar","line":37,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">evalVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">Lean.Data.AC.EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L36-L36","name":"Lean.Data.AC.EvalInformation.evalOp","line":36,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">evalOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">Lean.Data.AC.EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L35-L35","name":"Lean.Data.AC.EvalInformation.arbitrary","line":35,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.arbitrary","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.arbitrary\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">arbitrary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">Lean.Data.AC.EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L34-L34","name":"Lean.Data.AC.EvalInformation.mk","line":34,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(arbitrary : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(evalOp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(evalVar : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">Lean.Data.AC.EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L34-L37","name":"Lean.Data.AC.EvalInformation","line":34,"kind":"class","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Sort</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max (max 1 u) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L32-L32","name":"Lean.Data.AC.ContextInformation.isIdem","line":32,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isIdem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">Lean.Data.AC.ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L31-L31","name":"Lean.Data.AC.ContextInformation.isComm","line":31,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isComm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">Lean.Data.AC.ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L30-L30","name":"Lean.Data.AC.ContextInformation.isNeutral","line":30,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">Lean.Data.AC.ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L29-L29","name":"Lean.Data.AC.ContextInformation.mk","line":29,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(isNeutral : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isComm : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isIdem : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">Lean.Data.AC.ContextInformation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L29-L32","name":"Lean.Data.AC.ContextInformation","line":29,"kind":"class","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max 1 u)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L27-L27","name":"Lean.Data.AC.Context.arbitrary","line":27,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.arbitrary","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.arbitrary\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">arbitrary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L26-L26","name":"Lean.Data.AC.Context.vars","line":26,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.vars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Lean.Data.AC.Variable</a> <span class=\"fn\"><span class=\"fn\">self</span>.op</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L25-L25","name":"Lean.Data.AC.Context.idem","line":25,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.idem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.idem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">idem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsIdempotent\">Lean.IsIdempotent</a> <span class=\"fn\"><span class=\"fn\">self</span>.op</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L24-L24","name":"Lean.Data.AC.Context.comm","line":24,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.comm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsCommutative\">Lean.IsCommutative</a> <span class=\"fn\"><span class=\"fn\">self</span>.op</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L23-L23","name":"Lean.Data.AC.Context.assoc","line":23,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.assoc\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsAssociative\">Lean.IsAssociative</a> <span class=\"fn\"><span class=\"fn\">self</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L22-L22","name":"Lean.Data.AC.Context.op","line":22,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.op","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L21-L21","name":"Lean.Data.AC.Context.mk","line":21,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assoc : <span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsAssociative\">Lean.IsAssociative</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsCommutative\">Lean.IsCommutative</a> <span class=\"fn\">op</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idem : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsIdempotent\">Lean.IsIdempotent</a> <span class=\"fn\">op</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vars : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Lean.Data.AC.Variable</a> <span class=\"fn\">op</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arbitrary : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Lean.Data.AC.Context</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L21-L27","name":"Lean.Data.AC.Context","line":21,"kind":"structure","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L19-L19","name":"Lean.Data.AC.Variable.neutral","line":19,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.neutral","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.neutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">neutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{op : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Lean.Data.AC.Variable</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsNeutral\">Lean.IsNeutral</a> <span class=\"fn\">op</span> <span class=\"fn\"><span class=\"fn\">self</span>.value</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L18-L18","name":"Lean.Data.AC.Variable.value","line":18,"kind":"def","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">value</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{op : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Lean.Data.AC.Variable</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L17-L17","name":"Lean.Data.AC.Variable.mk","line":17,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{op : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(neutral : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Core.html#Lean.IsNeutral\">Lean.IsNeutral</a> <span class=\"fn\">op</span> <span class=\"fn\">value</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Lean.Data.AC.Variable</a> <span class=\"fn\">op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L17-L19","name":"Lean.Data.AC.Variable","line":17,"kind":"structure","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(op : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L15-L15","name":"Lean.Data.AC.instBEqExpr","line":15,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instBEqExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instBEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L15-L15","name":"Lean.Data.AC.instReprExpr","line":15,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instReprExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instReprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L15-L15","name":"Lean.Data.AC.instInhabitedExpr","line":15,"kind":"instance","docLink":"./Init/Data/AC.html#Lean.Data.AC.instInhabitedExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L14-L14","name":"Lean.Data.AC.Expr.op","line":14,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.op","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">op</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L13-L13","name":"Lean.Data.AC.Expr.var","line":13,"kind":"ctor","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Lean.Data.AC.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/AC.lean#L12-L15","name":"Lean.Data.AC.Expr","line":12,"kind":"inductive","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}