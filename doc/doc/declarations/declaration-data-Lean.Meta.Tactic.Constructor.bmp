{"name":"Lean.Meta.Tactic.Constructor","instances":[],"imports":["Init","Lean.Meta.Check","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.Apply"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Constructor.lean#L53-L54","name":"Lean.Meta.existsIntro","line":53,"kind":"def","docLink":"./Lean/Meta/Tactic/Constructor.html#Lean.Meta.existsIntro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Constructor.html#Lean.Meta.existsIntro\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">existsIntro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Constructor.lean#L34-L50","name":"Lean.MVarId.existsIntro","line":34,"kind":"def","docLink":"./Lean/Meta/Tactic/Constructor.html#Lean.MVarId.existsIntro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Constructor.html#Lean.MVarId.existsIntro\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">existsIntro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Constructor.lean#L31-L32","name":"Lean.Meta.constructor","line":31,"kind":"def","docLink":"./Lean/Meta/Tactic/Constructor.html#Lean.Meta.constructor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Constructor.html#Lean.Meta.constructor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">constructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/Tactic/Apply.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">newGoals</span> := <a href=\"./Lean/Meta/Tactic/Apply.html#Lean.Meta.ApplyNewGoals.nonDependentFirst\">Lean.Meta.ApplyNewGoals.nonDependentFirst</a>, <span class=\"fn\">synthAssignedInstances</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">allowSynthFailures</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">approx</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Constructor.lean#L16-L28","name":"Lean.MVarId.constructor","line":16,"kind":"def","docLink":"./Lean/Meta/Tactic/Constructor.html#Lean.MVarId.constructor","doc":"When the goal `mvarId` type is an inductive datatype,\n`constructor` calls `apply` with the first matching constructor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Constructor.html#Lean.MVarId.constructor\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">constructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/Tactic/Apply.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">newGoals</span> := <a href=\"./Lean/Meta/Tactic/Apply.html#Lean.Meta.ApplyNewGoals.nonDependentFirst\">Lean.Meta.ApplyNewGoals.nonDependentFirst</a>, <span class=\"fn\">synthAssignedInstances</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">allowSynthFailures</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">approx</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"}]}