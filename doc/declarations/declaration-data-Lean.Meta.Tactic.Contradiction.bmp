{"name":"Lean.Meta.Tactic.Contradiction","instances":[{"typeNames":["Lean.Meta.SavedState","Lean.Meta.ElimEmptyInductive.M"],"name":"Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","className":"Lean.MonadBacktrack"}],"imports":["Init","Lean.Meta.MatchUtil","Lean.Meta.Tactic.Assumption","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Apply"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L229-L230","name":"Lean.Meta.contradiction","line":229,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.contradiction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.contradiction\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">contradiction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Lean.Meta.Contradiction.Config</a> <span class=\"fn\">{ <span class=\"fn\">useDecide</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">emptyType</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">searchFuel</span> := <span class=\"fn\">16</span>, <span class=\"fn\">genDiseq</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L224-L226","name":"Lean.MVarId.contradiction","line":224,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradiction","doc":"Try to close the goal using \"contradictions\" such as\n- Contradictory hypotheses `h₁ : p` and `h₂ : ¬ p`.\n- Contradictory disequality `h : x ≠ x`.\n- Contradictory equality between different constructors, e.g., `h : List.nil = List.cons x xs`.\n- Empty inductive types, e.g., `x : Fin 0`.\n- Decidable propositions that evaluate to false, i.e., a hypothesis `h : p` s.t. `decide p` reduces to `false`.\n  This is only tried if `Config.useDecide = true`.\n\nThrow exception if goal failed to be closed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradiction\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">contradiction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Lean.Meta.Contradiction.Config</a> <span class=\"fn\">{ <span class=\"fn\">useDecide</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">emptyType</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">searchFuel</span> := <span class=\"fn\">16</span>, <span class=\"fn\">genDiseq</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L152-L211","name":"Lean.MVarId.contradictionCore","line":152,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradictionCore","doc":"Return `true` if goal `mvarId` has contradictory hypotheses.\nSee `MVarId.contradiction` for the list of tests performed by this method.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradictionCore\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">contradictionCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Lean.Meta.Contradiction.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L53-L74","name":"Lean.Meta.ElimEmptyInductive.elim","line":53,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.elim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">elim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\">Lean.Meta.ElimEmptyInductive.M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L49-L51","name":"Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","line":49,"kind":"instance","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">instMonadBacktrackSavedStateM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadBacktrack.html#Lean.MonadBacktrack\">Lean.MonadBacktrack</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Lean.Meta.SavedState</a> <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\">Lean.Meta.ElimEmptyInductive.M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L47-L47","name":"Lean.Meta.ElimEmptyInductive.M","line":47,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L24-L24","name":"Lean.Meta.Contradiction.Config.genDiseq","line":24,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.genDiseq","doc":"Support for hypotheses such as\n```\nh : (x y : Nat) (ys : List Nat) → x = 0 → y::ys = [a, b, c] → False\n```\nThis kind of hypotheses appear when proving conditional equation theorems for match expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.genDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">genDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Lean.Meta.Contradiction.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L18-L18","name":"Lean.Meta.Contradiction.Config.searchFuel","line":18,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.searchFuel","doc":"When checking for empty types, `searchFuel` specifies the number of goals visited. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.searchFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">searchFuel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Lean.Meta.Contradiction.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L16-L16","name":"Lean.Meta.Contradiction.Config.emptyType","line":16,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.emptyType","doc":"Check whether any of the hypotheses is an empty type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.emptyType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">emptyType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Lean.Meta.Contradiction.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L14-L14","name":"Lean.Meta.Contradiction.Config.useDecide","line":14,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.useDecide","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.useDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">useDecide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Lean.Meta.Contradiction.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L13-L24","name":"Lean.Meta.Contradiction.Config","line":13,"kind":"structure","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Contradiction.lean#L1-L1","name":"Lean.Meta.Contradiction.Config.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(useDecide : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(emptyType : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(searchFuel : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(genDiseq : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Lean.Meta.Contradiction.Config</a></div></div>"}]}