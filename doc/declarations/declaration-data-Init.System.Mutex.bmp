{"name":"Init.System.Mutex","instances":[{"typeNames":["IO.BaseMutex"],"name":"IO.instNonemptyBaseMutex","className":"Nonempty"},{"typeNames":["IO.Condvar"],"name":"IO.instNonemptyCondvar","className":"Nonempty"},{"typeNames":["IO.Mutex"],"name":"IO.instNonemptyMutex","className":"Nonempty"},{"typeNames":["IO.Mutex","IO.BaseMutex"],"name":"IO.instCoeOutMutexBaseMutex","className":"CoeOut"}],"imports":["Init.System.IO","Init.Control.StateRef"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L113-L119","name":"IO.Mutex.atomicallyOnce","line":113,"kind":"def","docLink":"./Init/System/Mutex.html#IO.Mutex.atomicallyOnce","doc":"`mutex.atomicallyOnce condvar pred k` runs `k`,\nwaiting on `condvar` until `pred` returns true.\nBoth `k` and `pred` have access to the mutex's state.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Mutex.atomicallyOnce\"><span class=\"name\">IO</span>.<span class=\"name\">Mutex</span>.<span class=\"name\">atomicallyOnce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mutex : <span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.Mutex\">IO.Mutex</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(condvar : <a href=\"./Init/System/Mutex.html#IO.Condvar\">IO.Condvar</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.AtomicT\">IO.AtomicT</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.AtomicT\">IO.AtomicT</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L100-L106","name":"IO.Mutex.atomically","line":100,"kind":"def","docLink":"./Init/System/Mutex.html#IO.Mutex.atomically","doc":"`mutex.atomically k` runs `k` with access to the mutex's state while locking the mutex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Mutex.atomically\"><span class=\"name\">IO</span>.<span class=\"name\">Mutex</span>.<span class=\"name\">atomically</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mutex : <span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.Mutex\">IO.Mutex</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.AtomicT\">IO.AtomicT</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L97-L97","name":"IO.AtomicT","line":97,"kind":"def","docLink":"./Init/System/Mutex.html#IO.AtomicT","doc":"`AtomicT α m` is the monad that can be atomically executed inside a `Mutex α`,\nwith outside monad `m`.\nThe action has access to the state `α` of the mutex (via `get` and `set`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.AtomicT\"><span class=\"name\">IO</span>.<span class=\"name\">AtomicT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L89-L90","name":"IO.Mutex.new","line":89,"kind":"def","docLink":"./Init/System/Mutex.html#IO.Mutex.new","doc":"Creates a new mutex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Mutex.new\"><span class=\"name\">IO</span>.<span class=\"name\">Mutex</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.Mutex\">IO.Mutex</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L86-L86","name":"IO.instCoeOutMutexBaseMutex","line":86,"kind":"instance","docLink":"./Init/System/Mutex.html#IO.instCoeOutMutexBaseMutex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.instCoeOutMutexBaseMutex\"><span class=\"name\">IO</span>.<span class=\"name\">instCoeOutMutexBaseMutex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> (<span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.Mutex\">IO.Mutex</a> <span class=\"fn\">α</span></span>) <a href=\"./Init/System/Mutex.html#IO.BaseMutex\">IO.BaseMutex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L84-L84","name":"IO.instNonemptyMutex","line":84,"kind":"instance","docLink":"./Init/System/Mutex.html#IO.instNonemptyMutex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.instNonemptyMutex\"><span class=\"name\">IO</span>.<span class=\"name\">instNonemptyMutex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>], <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> (<span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.Mutex\">IO.Mutex</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L83-L83","name":"IO.Mutex.mutex","line":83,"kind":"def","docLink":"./Init/System/Mutex.html#IO.Mutex.mutex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Mutex.mutex\"><span class=\"name\">IO</span>.<span class=\"name\">Mutex</span>.<span class=\"name\">mutex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/System/Mutex.html#IO.Mutex\">IO.Mutex</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/Mutex.html#IO.BaseMutex\">IO.BaseMutex</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L81-L84","name":"IO.Mutex","line":81,"kind":"structure","docLink":"./Init/System/Mutex.html#IO.Mutex","doc":"Mutual exclusion primitive (lock) guarding shared state of type `α`.\n\nThe type `Mutex α` is similar to `IO.Ref α`,\nexcept that concurrent accesses are guarded by a mutex\ninstead of atomic pointer operations and busy-waiting.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Mutex\"><span class=\"name\">IO</span>.<span class=\"name\">Mutex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L69-L72","name":"IO.Condvar.waitUntil","line":69,"kind":"def","docLink":"./Init/System/Mutex.html#IO.Condvar.waitUntil","doc":"Waits on the condition variable until the predicate is true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Condvar.waitUntil\"><span class=\"name\">IO</span>.<span class=\"name\">Condvar</span>.<span class=\"name\">waitUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(condvar : <a href=\"./Init/System/Mutex.html#IO.Condvar\">IO.Condvar</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mutex : <a href=\"./Init/System/Mutex.html#IO.BaseMutex\">IO.BaseMutex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L66-L66","name":"IO.Condvar.notifyAll","line":66,"kind":"opaque","docLink":"./Init/System/Mutex.html#IO.Condvar.notifyAll","doc":"Wakes up all other threads executing `wait`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Condvar.notifyAll\"><span class=\"name\">IO</span>.<span class=\"name\">Condvar</span>.<span class=\"name\">notifyAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(condvar : <a href=\"./Init/System/Mutex.html#IO.Condvar\">IO.Condvar</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L62-L62","name":"IO.Condvar.notifyOne","line":62,"kind":"opaque","docLink":"./Init/System/Mutex.html#IO.Condvar.notifyOne","doc":"Wakes up a single other thread executing `wait`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Condvar.notifyOne\"><span class=\"name\">IO</span>.<span class=\"name\">Condvar</span>.<span class=\"name\">notifyOne</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(condvar : <a href=\"./Init/System/Mutex.html#IO.Condvar\">IO.Condvar</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L58-L58","name":"IO.Condvar.wait","line":58,"kind":"opaque","docLink":"./Init/System/Mutex.html#IO.Condvar.wait","doc":"Waits until another thread calls `notifyOne` or `notifyAll`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Condvar.wait\"><span class=\"name\">IO</span>.<span class=\"name\">Condvar</span>.<span class=\"name\">wait</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(condvar : <a href=\"./Init/System/Mutex.html#IO.Condvar\">IO.Condvar</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mutex : <a href=\"./Init/System/Mutex.html#IO.BaseMutex\">IO.BaseMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L54-L54","name":"IO.Condvar.new","line":54,"kind":"opaque","docLink":"./Init/System/Mutex.html#IO.Condvar.new","doc":"Creates a new condition variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Condvar.new\"><span class=\"name\">IO</span>.<span class=\"name\">Condvar</span>.<span class=\"name\">new</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/Mutex.html#IO.Condvar\">IO.Condvar</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L50-L50","name":"IO.instNonemptyCondvar","line":50,"kind":"instance","docLink":"./Init/System/Mutex.html#IO.instNonemptyCondvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.instNonemptyCondvar\"><span class=\"name\">IO</span>.<span class=\"name\">instNonemptyCondvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/System/Mutex.html#IO.Condvar\">IO.Condvar</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L48-L48","name":"IO.Condvar","line":48,"kind":"def","docLink":"./Init/System/Mutex.html#IO.Condvar","doc":"Condition variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.Condvar\"><span class=\"name\">IO</span>.<span class=\"name\">Condvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L43-L43","name":"IO.BaseMutex.unlock","line":43,"kind":"opaque","docLink":"./Init/System/Mutex.html#IO.BaseMutex.unlock","doc":"Unlocks a `BaseMutex`.\n\nThe current thread must have already locked the mutex.\nUnlocking an unlocked mutex is undefined behavior (inherited from the C++ implementation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.BaseMutex.unlock\"><span class=\"name\">IO</span>.<span class=\"name\">BaseMutex</span>.<span class=\"name\">unlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mutex : <a href=\"./Init/System/Mutex.html#IO.BaseMutex\">IO.BaseMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L34-L34","name":"IO.BaseMutex.lock","line":34,"kind":"opaque","docLink":"./Init/System/Mutex.html#IO.BaseMutex.lock","doc":"Locks a `BaseMutex`.  Waits until no other thread has locked the mutex.\n\nThe current thread must not have already locked the mutex.\nReentrant locking is undefined behavior (inherited from the C++ implementation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.BaseMutex.lock\"><span class=\"name\">IO</span>.<span class=\"name\">BaseMutex</span>.<span class=\"name\">lock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mutex : <a href=\"./Init/System/Mutex.html#IO.BaseMutex\">IO.BaseMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L25-L25","name":"IO.BaseMutex.new","line":25,"kind":"opaque","docLink":"./Init/System/Mutex.html#IO.BaseMutex.new","doc":"Creates a new `BaseMutex`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.BaseMutex.new\"><span class=\"name\">IO</span>.<span class=\"name\">BaseMutex</span>.<span class=\"name\">new</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/Mutex.html#IO.BaseMutex\">IO.BaseMutex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L21-L21","name":"IO.instNonemptyBaseMutex","line":21,"kind":"instance","docLink":"./Init/System/Mutex.html#IO.instNonemptyBaseMutex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.instNonemptyBaseMutex\"><span class=\"name\">IO</span>.<span class=\"name\">instNonemptyBaseMutex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/System/Mutex.html#IO.BaseMutex\">IO.BaseMutex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/System/Mutex.lean#L19-L19","name":"IO.BaseMutex","line":19,"kind":"def","docLink":"./Init/System/Mutex.html#IO.BaseMutex","doc":"Mutual exclusion primitive (a lock).\n\nIf you want to guard shared state, use `Mutex α` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Mutex.html#IO.BaseMutex\"><span class=\"name\">IO</span>.<span class=\"name\">BaseMutex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}