{"name":"Lean.Compiler.LCNF.ToMono","instances":[],"imports":["Init","Lean.Compiler.LCNF.MonoTypes","Lean.Compiler.LCNF.InferType"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L146-L161","name":"Lean.Compiler.LCNF.toMono","line":146,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L138-L144","name":"Lean.Compiler.LCNF.Decl.toMono.go","line":138,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">toMono</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L135-L144","name":"Lean.Compiler.LCNF.Decl.toMono","line":135,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L113-L131","name":"Lean.Compiler.LCNF.Code.toMono","line":113,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Code.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Code.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L100-L111","name":"Lean.Compiler.LCNF.trivialStructToMono","line":100,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.trivialStructToMono","doc":"Eliminate `cases` for trivial structure. See `hasTrivialStructure?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.trivialStructToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">trivialStructToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">Lean.Compiler.LCNF.TrivialStructureInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Lean.Compiler.LCNF.Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L88-L97","name":"Lean.Compiler.LCNF.decToMono","line":88,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.decToMono","doc":"Convert `cases` `Decidable` => `Bool` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.decToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">decToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Lean.Compiler.LCNF.Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.typeName</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Decidable</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L81-L85","name":"Lean.Compiler.LCNF.FunDeclCore.toMono","line":81,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.FunDeclCore.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.FunDeclCore.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L74-L77","name":"Lean.Compiler.LCNF.LetDecl.toMono","line":74,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetDecl.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetDecl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">Lean.Compiler.LCNF.LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L44-L72","name":"Lean.Compiler.LCNF.LetValue.toMono","line":44,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetValue.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetValue.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L35-L42","name":"Lean.Compiler.LCNF.ctorAppToMono","line":35,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ctorAppToMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ctorAppToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ctorAppToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctorInfo : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L26-L33","name":"Lean.Compiler.LCNF.argToMono","line":26,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">argToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L21-L24","name":"Lean.Compiler.LCNF.isTrivialConstructorApp?","line":21,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.isTrivialConstructorApp?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.isTrivialConstructorApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">isTrivialConstructorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L16-L19","name":"Lean.Compiler.LCNF.Param.toMono","line":16,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Param.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Param.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(param : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">Lean.Compiler.LCNF.ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L14-L14","name":"Lean.Compiler.LCNF.ToMonoM","line":14,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Î± : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L12-L12","name":"Lean.Compiler.LCNF.ToMonoM.State.typeParams","line":12,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.typeParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.typeParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">typeParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">Lean.Compiler.LCNF.ToMonoM.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L11-L12","name":"Lean.Compiler.LCNF.ToMonoM.State","line":11,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ToMono.lean#L1-L1","name":"Lean.Compiler.LCNF.ToMonoM.State.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(typeParams : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">Lean.Compiler.LCNF.ToMonoM.State</a></div></div>"}]}