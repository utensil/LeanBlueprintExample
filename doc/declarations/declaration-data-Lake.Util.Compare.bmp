{"name":"Lake.Util.Compare","instances":[{"typeNames":["_builtin_typeu"],"name":"Lake.instEqOfCmpWrtType","className":"Lake.EqOfCmpWrt"},{"typeNames":[],"name":"Lake.instEqOfCmpWrt","className":"Lake.EqOfCmpWrt"},{"typeNames":[],"name":"Lake.instEqOfCmp","className":"Lake.EqOfCmp"},{"typeNames":["Nat","Ord.compare","Nat","instOrdNat"],"name":"Lake.instLawfulCmpEqNatCompareInstOrdNat","className":"Lake.LawfulCmpEq"},{"typeNames":["Fin","Ord.compare","Fin","instOrdFin"],"name":"Lake.instLawfulCmpEqFinCompareInstOrdFin","className":"Lake.LawfulCmpEq"},{"typeNames":["UInt64","Ord.compare","UInt64","instOrdUInt64"],"name":"Lake.instLawfulCmpEqUInt64CompareInstOrdUInt64","className":"Lake.LawfulCmpEq"},{"typeNames":["String","Ord.compare","String","instOrdString"],"name":"Lake.instLawfulCmpEqStringCompareInstOrdString","className":"Lake.LawfulCmpEq"},{"typeNames":["Option","Lake.Option.compareWith"],"name":"Lake.instEqOfCmpOptionCompareWith","className":"Lake.EqOfCmp"},{"typeNames":["Option","Lake.Option.compareWith"],"name":"Lake.instLawfulCmpEqOptionCompareWith","className":"Lake.LawfulCmpEq"},{"typeNames":["Prod","Lake.Prod.compareWith"],"name":"Lake.instEqOfCmpProdCompareWith","className":"Lake.EqOfCmp"},{"typeNames":["Prod","Lake.Prod.compareWith"],"name":"Lake.instLawfulCmpEqProdCompareWith","className":"Lake.LawfulCmpEq"}],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L124-L126","name":"Lake.instLawfulCmpEqProdCompareWith","line":124,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instLawfulCmpEqProdCompareWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instLawfulCmpEqProdCompareWith\"><span class=\"name\">Lake</span>.<span class=\"name\">instLawfulCmpEqProdCompareWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpA : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpB : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpA</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpB</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> (<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>) (<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.Prod.compareWith\">Lake.Prod.compareWith</a> <span class=\"fn\">cmpA</span> <span class=\"fn\">cmpB</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L116-L122","name":"Lake.instEqOfCmpProdCompareWith","line":116,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instEqOfCmpProdCompareWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instEqOfCmpProdCompareWith\"><span class=\"name\">Lake</span>.<span class=\"name\">instEqOfCmpProdCompareWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpA : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpB : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpA</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpB</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> (<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>) (<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.Prod.compareWith\">Lake.Prod.compareWith</a> <span class=\"fn\">cmpA</span> <span class=\"fn\">cmpB</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L111-L114","name":"Lake.Prod.compareWith","line":111,"kind":"def","docLink":"./Lake/Util/Compare.html#Lake.Prod.compareWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.Prod.compareWith\"><span class=\"name\">Lake</span>.<span class=\"name\">Prod</span>.<span class=\"name\">compareWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmpA : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmpB : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L105-L109","name":"Lake.instLawfulCmpEqOptionCompareWith","line":105,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instLawfulCmpEqOptionCompareWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instLawfulCmpEqOptionCompareWith\"><span class=\"name\">Lake</span>.<span class=\"name\">instLawfulCmpEqOptionCompareWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.Option.compareWith\">Lake.Option.compareWith</a> <span class=\"fn\">cmp</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L98-L103","name":"Lake.instEqOfCmpOptionCompareWith","line":98,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instEqOfCmpOptionCompareWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instEqOfCmpOptionCompareWith\"><span class=\"name\">Lake</span>.<span class=\"name\">instEqOfCmpOptionCompareWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.Option.compareWith\">Lake.Option.compareWith</a> <span class=\"fn\">cmp</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L92-L96","name":"Lake.Option.compareWith","line":92,"kind":"def","docLink":"./Lake/Util/Compare.html#Lake.Option.compareWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.Option.compareWith\"><span class=\"name\">Lake</span>.<span class=\"name\">Option</span>.<span class=\"name\">compareWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L87-L89","name":"Lake.instLawfulCmpEqStringCompareInstOrdString","line":87,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instLawfulCmpEqStringCompareInstOrdString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instLawfulCmpEqStringCompareInstOrdString\"><span class=\"name\">Lake</span>.<span class=\"name\">instLawfulCmpEqStringCompareInstOrdString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">compare</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L84-L85","name":"Lake.String.lt_irrefl","line":84,"kind":"theorem","docLink":"./Lake/Util/Compare.html#Lake.String.lt_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.String.lt_irrefl\"><span class=\"name\">Lake</span>.<span class=\"name\">String</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L79-L82","name":"Lake.List.lt_irrefl","line":79,"kind":"theorem","docLink":"./Lake/Util/Compare.html#Lake.List.lt_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.List.lt_irrefl\"><span class=\"name\">Lake</span>.<span class=\"name\">List</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(irrefl_α : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L75-L77","name":"Lake.instLawfulCmpEqUInt64CompareInstOrdUInt64","line":75,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instLawfulCmpEqUInt64CompareInstOrdUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instLawfulCmpEqUInt64CompareInstOrdUInt64\"><span class=\"name\">Lake</span>.<span class=\"name\">instLawfulCmpEqUInt64CompareInstOrdUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <span class=\"fn\">compare</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L71-L73","name":"Lake.instLawfulCmpEqFinCompareInstOrdFin","line":71,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instLawfulCmpEqFinCompareInstOrdFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instLawfulCmpEqFinCompareInstOrdFin\"><span class=\"name\">Lake</span>.<span class=\"name\">instLawfulCmpEqFinCompareInstOrdFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) <span class=\"fn\">compare</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L66-L69","name":"Lake.Fin.eq_of_compare","line":66,"kind":"theorem","docLink":"./Lake/Util/Compare.html#Lake.Fin.eq_of_compare","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.Fin.eq_of_compare\"><span class=\"name\">Lake</span>.<span class=\"name\">Fin</span>.<span class=\"name\">eq_of_compare</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">n</span> <span class=\"fn\">n'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L62-L64","name":"Lake.instLawfulCmpEqNatCompareInstOrdNat","line":62,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instLawfulCmpEqNatCompareInstOrdNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instLawfulCmpEqNatCompareInstOrdNat\"><span class=\"name\">Lake</span>.<span class=\"name\">instLawfulCmpEqNatCompareInstOrdNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">compare</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L58-L60","name":"Lake.compareOfLessAndEq_rfl","line":58,"kind":"theorem","docLink":"./Lake/Util/Compare.html#Lake.compareOfLessAndEq_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.compareOfLessAndEq_rfl\"><span class=\"name\">Lake</span>.<span class=\"name\">compareOfLessAndEq_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\">a</span></span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lt_irrefl : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L51-L56","name":"Lake.eq_of_compareOfLessAndEq","line":51,"kind":"theorem","docLink":"./Lake/Util/Compare.html#Lake.eq_of_compareOfLessAndEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.eq_of_compareOfLessAndEq\"><span class=\"name\">Lake</span>.<span class=\"name\">eq_of_compareOfLessAndEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\">a'</span></span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L46-L47","name":"Lake.instEqOfCmp","line":46,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instEqOfCmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instEqOfCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">instEqOfCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt\">Lake.EqOfCmpWrt</a> <span class=\"fn\">α</span> (<span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\">a</span></span>) <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L43-L44","name":"Lake.instEqOfCmpWrt","line":43,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instEqOfCmpWrt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instEqOfCmpWrt\"><span class=\"name\">Lake</span>.<span class=\"name\">instEqOfCmpWrt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} → <span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>] → <span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt\">Lake.EqOfCmpWrt</a> <span class=\"fn\">α</span> <span class=\"fn\">f</span> <span class=\"fn\">cmp</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L41-L41","name":"Lake.instEqOfCmpWrtType","line":41,"kind":"instance","docLink":"./Lake/Util/Compare.html#Lake.instEqOfCmpWrtType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.instEqOfCmpWrtType\"><span class=\"name\">Lake</span>.<span class=\"name\">instEqOfCmpWrtType</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt\">Lake.EqOfCmpWrt</a> <span class=\"fn\">α</span> (<span class=\"fn\">fun <span class=\"fn\">x</span> =&gt <span class=\"fn\">α</span></span>) <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L37-L37","name":"Lake.EqOfCmpWrt.eq_of_cmp_wrt","line":37,"kind":"def","docLink":"./Lake/Util/Compare.html#Lake.EqOfCmpWrt.eq_of_cmp_wrt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt.eq_of_cmp_wrt\"><span class=\"name\">Lake</span>.<span class=\"name\">EqOfCmpWrt</span>.<span class=\"name\">eq_of_cmp_wrt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt\">Lake.EqOfCmpWrt</a> <span class=\"fn\">α</span> <span class=\"fn\">f</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L36-L36","name":"Lake.EqOfCmpWrt.mk","line":36,"kind":"ctor","docLink":"./Lake/Util/Compare.html#Lake.EqOfCmpWrt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">EqOfCmpWrt</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq_of_cmp_wrt : <span class=\"fn\">∀ {<span class=\"fn\">a </span>a' : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a'</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt\">Lake.EqOfCmpWrt</a> <span class=\"fn\">α</span> <span class=\"fn\">f</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L36-L37","name":"Lake.EqOfCmpWrt","line":36,"kind":"class","docLink":"./Lake/Util/Compare.html#Lake.EqOfCmpWrt","doc":"Proof that the equality of a compare function corresponds\nto propositional equality with respect to a given function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt\"><span class=\"name\">Lake</span>.<span class=\"name\">EqOfCmpWrt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L29-L30","name":"Lake.cmp_iff_eq","line":29,"kind":"theorem","docLink":"./Lake/Util/Compare.html#Lake.cmp_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.cmp_iff_eq\"><span class=\"name\">Lake</span>.<span class=\"name\">cmp_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L23-L23","name":"Lake.LawfulCmpEq.cmp_rfl","line":23,"kind":"def","docLink":"./Lake/Util/Compare.html#Lake.LawfulCmpEq.cmp_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq.cmp_rfl\"><span class=\"name\">Lake</span>.<span class=\"name\">LawfulCmpEq</span>.<span class=\"name\">cmp_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L22-L22","name":"Lake.LawfulCmpEq.mk","line":22,"kind":"ctor","docLink":"./Lake/Util/Compare.html#Lake.LawfulCmpEq.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">LawfulCmpEq</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toEqOfCmp : <span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp_rfl : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\">Lake.LawfulCmpEq</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L22-L23","name":"Lake.LawfulCmpEq","line":22,"kind":"class","docLink":"./Lake/Util/Compare.html#Lake.LawfulCmpEq","doc":"Proof that the equality of a compare function corresponds\nto propositional equality and vice versa.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.LawfulCmpEq\"><span class=\"name\">Lake</span>.<span class=\"name\">LawfulCmpEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">EqOfCmp</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L14-L14","name":"Lake.EqOfCmp.eq_of_cmp","line":14,"kind":"def","docLink":"./Lake/Util/Compare.html#Lake.EqOfCmp.eq_of_cmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.EqOfCmp.eq_of_cmp\"><span class=\"name\">Lake</span>.<span class=\"name\">EqOfCmp</span>.<span class=\"name\">eq_of_cmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L13-L13","name":"Lake.EqOfCmp.mk","line":13,"kind":"ctor","docLink":"./Lake/Util/Compare.html#Lake.EqOfCmp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.EqOfCmp.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">EqOfCmp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq_of_cmp : <span class=\"fn\">∀ {<span class=\"fn\">a </span>a' : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\">Lake.EqOfCmp</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Compare.lean#L13-L14","name":"Lake.EqOfCmp","line":13,"kind":"class","docLink":"./Lake/Util/Compare.html#Lake.EqOfCmp","doc":"Proof that the equality of a compare function corresponds\nto propositional equality.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Compare.html#Lake.EqOfCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">EqOfCmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}