{"name":"Lean.Elab.Deriving.Basic","instances":[],"imports":["Init","Lean.Elab.Command"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L130-L131","name":"Lean.Elab.DerivingClassView.applyHandlers","line":130,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.applyHandlers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.applyHandlers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">applyHandlers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(view : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">Lean.Elab.DerivingClassView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L120-L128","name":"Lean.Elab.getOptDerivingClasses","line":120,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.getOptDerivingClasses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.getOptDerivingClasses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getOptDerivingClasses</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">Lean.MonadResolveName</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(optDeriving : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">Lean.Elab.DerivingClassView</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L118-L118","name":"Lean.Elab.DerivingClassView.args?","line":118,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.args?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.args?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">args?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">Lean.Elab.DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.structInst</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L117-L117","name":"Lean.Elab.DerivingClassView.className","line":117,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.className","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.className\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">className</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">Lean.Elab.DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L116-L116","name":"Lean.Elab.DerivingClassView.ref","line":116,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">Lean.Elab.DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L115-L118","name":"Lean.Elab.DerivingClassView","line":115,"kind":"structure","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L100-L113","name":"Lean.Elab.elabDeriving","line":100,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.elabDeriving","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.elabDeriving\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">elabDeriving</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L87-L94","name":"Lean.Elab.applyDerivingHandlers","line":87,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.applyDerivingHandlers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.applyDerivingHandlers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">applyDerivingHandlers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(className : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(typeNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.structInst</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L84-L85","name":"Lean.Elab.defaultHandler","line":84,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.defaultHandler","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.defaultHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">defaultHandler</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(className : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(typeNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L81-L82","name":"Lean.Elab.registerDerivingHandler","line":81,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandler","doc":"Like `registerBuiltinDerivingHandlerWithArgs` but ignoring any `with` argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">registerDerivingHandler</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(className : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(handler : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandlerNoArgs\">Lean.Elab.DerivingHandlerNoArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L73-L78","name":"Lean.Elab.registerDerivingHandlerWithArgs","line":73,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandlerWithArgs","doc":"A `DerivingHandler` is called on the fully qualified names of all types it is running for\nas well as the syntax of a `with` argument, if present.\n\nFor example, `deriving instance Foo with fooArgs for Bar, Baz` invokes\n``fooHandler #[`Bar, `Baz] `(fooArgs)``. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandlerWithArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">registerDerivingHandlerWithArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(className : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(handler : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">Lean.Elab.DerivingHandler</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L66-L66","name":"Lean.Elab.derivingHandlersRef","line":66,"kind":"opaque","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.derivingHandlersRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.derivingHandlersRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">derivingHandlersRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> (<span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lake.NameMap</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">Lean.Elab.DerivingHandler</a></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L64-L64","name":"Lean.Elab.DerivingHandlerNoArgs","line":64,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandlerNoArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandlerNoArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingHandlerNoArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L63-L63","name":"Lean.Elab.DerivingHandler","line":63,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingHandler</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L41-L59","name":"Lean.Elab.Term.processDefDeriving","line":41,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.processDefDeriving","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.processDefDeriving\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">processDefDeriving</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(className : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L18-L18","name":"Lean.Elab.Term.MkInstResult.outParams","line":18,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.outParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.outParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span>.<span class=\"name\">outParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\">Lean.Elab.Term.MkInstResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L17-L17","name":"Lean.Elab.Term.MkInstResult.instType","line":17,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.instType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.instType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span>.<span class=\"name\">instType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\">Lean.Elab.Term.MkInstResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L16-L16","name":"Lean.Elab.Term.MkInstResult.instVal","line":16,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.instVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.instVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span>.<span class=\"name\">instVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\">Lean.Elab.Term.MkInstResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L15-L18","name":"Lean.Elab.Term.MkInstResult","line":15,"kind":"structure","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult","doc":"Result for `mkInst?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L1-L1","name":"Lean.Elab.DerivingClassView.mk","line":1,"kind":"ctor","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(className : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.structInst</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">Lean.Elab.DerivingClassView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Deriving/Basic.lean#L1-L1","name":"Lean.Elab.Term.MkInstResult.mk","line":1,"kind":"ctor","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(instVal : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(instType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(outParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\">Lean.Elab.Term.MkInstResult</a></div></div>"}]}