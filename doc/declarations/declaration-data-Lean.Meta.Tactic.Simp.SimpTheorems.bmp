{"name":"Lean.Meta.Tactic.Simp.SimpTheorems","instances":[{"typeNames":["Lean.Meta.Origin"],"name":"Lean.Meta.instInhabitedOrigin","className":"Inhabited"},{"typeNames":["Lean.Meta.Origin"],"name":"Lean.Meta.instReprOrigin","className":"Repr"},{"typeNames":["Lean.Meta.Origin"],"name":"Lean.Meta.instBEqOrigin","className":"BEq"},{"typeNames":["Lean.Meta.Origin"],"name":"Lean.Meta.instHashableOrigin","className":"Hashable"},{"typeNames":["Lean.Meta.SimpTheorem"],"name":"Lean.Meta.instInhabitedSimpTheorem","className":"Inhabited"},{"typeNames":["Lean.Meta.SimpTheorem"],"name":"Lean.Meta.instToFormatSimpTheorem","className":"Std.ToFormat"},{"typeNames":["Lean.Meta.SimpTheorem"],"name":"Lean.Meta.instBEqSimpTheorem","className":"BEq"},{"typeNames":["Lean.Meta.SimpTheorems"],"name":"Lean.Meta.instInhabitedSimpTheorems","className":"Inhabited"},{"typeNames":["Lean.Meta.SimpEntry"],"name":"Lean.Meta.instInhabitedSimpEntry","className":"Inhabited"}],"imports":["Init","Lean.ScopedEnvExtension","Lean.Util.Recognizers","Lean.Meta.DiscrTree","Lean.Meta.AppBuilder","Lean.Meta.Eqns","Lean.Meta.Tactic.AuxLemma","Lean.DocString"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L469-L475","name":"Lean.Parser.Command.registerSimpAttr","line":469,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Parser.Command.registerSimpAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Parser.Command.registerSimpAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Command</span>.<span class=\"name\">registerSimpAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L466-L467","name":"Lean.Meta.SimpTheoremsArray.isDeclToUnfold","line":466,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.isDeclToUnfold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.isDeclToUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheoremsArray</span>.<span class=\"name\">isDeclToUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmsArray : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L463-L464","name":"Lean.Meta.SimpTheoremsArray.isErased","line":463,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.isErased","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.isErased\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheoremsArray</span>.<span class=\"name\">isErased</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmsArray : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L460-L461","name":"Lean.Meta.SimpTheoremsArray.eraseTheorem","line":460,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.eraseTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.eraseTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheoremsArray</span>.<span class=\"name\">eraseTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmsArray : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L453-L458","name":"Lean.Meta.SimpTheoremsArray.addTheorem","line":453,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.addTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.addTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheoremsArray</span>.<span class=\"name\">addTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmsArray : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Lean.Meta.SimpTheoremsArray</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L451-L451","name":"Lean.Meta.SimpTheoremsArray","line":451,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheoremsArray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L440-L449","name":"Lean.Meta.SimpTheorems.addDeclToUnfold","line":440,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addDeclToUnfold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addDeclToUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">addDeclToUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L433-L438","name":"Lean.Meta.SimpTheorems.add","line":433,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.add","doc":"Auxiliary method for adding a local simp theorem to a `SimpTheorems` datastructure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(post : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prio : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1000</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L428-L430","name":"Lean.Meta.mkSimpTheorems","line":428,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpTheorems","doc":"Auxiliary method for creating simp theorems from a proof term `val`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkSimpTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(post : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prio : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1000</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L410-L419","name":"Lean.Meta.SimpTheorem.getValue","line":410,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.getValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.getValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">getValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(simpThm : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L405-L408","name":"Lean.Meta.SimpTheorems.addConst","line":405,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addConst","doc":"Auxiliary method for adding a global declaration to a `SimpTheorems` datastructure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">addConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(post : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prio : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1000</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L401-L402","name":"Lean.Meta.getSimpTheorems","line":401,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.getSimpTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.getSimpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getSimpTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L398-L399","name":"Lean.Meta.getSimpExtension?","line":398,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.getSimpExtension?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.getSimpExtension?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getSimpExtension?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(attrName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L396-L396","name":"Lean.Meta.simpExtension","line":396,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.simpExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.simpExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L389-L394","name":"Lean.Meta.registerSimpAttr","line":389,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.registerSimpAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.registerSimpAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">registerSimpAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(attrName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrDescr : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ref : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#_auto._@.Lean.Meta.Tactic.Simp.SimpTheorems._hyg.6363\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L387-L387","name":"Lean.Meta.simpExtensionMapRef","line":387,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.simpExtensionMapRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.simpExtensionMapRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpExtensionMapRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtensionMap\">Lean.Meta.SimpExtensionMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L385-L385","name":"Lean.Meta.SimpExtensionMap","line":385,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtensionMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtensionMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpExtensionMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L374-L383","name":"Lean.Meta.mkSimpExt","line":374,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkSimpExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#_auto._@.Lean.Meta.Tactic.Simp.SimpTheorems._hyg.6215\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L342-L372","name":"Lean.Meta.mkSimpAttr","line":342,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkSimpAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(attrName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrDescr : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ext : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ref : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#_auto._@.Lean.Meta.Tactic.Simp.SimpTheorems._hyg.5448\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L337-L340","name":"Lean.Meta.addSimpTheorem","line":337,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addSimpTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ext : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(post : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inv : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrKind : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">Lean.AttributeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prio : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L334-L335","name":"Lean.Meta.SimpExtension.getTheorems","line":334,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension.getTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension.getTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpExtension</span>.<span class=\"name\">getTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ext : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L332-L332","name":"Lean.Meta.SimpExtension","line":332,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L330-L330","name":"Lean.Meta.instInhabitedSimpEntry","line":330,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedSimpEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L329-L329","name":"Lean.Meta.SimpEntry.toUnfoldThms","line":329,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.toUnfoldThms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.toUnfoldThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpEntry</span>.<span class=\"name\">toUnfoldThms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span> → <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L328-L328","name":"Lean.Meta.SimpEntry.toUnfold","line":328,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.toUnfold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.toUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpEntry</span>.<span class=\"name\">toUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L327-L327","name":"Lean.Meta.SimpEntry.thm","line":327,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.thm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.thm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpEntry</span>.<span class=\"name\">thm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a> → <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Lean.Meta.SimpEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L326-L330","name":"Lean.Meta.SimpEntry","line":326,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L198-L205","name":"Lean.Meta.SimpTheorems.erase","line":198,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L187-L196","name":"Lean.Meta.SimpTheorems.eraseCore","line":187,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.eraseCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.eraseCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">eraseCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L184-L185","name":"Lean.Meta.SimpTheorems.registerDeclToUnfoldThms","line":184,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.registerDeclToUnfoldThms","doc":"Register the equational theorems for the given definition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.registerDeclToUnfoldThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">registerDeclToUnfoldThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eqThms : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L180-L181","name":"Lean.Meta.SimpTheorems.isLemma","line":180,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.isLemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.isLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">isLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L177-L178","name":"Lean.Meta.SimpTheorems.isDeclToUnfold","line":177,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.isDeclToUnfold","doc":"Return `true` if `declName` is tagged to be unfolded using `unfoldDefinition?` (i.e., without using equational theorems). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.isDeclToUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">isDeclToUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L173-L174","name":"Lean.Meta.SimpTheorems.addDeclToUnfoldCore","line":173,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addDeclToUnfoldCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addDeclToUnfoldCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">addDeclToUnfoldCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L170-L171","name":"Lean.Meta.addSimpTheoremEntry.updateLemmaNames","line":170,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheoremEntry.updateLemmaNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheoremEntry.updateLemmaNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addSimpTheoremEntry</span>.<span class=\"name\">updateLemmaNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L164-L171","name":"Lean.Meta.addSimpTheoremEntry","line":164,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheoremEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheoremEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addSimpTheoremEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L162-L162","name":"Lean.Meta.instInhabitedSimpTheorems","line":162,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedSimpTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L161-L161","name":"Lean.Meta.SimpTheorems.toUnfoldThms","line":161,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.toUnfoldThms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.toUnfoldThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">toUnfoldThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L160-L160","name":"Lean.Meta.SimpTheorems.erased","line":160,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.erased","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L159-L159","name":"Lean.Meta.SimpTheorems.toUnfold","line":159,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.toUnfold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.toUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">toUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L158-L158","name":"Lean.Meta.SimpTheorems.lemmaNames","line":158,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.lemmaNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.lemmaNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">lemmaNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L157-L157","name":"Lean.Meta.SimpTheorems.post","line":157,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.post","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.post\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">post</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremTree\">Lean.Meta.SimpTheoremTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L156-L156","name":"Lean.Meta.SimpTheorems.pre","line":156,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.pre","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.pre\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">pre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremTree\">Lean.Meta.SimpTheoremTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L155-L162","name":"Lean.Meta.SimpTheorems","line":155,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L153-L153","name":"Lean.Meta.SimpTheoremTree","line":153,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheoremTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L150-L151","name":"Lean.Meta.instBEqSimpTheorem","line":150,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instBEqSimpTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instBEqSimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqSimpTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L144-L148","name":"Lean.Meta.ppSimpTheorem","line":144,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.ppSimpTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.ppSimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ppSimpTheorem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L138-L142","name":"Lean.Meta.ppOrigin","line":138,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.ppOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.ppOrigin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ppOrigin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L131-L136","name":"Lean.Meta.instToFormatSimpTheorem","line":131,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instToFormatSimpTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instToFormatSimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instToFormatSimpTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L125-L129","name":"Lean.Meta.isRflProof","line":125,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isRflProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L120-L122","name":"Lean.Meta.isRflTheorem","line":120,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isRflTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L98-L118","name":"Lean.Meta.isRflProofCore","line":98,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflProofCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflProofCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isRflProofCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L95-L95","name":"Lean.Meta.instInhabitedSimpTheorem","line":95,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedSimpTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L94-L94","name":"Lean.Meta.SimpTheorem.rfl","line":94,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.rfl","doc":"`rfl` is true if `proof` is by `Eq.refl` or `rfl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.rfl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">rfl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L92-L92","name":"Lean.Meta.SimpTheorem.origin","line":92,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.origin","doc":"`origin` is mainly relevant for producing trace messages.\nIt is also viewed an `id` used to \"erase\" `simp` theorems from `SimpTheorems`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.origin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">origin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L87-L87","name":"Lean.Meta.SimpTheorem.perm","line":87,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.perm","doc":"`perm` is true if lhs and rhs are identical modulo permutation of variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.perm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">perm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L85-L85","name":"Lean.Meta.SimpTheorem.post","line":85,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.post","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.post\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">post</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L84-L84","name":"Lean.Meta.SimpTheorem.priority","line":84,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.priority","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.priority\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">priority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L83-L83","name":"Lean.Meta.SimpTheorem.proof","line":83,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L82-L82","name":"Lean.Meta.SimpTheorem.levelParams","line":82,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.levelParams","doc":"It stores universe parameter names for universe polymorphic proofs.\nRecall that it is non-empty only when we elaborate an expression provided by the user.\nWhen `proof` is just a constant, we can use the universe parameter names stored in the declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.levelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">levelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L76-L76","name":"Lean.Meta.SimpTheorem.keys","line":76,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.keys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremKey\">Lean.Meta.SimpTheoremKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L75-L95","name":"Lean.Meta.SimpTheorem","line":75,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem","doc":"The fields `levelParams` and `proof` are used to encode the proof of the simp theorem.\nIf the `proof` is a global declaration `c`, we store `Expr.const c []` at `proof` without the universe levels, and `levelParams` is set to `#[]`\nWhen using the lemma, we create fresh universe metavariables.\nMotivation: most simp theorems are global declarations, and this approach is faster and saves memory.\n\nThe field `levelParams` is not empty only when we elaborate an expression provided by the user, and it contains universe metavariables.\nThen, we use `abstractMVars` to abstract the universe metavariables and create new fresh universe parameters that are stored at the field `levelParams`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L64-L64","name":"Lean.Meta.SimpTheoremKey","line":64,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheoremKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L51-L51","name":"Lean.Meta.instHashableOrigin","line":51,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instHashableOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instHashableOrigin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instHashableOrigin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L50-L50","name":"Lean.Meta.instBEqOrigin","line":50,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instBEqOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instBEqOrigin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqOrigin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L44-L48","name":"Lean.Meta.Origin.key","line":44,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.key","doc":"A unique identifier corresponding to the origin. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Origin</span>.<span class=\"name\">key</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L41-L41","name":"Lean.Meta.instReprOrigin","line":41,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instReprOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instReprOrigin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprOrigin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L41-L41","name":"Lean.Meta.instInhabitedOrigin","line":41,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedOrigin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedOrigin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedOrigin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L35-L40","name":"Lean.Meta.Origin.other","line":35,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.other","doc":"Some other origin. `name` should not collide with the other types\nfor erasure to work correctly, and simp trace will ignore this lemma.\nThe other origins should be preferred if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Origin</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L29-L34","name":"Lean.Meta.Origin.stx","line":29,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.stx","doc":"A proof term provided directly to a call to `simp [ref, ...]` where `ref`\nis the provided simp argument (of kind `Parser.Tactic.simpLemma`).\nThe `id` is a unique identifier for the call.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Origin</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L22-L28","name":"Lean.Meta.Origin.fvar","line":22,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.fvar","doc":"A local hypothesis.\nWhen `contextual := true` is enabled, this fvar may exist in an extension\nof the current local context; it will not be used for rewriting by simp once\nit is out of scope but it may end up in the `usedSimps` trace.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Origin</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L20-L21","name":"Lean.Meta.Origin.decl","line":20,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.decl","doc":"A global declaration in the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Origin</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L19-L41","name":"Lean.Meta.Origin","line":19,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin","doc":"An `Origin` is an identifier for simp theorems which indicates roughly\nwhat action the user took which lead to this theorem existing in the simp set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Origin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L1-L1","name":"Lean.Meta.SimpTheorems.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremTree\">Lean.Meta.SimpTheoremTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(post : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremTree\">Lean.Meta.SimpTheoremTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lemmaNames : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toUnfold : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(erased : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toUnfoldThms : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Lean.Meta.SimpTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L1-L1","name":"Lean.Meta.SimpTheorem.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremKey\">Lean.Meta.SimpTheoremKey</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(priority : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(post : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(perm : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(origin : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rfl : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a></div></div>"}]}