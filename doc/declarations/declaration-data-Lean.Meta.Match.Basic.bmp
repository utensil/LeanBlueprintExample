{"name":"Lean.Meta.Match.Basic","instances":[{"typeNames":["Lean.Meta.Match.Pattern"],"name":"Lean.Meta.Match.instInhabitedPattern","className":"Inhabited"},{"typeNames":["Lean.Meta.Match.Alt"],"name":"Lean.Meta.Match.instInhabitedAlt","className":"Inhabited"},{"typeNames":["Lean.Meta.Match.Problem"],"name":"Lean.Meta.Match.instInhabitedProblem","className":"Inhabited"}],"imports":["Init","Lean.Meta.Check","Lean.Meta.CollectFVars","Lean.Meta.Match.MatcherInfo","Lean.Meta.Match.CaseArraySizes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L332-L360","name":"Lean.Meta.Match.toPattern","line":332,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.toPattern","doc":"Convert a expression occurring as the argument of a `match` motive application back into a `Pattern`\nFor example, we can use this method to convert `x::y::xs` at\n```\n...\n(motive : List Nat → Sort u_1) (xs : List Nat) (h_1 : (x y : Nat) → (xs : List Nat) → motive (x :: y :: xs))\n...\n```\ninto a pattern object\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.toPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">toPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L320-L320","name":"Lean.Meta.Match.MatcherResult.addMatcher","line":320,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.addMatcher","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.addMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MatcherResult</span>.<span class=\"name\">addMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">Lean.Meta.Match.MatcherResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L319-L319","name":"Lean.Meta.Match.MatcherResult.unusedAltIdxs","line":319,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.unusedAltIdxs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.unusedAltIdxs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MatcherResult</span>.<span class=\"name\">unusedAltIdxs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">Lean.Meta.Match.MatcherResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L318-L318","name":"Lean.Meta.Match.MatcherResult.counterExamples","line":318,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.counterExamples","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.counterExamples\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MatcherResult</span>.<span class=\"name\">counterExamples</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">Lean.Meta.Match.MatcherResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.CounterExample\">Lean.Meta.Match.CounterExample</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L317-L317","name":"Lean.Meta.Match.MatcherResult.matcher","line":317,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.matcher","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.matcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MatcherResult</span>.<span class=\"name\">matcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">Lean.Meta.Match.MatcherResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L316-L320","name":"Lean.Meta.Match.MatcherResult","line":316,"kind":"structure","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MatcherResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L313-L314","name":"Lean.Meta.Match.counterExamplesToMessageData","line":313,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.counterExamplesToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.counterExamplesToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">counterExamplesToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cexs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.CounterExample\">Lean.Meta.Match.CounterExample</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L310-L311","name":"Lean.Meta.Match.counterExampleToMessageData","line":310,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.counterExampleToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.counterExampleToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">counterExampleToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cex : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.CounterExample\">Lean.Meta.Match.CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L308-L308","name":"Lean.Meta.Match.CounterExample","line":308,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.CounterExample","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.CounterExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">CounterExample</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L302-L306","name":"Lean.Meta.Match.Problem.toMessageData","line":302,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Problem</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L299-L300","name":"Lean.Meta.Match.withGoalOf","line":299,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.withGoalOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.withGoalOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">withGoalOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L297-L297","name":"Lean.Meta.Match.instInhabitedProblem","line":297,"kind":"instance","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedProblem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedProblem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">instInhabitedProblem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L296-L296","name":"Lean.Meta.Match.Problem.examples","line":296,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.examples","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.examples\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Problem</span>.<span class=\"name\">examples</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L295-L295","name":"Lean.Meta.Match.Problem.alts","line":295,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.alts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Problem</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L294-L294","name":"Lean.Meta.Match.Problem.vars","line":294,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.vars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Problem</span>.<span class=\"name\">vars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L293-L293","name":"Lean.Meta.Match.Problem.mvarId","line":293,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Problem</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L292-L297","name":"Lean.Meta.Match.Problem","line":292,"kind":"structure","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Problem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L289-L290","name":"Lean.Meta.Match.examplesToMessageData","line":289,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.examplesToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.examplesToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">examplesToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cex : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L279-L285","name":"Lean.Meta.Match.Example.toMessageData","line":279,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L273-L277","name":"Lean.Meta.Match.Example.varsToUnderscore","line":273,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.varsToUnderscore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.varsToUnderscore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">varsToUnderscore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a> → <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L264-L271","name":"Lean.Meta.Match.Example.applyFVarSubst","line":264,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.applyFVarSubst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.applyFVarSubst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">applyFVarSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a> → <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L258-L262","name":"Lean.Meta.Match.Example.replaceFVarId","line":258,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.replaceFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.replaceFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">replaceFVarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ex : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a> → <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L254-L254","name":"Lean.Meta.Match.Example.arrayLit","line":254,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.arrayLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.arrayLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">arrayLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span> → <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L253-L253","name":"Lean.Meta.Match.Example.val","line":253,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L252-L252","name":"Lean.Meta.Match.Example.ctor","line":252,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span> → <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L251-L251","name":"Lean.Meta.Match.Example.underscore","line":251,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.underscore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.underscore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">underscore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L250-L250","name":"Lean.Meta.Match.Example.var","line":250,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L249-L254","name":"Lean.Meta.Match.Example","line":249,"kind":"inductive","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Example</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L236-L245","name":"Lean.Meta.Match.Alt.checkAndReplaceFVarId","line":236,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.checkAndReplaceFVarId","doc":"Similar to `checkAndReplaceFVarId`, but ensures type of `v` is definitionally equal to type of `fvarId`.\n  This extra check is necessary when performing dependent elimination and inaccessible terms have been used.\n  For example, consider the following code fragment:\n\n```\ninductive Vec (α : Type u) : Nat → Type u where\n  | nil : Vec α 0\n  | cons {n} (head : α) (tail : Vec α n) : Vec α (n+1)\n\ninductive VecPred {α : Type u} (P : α → Prop) : {n : Nat} → Vec α n → Prop where\n  | nil   : VecPred P Vec.nil\n  | cons  {n : Nat} {head : α} {tail : Vec α n} : P head → VecPred P tail → VecPred P (Vec.cons head tail)\n\ntheorem ex {α : Type u} (P : α → Prop) : {n : Nat} → (v : Vec α (n+1)) → VecPred P v → Exists P\n  | _, Vec.cons head _, VecPred.cons h (w : VecPred P Vec.nil) => ⟨head, h⟩\n```\nRecall that `_` in a pattern can be elaborated into pattern variable or an inaccessible term.\nThe elaborator uses an inaccessible term when typing constraints restrict its value.\nThus, in the example above, the `_` at `Vec.cons head _` becomes the inaccessible pattern `.(Vec.nil)`\nbecause the type ascription `(w : VecPred P Vec.nil)` propagates typing constraints that restrict its value to be `Vec.nil`.\nAfter elaboration the alternative becomes:\n```\n  | .(0), @Vec.cons .(α) .(0) head .(Vec.nil), @VecPred.cons .(α) .(P) .(0) .(head) .(Vec.nil) h w => ⟨head, h⟩\n```\nwhere\n```\n(head : α), (h: P head), (w : VecPred P Vec.nil)\n```\nThen, when we process this alternative in this module, the following check will detect that\n`w` has type `VecPred P Vec.nil`, when it is supposed to have type `VecPred P tail`.\nNote that if we had written\n```\ntheorem ex {α : Type u} (P : α → Prop) : {n : Nat} → (v : Vec α (n+1)) → VecPred P v → Exists P\n  | _, Vec.cons head Vec.nil, VecPred.cons h (w : VecPred P Vec.nil) => ⟨head, h⟩\n```\nwe would get the easier to digest error message\n```\nmissing cases:\n_, (Vec.cons _ _ (Vec.cons _ _ _)), _\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.checkAndReplaceFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">checkAndReplaceFVarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alt : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L191-L192","name":"Lean.Meta.Match.Alt.isLocalDecl","line":191,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.isLocalDecl","doc":"Return `true` if `fvarId` is one of the alternative pattern variables "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.isLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">isLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alt : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L181-L188","name":"Lean.Meta.Match.Alt.replaceFVarId","line":181,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.replaceFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.replaceFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">replaceFVarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alt : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L174-L179","name":"Lean.Meta.Match.Alt.applyFVarSubst","line":174,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.applyFVarSubst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.applyFVarSubst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">applyFVarSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alt : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L166-L172","name":"Lean.Meta.Match.Alt.toMessageData","line":166,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(alt : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L162-L162","name":"Lean.Meta.Match.instInhabitedAlt","line":162,"kind":"instance","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">instInhabitedAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L161-L161","name":"Lean.Meta.Match.Alt.cnstrs","line":161,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.cnstrs","doc":"Pending constraints `lhs ≋ rhs` that need to be solved before the alternative\nis considered acceptable. We generate them when processing inaccessible patterns.\nNote that `lhs` and `rhs` often have different types.\nAfter we perform additional case analysis, their types become definitionally equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.cnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">cnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L154-L154","name":"Lean.Meta.Match.Alt.patterns","line":154,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.patterns","doc":"Alternative patterns.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.patterns\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">patterns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L150-L150","name":"Lean.Meta.Match.Alt.fvarDecls","line":150,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.fvarDecls","doc":"Alternative pattern variables.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.fvarDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">fvarDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L146-L146","name":"Lean.Meta.Match.Alt.rhs","line":146,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.rhs","doc":"Right-hand-side of the alternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L142-L142","name":"Lean.Meta.Match.Alt.idx","line":142,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.idx","doc":"Orginal alternative index. Alternatives can be split, this index is the original\nposition of the alternative that generated this one.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L137-L137","name":"Lean.Meta.Match.Alt.ref","line":137,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.ref","doc":"`Syntax` object for providing position information "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L135-L162","name":"Lean.Meta.Match.Alt","line":135,"kind":"structure","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt","doc":"`Match` alternative "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L128-L132","name":"Lean.Meta.Match.instantiateAltLHSMVars","line":128,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instantiateAltLHSMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instantiateAltLHSMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">instantiateAltLHSMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(altLHS : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L124-L126","name":"Lean.Meta.Match.AltLHS.collectFVars","line":124,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.collectFVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.collectFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">AltLHS</span>.<span class=\"name\">collectFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(altLHS : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Util/CollectFVars.html#Lean.CollectFVars.State\">Lean.CollectFVars.State</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L122-L122","name":"Lean.Meta.Match.AltLHS.patterns","line":122,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.patterns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.patterns\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">AltLHS</span>.<span class=\"name\">patterns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L121-L121","name":"Lean.Meta.Match.AltLHS.fvarDecls","line":121,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.fvarDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.fvarDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">AltLHS</span>.<span class=\"name\">fvarDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L120-L120","name":"Lean.Meta.Match.AltLHS.ref","line":120,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">AltLHS</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L119-L122","name":"Lean.Meta.Match.AltLHS","line":119,"kind":"structure","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">AltLHS</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L111-L117","name":"Lean.Meta.Match.instantiatePatternMVars","line":111,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instantiatePatternMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instantiatePatternMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">instantiatePatternMVars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L98-L107","name":"Lean.Meta.Match.Pattern.collectFVars","line":98,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.collectFVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.collectFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">collectFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Util/CollectFVars.html#Lean.CollectFVars.State\">Lean.CollectFVars.State</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L89-L95","name":"Lean.Meta.Match.Pattern.hasExprMVar","line":89,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.hasExprMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.hasExprMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">hasExprMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L85-L87","name":"Lean.Meta.Match.Pattern.replaceFVarId","line":85,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.replaceFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.replaceFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">replaceFVarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L73-L83","name":"Lean.Meta.Match.Pattern.applyFVarSubst","line":73,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.applyFVarSubst","doc":"Apply the free variable substitution `s` to the given pattern "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.applyFVarSubst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">applyFVarSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a> → <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L50-L70","name":"Lean.Meta.Match.Pattern.toExpr.visit","line":50,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toExpr.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toExpr.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">toExpr</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(annotate : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L47-L70","name":"Lean.Meta.Match.Pattern.toExpr","line":47,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(annotate : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L38-L45","name":"Lean.Meta.Match.Pattern.toMessageData","line":38,"kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L34-L34","name":"Lean.Meta.Match.instInhabitedPattern","line":34,"kind":"instance","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">instInhabitedPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L33-L33","name":"Lean.Meta.Match.Pattern.as","line":33,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.as\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">as</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(varId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L32-L32","name":"Lean.Meta.Match.Pattern.arrayLit","line":32,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.arrayLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.arrayLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">arrayLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L31-L31","name":"Lean.Meta.Match.Pattern.val","line":31,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L30-L30","name":"Lean.Meta.Match.Pattern.ctor","line":30,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fields : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L29-L29","name":"Lean.Meta.Match.Pattern.var","line":29,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L28-L28","name":"Lean.Meta.Match.Pattern.inaccessible","line":28,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.inaccessible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.inaccessible\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">inaccessible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L27-L34","name":"Lean.Meta.Match.Pattern","line":27,"kind":"inductive","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Pattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L20-L25","name":"Lean.Meta.Match.isNamedPattern?","line":20,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.isNamedPattern?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.isNamedPattern?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">isNamedPattern?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L16-L18","name":"Lean.Meta.Match.isNamedPattern","line":16,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.isNamedPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.isNamedPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">isNamedPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L13-L14","name":"Lean.Meta.Match.mkNamedPattern","line":13,"kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.mkNamedPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.mkNamedPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">mkNamedPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L1-L1","name":"Lean.Meta.Match.MatcherResult.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MatcherResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(matcher : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(counterExamples : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.CounterExample\">Lean.Meta.Match.CounterExample</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unusedAltIdxs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(addMatcher : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">Lean.Meta.Match.MatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L1-L1","name":"Lean.Meta.Match.Alt.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Alt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarDecls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(patterns : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cnstrs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L1-L1","name":"Lean.Meta.Match.Problem.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">Problem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vars : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Lean.Meta.Match.Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(examples : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Lean.Meta.Match.Example</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Lean.Meta.Match.Problem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Match/Basic.lean#L1-L1","name":"Lean.Meta.Match.AltLHS.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">AltLHS</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarDecls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(patterns : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Lean.Meta.Match.Pattern</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Lean.Meta.Match.AltLHS</a></div></div>"}]}