{"name":"Lean.Compiler.LCNF.PullFunDecls","instances":[{"typeNames":["Lean.Compiler.LCNF.PullFunDecls.ToPull"],"name":"Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","className":"Inhabited"}],"imports":["Init","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.DependsOn","Lean.Compiler.LCNF.PassManager"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L178-L179","name":"Lean.Compiler.LCNF.pullFunDecls","line":178,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.pullFunDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.pullFunDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">pullFunDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Lean.Compiler.LCNF.Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L173-L176","name":"Lean.Compiler.LCNF.Decl.pullFunDecls","line":173,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.Decl.pullFunDecls","doc":"Pull local function declarations and join points in the given declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.Decl.pullFunDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">pullFunDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">Lean.Compiler.LCNF.CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L146-L163","name":"Lean.Compiler.LCNF.PullFunDecls.pull","line":146,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.pull","doc":"Pull local function declarations and join points in `code`.\nThe state contains the declarations being pulled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.pull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">pull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L131-L140","name":"Lean.Compiler.LCNF.PullFunDecls.addToPull","line":131,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.addToPull","doc":"Add local function declaration (or join point if `isFun = false`) to the state.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.addToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">addToPull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(isFun : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L121-L125","name":"Lean.Compiler.LCNF.PullFunDecls.attachJps","line":121,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachJps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachJps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachJps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L117-L119","name":"Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps","line":117,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps","doc":"Similar to `attachFVarDeps`. Extract from the state any local function declarations that depends on the given\nparameters, **and** attach to code `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachParamsDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L109-L111","name":"Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps","line":109,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps","doc":"Extract from the state any local function declarations that depends on the given\nfree variable, **and** attach to code `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachFVarDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L94-L103","name":"Lean.Compiler.LCNF.PullFunDecls.attach.visit","line":94,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> (<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>) <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L91-L92","name":"Lean.Compiler.LCNF.PullFunDecls.attach.visited","line":91,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.visited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> (<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>) <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L87-L89","name":"Lean.Compiler.LCNF.PullFunDecls.attach.go","line":87,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> (<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>) <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L82-L103","name":"Lean.Compiler.LCNF.PullFunDecls.attach","line":82,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach","doc":"Attach the given array of local function declarations and join points to `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L73-L77","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.attach","line":73,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.attach","doc":"Construct the code `fun p.decl k` or `jp p.decl k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.attach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">attach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L64-L68","name":"Lean.Compiler.LCNF.PullFunDecls.findParamsDeps","line":64,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findParamsDeps","doc":"Similar to `findFVarDeps`. Extract from the state any local function declarations that depends on the given\nparameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findParamsDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findParamsDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L56-L58","name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDeps","line":56,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDeps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L49-L54","name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint","line":49,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDepsFixpoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(todo : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>) <span class=\"fn\">#[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L40-L47","name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps.go","line":40,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDirectDeps</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keep : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dep : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L32-L47","name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps","line":32,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps","doc":"Extract from the state any local function declarations that depends on the given\nfree variable. The idea is that we have to stop pulling these declarations because they\ndepend on `fvarId`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDirectDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">Lean.Compiler.LCNF.PullFunDecls.PullM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L25-L25","name":"Lean.Compiler.LCNF.PullFunDecls.PullM","line":25,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM","doc":"The `PullM` state contains the local function declarations and join points being pulled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">PullM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L20-L20","name":"Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","line":20,"kind":"instance","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">instInhabitedToPull</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L19-L19","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.used","line":19,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.used","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L18-L18","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.decl","line":18,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L17-L17","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun","line":17,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">isFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L16-L20","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull","line":16,"kind":"structure","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull","doc":"Local function declaration and join point being pulled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/PullFunDecls.lean#L1-L1","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(isFun : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">Lean.Compiler.LCNF.FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(used : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">Lean.FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">Lean.Compiler.LCNF.PullFunDecls.ToPull</a></div></div>"}]}