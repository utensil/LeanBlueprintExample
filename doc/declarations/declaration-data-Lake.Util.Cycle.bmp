{"name":"Lake.Util.Cycle","instances":[],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Cycle.lean#L22-L28","name":"Lake.guardCycle","line":22,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.guardCycle","doc":"Add `key` to the monad's `CallStack` before invoking `act`.\nIf adding `key` produces a cycle, the cyclic call stack is thrown.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.guardCycle\"><span class=\"name\">Lake</span>.<span class=\"name\">guardCycle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(key : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Cycle.lean#L16-L16","name":"Lake.CycleT","line":16,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.CycleT","doc":"A transformer that equips a monad with a `CallStack` to detect cycles. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.CycleT\"><span class=\"name\">Lake</span>.<span class=\"name\">CycleT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Cycle.lean#L13-L13","name":"Lake.Cycle","line":13,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.Cycle","doc":"A `CallStack` ending in a cycle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.Cycle\"><span class=\"name\">Lake</span>.<span class=\"name\">Cycle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Cycle.lean#L10-L10","name":"Lake.CallStack","line":10,"kind":"def","docLink":"./Lake/Util/Cycle.html#Lake.CallStack","doc":"A sequence of calls donated by the key type `κ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Cycle.html#Lake.CallStack\"><span class=\"name\">Lake</span>.<span class=\"name\">CallStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}