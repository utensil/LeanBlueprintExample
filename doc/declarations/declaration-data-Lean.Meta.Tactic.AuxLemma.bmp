{"name":"Lean.Meta.Tactic.AuxLemma","instances":[{"typeNames":["Lean.Meta.AuxLemmas"],"name":"Lean.Meta.instInhabitedAuxLemmas","className":"Inhabited"}],"imports":["Init","Lean.Meta.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/AuxLemma.lean#L26-L39","name":"Lean.Meta.mkAuxLemma","line":26,"kind":"def","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.mkAuxLemma","doc":"Helper method for creating auxiliary lemmas in the environment.\n\nIt uses a cache that maps `type` to declaration name. The cache is not stored in `.olean` files.\nIt is useful to make sure the same auxiliary lemma is not created over and over again in the same file.\n\nThis method is useful for tactics (e.g., `simp`) that may perform preprocessing steps to lemmas provided by\nusers. For example, `simp` preprocessor may convert a lemma into multiple ones.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.mkAuxLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkAuxLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/AuxLemma.lean#L15-L15","name":"Lean.Meta.auxLemmasExt","line":15,"kind":"opaque","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.auxLemmasExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.auxLemmasExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">auxLemmasExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">Lean.Meta.AuxLemmas</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/AuxLemma.lean#L13-L13","name":"Lean.Meta.instInhabitedAuxLemmas","line":13,"kind":"instance","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instInhabitedAuxLemmas","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instInhabitedAuxLemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedAuxLemmas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">Lean.Meta.AuxLemmas</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/AuxLemma.lean#L12-L12","name":"Lean.Meta.AuxLemmas.lemmas","line":12,"kind":"def","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.lemmas","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.lemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmas</span>.<span class=\"name\">lemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">Lean.Meta.AuxLemmas</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/AuxLemma.lean#L11-L11","name":"Lean.Meta.AuxLemmas.idx","line":11,"kind":"def","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmas</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">Lean.Meta.AuxLemmas</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/AuxLemma.lean#L10-L13","name":"Lean.Meta.AuxLemmas","line":10,"kind":"structure","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/AuxLemma.lean#L1-L1","name":"Lean.Meta.AuxLemmas.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmas</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lemmas : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">Lean.Meta.AuxLemmas</a></div></div>"}]}