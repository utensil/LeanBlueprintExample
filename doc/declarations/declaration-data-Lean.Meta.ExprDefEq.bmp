{"name":"Lean.Meta.ExprDefEq","instances":[{"typeNames":["Lean.Expr","Lean.Expr","Lean.Meta.CheckAssignment.CheckAssignmentM"],"name":"Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","className":"Lean.MonadCache"}],"imports":["Init","Lean.Meta.Offset","Lean.Meta.UnificationHint","Lean.Util.OccursCheck"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L1813-L1855","name":"Lean.Meta.isExprDefEqAuxImpl","line":1813,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isExprDefEqAuxImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isExprDefEqAuxImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isExprDefEqAuxImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L1661-L1666","name":"Lean.Meta.whenUndefDo","line":1661,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.whenUndefDo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.whenUndefDo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whenUndefDo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">Lean.LBool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L933-L950","name":"Lean.Meta.checkAssignment","line":933,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.checkAssignment","doc":"Auxiliary function for handling constraints of the form `?m a₁ ... aₙ =?= v`.\nIt will check whether we can perform the assignment\n```\n?m := fun fvars => v\n```\nThe result is `none` if the assignment can't be performed.\nThe result is `some newV` where `newV` is a possibly updated `v`. This method may need\nto unfold let-declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.checkAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">checkAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L888-L919","name":"Lean.Meta.CheckAssignmentQuick.check.visit","line":888,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.check.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.check.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignmentQuick</span>.<span class=\"name\">check</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hasCtxLocals : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarDecl : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L885-L920","name":"Lean.Meta.CheckAssignmentQuick.check","line":885,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.check","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignmentQuick</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hasCtxLocals : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarDecl : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L831-L866","name":"Lean.Meta.CheckAssignment.check","line":831,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.check","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">Lean.Meta.CheckAssignment.CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L801-L829","name":"Lean.Meta.CheckAssignment.checkApp","line":801,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">Lean.Meta.CheckAssignment.CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L798-L799","name":"Lean.Meta.CheckAssignment.checkAssignmentAux","line":798,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkAssignmentAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasCtxLocals : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L787-L795","name":"Lean.Meta.CheckAssignment.assignToConstFun","line":787,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.assignToConstFun","doc":"Auxiliary function used to \"fix\" subterms of the form `?m x_1 ... x_n` where `x_i`s are free variables,\nand one of them is out-of-scope.\nSee `Expr.app` case at `check`.\nIf `ctxApprox` is true, then we solve this case by creating a fresh metavariable ?n with the correct scope,\nan assigning `?m := fun _ ... _ => ?n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.assignToConstFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">assignToConstFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numArgs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(newMVar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L722-L779","name":"Lean.Meta.CheckAssignment.checkMVar","line":722,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">Lean.Meta.CheckAssignment.CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L707-L720","name":"Lean.Meta.CheckAssignment.checkFVar","line":707,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">Lean.Meta.CheckAssignment.CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L696-L703","name":"Lean.Meta.CheckAssignment.run","line":696,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">Lean.Meta.CheckAssignment.CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasCtxLocals : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L688-L690","name":"Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","line":688,"kind":"instance","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">instMonadCacheExprCheckAssignmentM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCache\">Lean.MonadCache</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">Lean.Meta.CheckAssignment.CheckAssignmentM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L679-L680","name":"Lean.Meta.CheckAssignment.throwOutOfScopeFVar","line":679,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwOutOfScopeFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwOutOfScopeFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">throwOutOfScopeFVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">Lean.Meta.CheckAssignment.CheckAssignmentM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L676-L677","name":"Lean.Meta.CheckAssignment.throwCheckAssignmentFailure","line":676,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwCheckAssignmentFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwCheckAssignmentFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">throwCheckAssignmentFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">Lean.Meta.CheckAssignment.CheckAssignmentM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L674-L674","name":"Lean.Meta.CheckAssignment.CheckAssignmentM","line":674,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">CheckAssignmentM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L672-L672","name":"Lean.Meta.CheckAssignment.Context.rhs","line":672,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Lean.Meta.CheckAssignment.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L671-L671","name":"Lean.Meta.CheckAssignment.Context.hasCtxLocals","line":671,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.hasCtxLocals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.hasCtxLocals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">hasCtxLocals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Lean.Meta.CheckAssignment.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L670-L670","name":"Lean.Meta.CheckAssignment.Context.fvars","line":670,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.fvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.fvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">fvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Lean.Meta.CheckAssignment.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L669-L669","name":"Lean.Meta.CheckAssignment.Context.mvarDecl","line":669,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">mvarDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Lean.Meta.CheckAssignment.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L668-L668","name":"Lean.Meta.CheckAssignment.Context.mvarId","line":668,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Lean.Meta.CheckAssignment.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L667-L672","name":"Lean.Meta.CheckAssignment.Context","line":667,"kind":"structure","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L665-L665","name":"Lean.Meta.CheckAssignment.State.cache","line":665,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State\">Lean.Meta.CheckAssignment.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructMap\">Lean.ExprStructMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L664-L665","name":"Lean.Meta.CheckAssignment.State","line":664,"kind":"structure","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L662-L662","name":"Lean.Meta.CheckAssignment.outOfScopeExceptionId","line":662,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.outOfScopeExceptionId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.outOfScopeExceptionId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">outOfScopeExceptionId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">Lean.InternalExceptionId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L661-L661","name":"Lean.Meta.CheckAssignment.checkAssignmentExceptionId","line":661,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentExceptionId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentExceptionId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkAssignmentExceptionId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">Lean.InternalExceptionId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L656-L657","name":"Lean.Meta.mkAuxMVar","line":656,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.mkAuxMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.mkAuxMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkAuxMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInsts : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numScopeArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L320-L333","name":"Lean.Meta.isDefEqBindingDomain.loop","line":320,"kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqBindingDomain.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqBindingDomain.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqBindingDomain</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ds₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L319-L334","name":"Lean.Meta.isDefEqBindingDomain","line":319,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqBindingDomain","doc":"Check whether the types of the free variables at `fvars` are\ndefinitionally equal to the types at `ds₂`.\n\nPre: `fvars.size == ds₂.size`\n\nThis method also updates the set of local instances, and invokes\nthe continuation `k` with the updated set.\n\nWe can't use `withNewLocalInstances` because the `isDeq fvarType d₂`\nmay use local instances. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqBindingDomain\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqBindingDomain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ds₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L182-L208","name":"Lean.Meta.DefEqArgsFirstPassResult.ok","line":182,"kind":"ctor","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.ok","doc":"Succeeded. The array `postponedImplicit` contains the position\nof the implicit arguments for which def-eq has been postponed.\n`postponedHO` contains the higher order output parameters, and parameters\nthat depend on them. They should be processed after the implict ones.\n`postponedHO` is used to handle applications involving functions that\ncontain higher order output parameters. Example:\n```lean\ngetElem :\n  {cont : Type u_1} → {idx : Type u_2} → {elem : Type u_3} →\n  {dom : cont → idx → Prop} → [self : GetElem cont idx elem dom] →\n  (xs : cont) → (i : idx) → (h : dom xs i) → elem\n```\nThe argumengs `dom` and `h` must be processed after all implicit arguments\notherwise higher-order unification problems are generated. See issue #1299,\nwhen trying to solve\n```\ngetElem ?a ?i ?h =?= getElem a i (Fin.val_lt_of_le i ...)\n```\nwe have to solve the constraint\n```\n?dom a i.val =?= LT.lt i.val (Array.size a)\n```\nby solving after the instance has been synthesized, we reduce this constraint to\na simple check.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.ok\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqArgsFirstPassResult</span>.<span class=\"name\">ok</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(postponedImplicit : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(postponedHO : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult\">Lean.Meta.DefEqArgsFirstPassResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L176-L181","name":"Lean.Meta.DefEqArgsFirstPassResult.failed","line":176,"kind":"ctor","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.failed","doc":"Failed to establish that explicit arguments are def-eq.\nRemark: higher output parameters, and parameters that depend on them\nare postponed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.failed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqArgsFirstPassResult</span>.<span class=\"name\">failed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult\">Lean.Meta.DefEqArgsFirstPassResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L175-L208","name":"Lean.Meta.DefEqArgsFirstPassResult","line":175,"kind":"inductive","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult","doc":"Result type for `isDefEqArgsFirstPass`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqArgsFirstPassResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L155-L164","name":"Lean.Meta.isEtaUnassignedMVar","line":155,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isEtaUnassignedMVar","doc":"Return `true` if `e` is of the form `fun (x_1 ... x_n) => ?m x_1 ... x_n)`, and `?m` is unassigned.\nRemark: `n` may be 0. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isEtaUnassignedMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isEtaUnassignedMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L143-L150","name":"Lean.Meta.isDefEqStringLit","line":143,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqStringLit","doc":"Support for constraints of the form `(\"...\" =?= String.mk cs)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqStringLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqStringLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">Lean.LBool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L129-L140","name":"Lean.Meta.isDefEqNat","line":129,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNat","doc":"Support for reducing Nat basic operations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">Lean.LBool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L118-L126","name":"Lean.Meta.isDefEqNative","line":118,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNative","doc":"Support for `Lean.reduceBool` and `Lean.reduceNat` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNative\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqNative</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">Lean.LBool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L21-L31","name":"Lean.Meta.isAbstractedUnassignedMVar","line":21,"kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isAbstractedUnassignedMVar","doc":"Return `true` if `e` is of the form `fun (x_1 ... x_n) => ?m y_1 ... y_k)`, and `?m` is unassigned.\nRemark: `n`, `k` may be 0.\nThis function is used to filter unification problems in\n`isDefEqArgs`/`isDefEqEtaStruct` where we can assign proofs.\nIf one side is of the form described above, then we can likely assign `?m`.\nBut it it's not, we would most likely apply proof irrelevance, which is\nusually very expensive since it needs to unify the types as well.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isAbstractedUnassignedMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isAbstractedUnassignedMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L1-L1","name":"Lean.Meta.CheckAssignment.Context.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarDecl : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hasCtxLocals : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Lean.Meta.CheckAssignment.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ExprDefEq.lean#L1-L1","name":"Lean.Meta.CheckAssignment.State.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cache : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructMap\">Lean.ExprStructMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State\">Lean.Meta.CheckAssignment.State</a></div></div>"}]}