{"name":"Lean.Util.FoldConsts","instances":[],"imports":["Init","Lean.Expr","Lean.Environment"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L71-L78","name":"Lean.getMaxHeight","line":71,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.getMaxHeight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.getMaxHeight\"><span class=\"name\">Lean</span>.<span class=\"name\">getMaxHeight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L66-L67","name":"Lean.Expr.getUsedConstants","line":66,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstants","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getUsedConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L64-L64","name":"Lean.Expr.foldConsts","line":64,"kind":"opaque","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.foldConsts","doc":"Apply `f` to every constant occurring in `e` once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.foldConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">foldConsts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L57-L58","name":"Lean.Expr.FoldConstsImpl.foldUnsafe","line":57,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.foldUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.foldUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">foldUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L53-L55","name":"Lean.Expr.FoldConstsImpl.initCache","line":53,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.initCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.initCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">initCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">Lean.Expr.FoldConstsImpl.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L32-L50","name":"Lean.Expr.FoldConstsImpl.fold.visit","line":32,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">fold</span>.<span class=\"name\">visit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\">Lean.Expr.FoldConstsImpl.FoldM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L31-L51","name":"Lean.Expr.FoldConstsImpl.fold","line":31,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\">Lean.Expr.FoldConstsImpl.FoldM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L21-L29","name":"Lean.Expr.FoldConstsImpl.visited","line":21,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.visited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\">Lean.Expr.FoldConstsImpl.FoldM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L19-L19","name":"Lean.Expr.FoldConstsImpl.FoldM","line":19,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">FoldM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L17-L17","name":"Lean.Expr.FoldConstsImpl.State.visitedConsts","line":17,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visitedConsts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visitedConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">visitedConsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">Lean.Expr.FoldConstsImpl.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L16-L16","name":"Lean.Expr.FoldConstsImpl.State.visitedTerms","line":16,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visitedTerms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visitedTerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">visitedTerms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">Lean.Expr.FoldConstsImpl.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L15-L17","name":"Lean.Expr.FoldConstsImpl.State","line":15,"kind":"structure","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L13-L13","name":"Lean.Expr.FoldConstsImpl.cacheSize","line":13,"kind":"def","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.cacheSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.cacheSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">cacheSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/FoldConsts.lean#L1-L1","name":"Lean.Expr.FoldConstsImpl.State.mk","line":1,"kind":"ctor","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(visitedTerms : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(visitedConsts : <a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">Lean.Expr.FoldConstsImpl.State</a></div></div>"}]}