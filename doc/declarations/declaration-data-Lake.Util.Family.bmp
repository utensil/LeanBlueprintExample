{"name":"Lake.Util.Family","instances":[{"typeNames":[],"name":"Lake.instFamilyOut","className":"Lake.FamilyOut"}],"imports":["Init","Lean.Parser.Command"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L169-L178","name":"Lake.familyDef","line":169,"kind":"def","docLink":"./Lake/Util/Family.html#Lake.familyDef","doc":"The syntax:\n\n```lean\nfamily_def foo : Fam 0 := Nat\n```\n\nDeclares a new mapping for the open type family `Fam` type via the\nproduction of an axiom `Fam.foo : Data 0 = Nat` and an instance of `FamilyDef`\nthat uses this axiom for key `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.familyDef\"><span class=\"name\">Lake</span>.<span class=\"name\">familyDef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L155-L156","name":"Lake.ofFamily","line":155,"kind":"def","docLink":"./Lake/Util/Family.html#Lake.ofFamily","doc":"Cast a datum from its general family to its individual type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.ofFamily\"><span class=\"name\">Lake</span>.<span class=\"name\">ofFamily</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">{<span class=\"fn\">Fam</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>} → <span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} → <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">Lake.FamilyOut</a> <span class=\"fn\">Fam</span> <span class=\"fn\">a</span> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fam</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L151-L152","name":"Lake.toFamily","line":151,"kind":"def","docLink":"./Lake/Util/Family.html#Lake.toFamily","doc":"Cast a datum from its individual type to its general family. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.toFamily\"><span class=\"name\">Lake</span>.<span class=\"name\">toFamily</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">{<span class=\"fn\">Fam</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>} → <span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} → <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">Lake.FamilyOut</a> <span class=\"fn\">Fam</span> <span class=\"fn\">a</span> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">Fam</span> <span class=\"fn\">a</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L147-L148","name":"Lake.instFamilyOut","line":147,"kind":"instance","docLink":"./Lake/Util/Family.html#Lake.instFamilyOut","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.instFamilyOut\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyOut</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">Fam</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>} {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">Lake.FamilyDef</a> <span class=\"fn\">Fam</span> <span class=\"fn\">a</span> <span class=\"fn\">β</span></span>], <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">Lake.FamilyOut</a> <span class=\"fn\">Fam</span> <span class=\"fn\">a</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L142-L142","name":"Lake.FamilyOut.family_key_eq_type","line":142,"kind":"def","docLink":"./Lake/Util/Family.html#Lake.FamilyOut.family_key_eq_type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.FamilyOut.family_key_eq_type\"><span class=\"name\">Lake</span>.<span class=\"name\">FamilyOut</span>.<span class=\"name\">family_key_eq_type</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Fam : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">Lake.FamilyOut</a> <span class=\"fn\">Fam</span> <span class=\"fn\">a</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fam</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L141-L141","name":"Lake.FamilyOut.mk","line":141,"kind":"ctor","docLink":"./Lake/Util/Family.html#Lake.FamilyOut.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.FamilyOut.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">FamilyOut</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Fam : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(family_key_eq_type : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fam</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">Lake.FamilyOut</a> <span class=\"fn\">Fam</span> <span class=\"fn\">a</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L141-L142","name":"Lake.FamilyOut","line":141,"kind":"class","docLink":"./Lake/Util/Family.html#Lake.FamilyOut","doc":"Like `FamilyDef`, but `β` is an `outParam`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.FamilyOut\"><span class=\"name\">Lake</span>.<span class=\"name\">FamilyOut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Fam : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L138-L138","name":"Lake.FamilyDef.family_key_eq_type","line":138,"kind":"def","docLink":"./Lake/Util/Family.html#Lake.FamilyDef.family_key_eq_type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.FamilyDef.family_key_eq_type\"><span class=\"name\">Lake</span>.<span class=\"name\">FamilyDef</span>.<span class=\"name\">family_key_eq_type</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Fam : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">Lake.FamilyDef</a> <span class=\"fn\">Fam</span> <span class=\"fn\">a</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fam</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L137-L137","name":"Lake.FamilyDef.mk","line":137,"kind":"ctor","docLink":"./Lake/Util/Family.html#Lake.FamilyDef.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.FamilyDef.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">FamilyDef</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Fam : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(family_key_eq_type : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fam</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">Lake.FamilyDef</a> <span class=\"fn\">Fam</span> <span class=\"fn\">a</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Family.lean#L137-L138","name":"Lake.FamilyDef","line":137,"kind":"class","docLink":"./Lake/Util/Family.html#Lake.FamilyDef","doc":"Defines a single mapping of the **open type family** `Fam`, namely `Fam a = β`.\nSee the module documentation of `Lake.Util.Family` for details on what an open\ntype family is in Lake.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Family.html#Lake.FamilyDef\"><span class=\"name\">Lake</span>.<span class=\"name\">FamilyDef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Fam : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><a href=\"./Init/Prelude.html#semiOutParam\">semiOutParam</a> (<a href=\"./foundational_types.html\">Type</a> v)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}