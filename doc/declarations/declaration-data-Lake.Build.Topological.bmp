{"name":"Lake.Build.Topological","instances":[],"imports":["Init","Lake.Util.Cycle","Lake.Util.Store","Lake.Util.EquipT"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L137-L139","name":"Lake.buildTop","line":137,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.buildTop","doc":"Recursively fills a `MonadStore` of key-object pairs by\nbuilding objects topologically (ι.e., depth-first with memoization).\nIf a cycle is detected, the list of keys traversed is thrown.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.buildTop\"><span class=\"name\">Lake</span>.<span class=\"name\">buildTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">Lake.MonadStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keyOf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(build : <span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.RecFetchFn\">Lake.RecFetchFn</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.Cycle\">Lake.Cycle</a> <span class=\"fn\">κ</span></span>) <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L127-L130","name":"Lake.buildDTop","line":127,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.buildDTop","doc":"Dependently typed version of `buildTop`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.buildDTop\"><span class=\"name\">Lake</span>.<span class=\"name\">buildDTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">Lake.MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keyOf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(build : <span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.DRecFetchFn\">Lake.DRecFetchFn</a> <span class=\"fn\">α</span> (<span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\"><span class=\"fn\">β</span> (<span class=\"fn\"><span class=\"fn\">keyOf</span> <span class=\"fn\">a</span></span>)</span></span>) (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.Cycle\">Lake.Cycle</a> <span class=\"fn\">κ</span></span>) <span class=\"fn\">m</span> (<span class=\"fn\"><span class=\"fn\">β</span> (<span class=\"fn\"><span class=\"fn\">keyOf</span> <span class=\"fn\">a</span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L122-L124","name":"Lake.buildAcyclic","line":122,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.buildAcyclic","doc":"Recursively builds objects for the keys `κ`, avoiding cycles. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.buildAcyclic\"><span class=\"name\">Lake</span>.<span class=\"name\">buildAcyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keyOf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(build : <span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.RecFetchFn\">Lake.RecFetchFn</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.Cycle\">Lake.Cycle</a> <span class=\"fn\">κ</span></span>) <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L108-L112","name":"Lake.recFetchMemoize","line":108,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.recFetchMemoize","doc":"`recFetchAcyclic` augmented with a `MonadDStore` to\nmemoize fetch results and thus avoid computing the same result twice.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.recFetchMemoize\"><span class=\"name\">Lake</span>.<span class=\"name\">recFetchMemoize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">Lake.MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keyOf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fetch : <span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.DRecFetchFn\">Lake.DRecFetchFn</a> <span class=\"fn\">α</span> (<span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\"><span class=\"fn\">β</span> (<span class=\"fn\"><span class=\"fn\">keyOf</span> <span class=\"fn\">a</span></span>)</span></span>) (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.DFetchFn\">Lake.DFetchFn</a> <span class=\"fn\">α</span> (<span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\"><span class=\"fn\">β</span> (<span class=\"fn\"><span class=\"fn\">keyOf</span> <span class=\"fn\">a</span></span>)</span></span>) (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L87-L95","name":"Lake.recFetchAcyclic","line":87,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.recFetchAcyclic","doc":"A `recFetch` augmented by a `CycleT` to guard against recursive cycles.\nIf the set of visited keys is finite, this function should provably terminate.\n\nWe use `keyOf` to the derive the unique key of a fetch from its descriptor\n`a : α`. We do this because descriptors may not be comparable and/or contain\nmore information than necessary to determine uniqueness.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.recFetchAcyclic\"><span class=\"name\">Lake</span>.<span class=\"name\">recFetchAcyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(keyOf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fetch : <span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.DRecFetchFn\">Lake.DRecFetchFn</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.DFetchFn\">Lake.DFetchFn</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> (<span class=\"fn\"><a href=\"./Lake/Util/Cycle.html#Lake.CycleT\">Lake.CycleT</a> <span class=\"fn\">κ</span> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L69-L71","name":"Lake.recFetch","line":69,"kind":"opaque","docLink":"./Lake/Build/Topological.html#Lake.recFetch","doc":"A `DFetchFn` that provides its base `DRecFetchFn` with itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.recFetch\"><span class=\"name\">Lake</span>.<span class=\"name\">recFetch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u), <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> (<span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fetch : <span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.DRecFetchFn\">Lake.DRecFetchFn</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Topological.html#Lake.DFetchFn\">Lake.DFetchFn</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L65-L66","name":"Lake.RecFetchFn","line":65,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.RecFetchFn","doc":"A `DRecFetchFn` that is not dependently typed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.RecFetchFn\"><span class=\"name\">Lake</span>.<span class=\"name\">RecFetchFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L61-L62","name":"Lake.DRecFetchFn","line":61,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.DRecFetchFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.DRecFetchFn\"><span class=\"name\">Lake</span>.<span class=\"name\">DRecFetchFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u w u)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L49-L50","name":"Lake.FetchT","line":49,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.FetchT","doc":"A `DFetchT` that is not dependently typed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.FetchT\"><span class=\"name\">Lake</span>.<span class=\"name\">FetchT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max w u) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L45-L46","name":"Lake.DFetchT","line":45,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.DFetchT","doc":"A transformer that equips a monad with a `DFetchFn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.DFetchT\"><span class=\"name\">Lake</span>.<span class=\"name\">DFetchT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max w u) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Build/Topological.lean#L36-L37","name":"Lake.DFetchFn","line":36,"kind":"def","docLink":"./Lake/Build/Topological.html#Lake.DFetchFn","doc":"A dependently typed monadic *fetch* function.\n\nThat is, a function within the monad `m` and takes an input `a : α`\ndescribing what to fetch and and produces some output `b : β a` (dependently\ntyped) or `b : B` (not) describing what was fetched. All build functions are\nfetch functions, but not all fetch functions need build something.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Topological.html#Lake.DFetchFn\"><span class=\"name\">Lake</span>.<span class=\"name\">DFetchFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u w)</div></div>"}]}