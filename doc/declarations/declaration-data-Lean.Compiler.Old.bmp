{"name":"Lean.Compiler.Old","instances":[],"imports":["Init","Lean.Environment"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L70-L72","name":"Lean.Environment.addAndCompile","line":70,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Environment.addAndCompile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Environment.addAndCompile\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">addAndCompile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opt : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.KernelException\">Lean.KernelException</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L66-L67","name":"Lean.Environment.compileDecl","line":66,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Environment.compileDecl","doc":"Compile the given declaration, it assumes the declaration has already been added to the environment using `addDecl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Environment.compileDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">compileDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opt : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.KernelException\">Lean.KernelException</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L63-L63","name":"Lean.Environment.compileDecls","line":63,"kind":"opaque","docLink":"./Lean/Compiler/Old.html#Lean.Environment.compileDecls","doc":"Compile the given block of mutual declarations.\nAssumes the declarations have already been added to the environment using `addDecl`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Environment.compileDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">compileDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(opt : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.KernelException\">Lean.KernelException</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L50-L52","name":"Lean.Compiler.isUnsafeRecName?","line":50,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.isUnsafeRecName?","doc":"Return `some _` if the given name was created using `mkUnsafeRecName` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.isUnsafeRecName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">isUnsafeRecName?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L45-L46","name":"Lean.Compiler.mkUnsafeRecName","line":45,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.mkUnsafeRecName","doc":"We generate auxiliary unsafe definitions for regular recursive definitions.\nThe auxiliary unsafe definition has a clear runtime cost execution model.\nThis function returns the auxiliary unsafe definition name for the given name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.mkUnsafeRecName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkUnsafeRecName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L33-L38","name":"Lean.Compiler.checkIsDefinition","line":33,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.checkIsDefinition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.checkIsDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">checkIsDefinition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L26-L31","name":"Lean.Compiler.getDeclNamesForCodeGen","line":26,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.getDeclNamesForCodeGen","doc":"Return the name of new definitions in the a given declaration.\nHere we consider only declarations we generate code for.\nWe use this definition to implement `add_and_compile`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.getDeclNamesForCodeGen\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getDeclNamesForCodeGen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L18-L21","name":"Lean.Compiler.isEagerLambdaLiftingName","line":18,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.isEagerLambdaLiftingName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.isEagerLambdaLiftingName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">isEagerLambdaLiftingName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/Old.lean#L14-L15","name":"Lean.Compiler.mkEagerLambdaLiftingName","line":14,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.mkEagerLambdaLiftingName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.mkEagerLambdaLiftingName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkEagerLambdaLiftingName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"}]}