{"name":"Lean.Class","instances":[{"typeNames":["Lean.ClassState"],"name":"Lean.instInhabitedClassState","className":"Inhabited"}],"imports":["Init","Lean.Attributes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L151-L159","name":"Lean.addClass","line":151,"kind":"def","docLink":"./Lean/Class.html#Lean.addClass","doc":"Add a new type class with the given name to the environment.\n`declName` must not be the name of an existing type class,\nand it must be the name of constant in `env`.\n`declName` must be a inductive datatype or axiom.\nRecall that all structures are inductive datatypes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.addClass\"><span class=\"name\">Lean</span>.<span class=\"name\">addClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(clsName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L121-L142","name":"Lean.mkOutParamArgsImplicit.go","line":121,"kind":"opaque","docLink":"./Lean/Class.html#Lean.mkOutParamArgsImplicit.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.mkOutParamArgsImplicit.go\"><span class=\"name\">Lean</span>.<span class=\"name\">mkOutParamArgsImplicit</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(typeAux : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(outParamFVarIds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L118-L142","name":"Lean.mkOutParamArgsImplicit","line":118,"kind":"def","docLink":"./Lean/Class.html#Lean.mkOutParamArgsImplicit","doc":"Mark `outParam`s in `type` as implicit. Note that it also marks instance implicit arguments that depend on `outParam`s as implicit.\n\nRemark: this function consumes the `outParam` annotations.\n\nThis function uses the same logic used as `checkOutParam`.\nSee issue #1901\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.mkOutParamArgsImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">mkOutParamArgsImplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L72-L75","name":"Lean.hasOutParams","line":72,"kind":"def","docLink":"./Lean/Class.html#Lean.hasOutParams","doc":"Return `true` if the given `declName` is a type class with output parameters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.hasOutParams\"><span class=\"name\">Lean</span>.<span class=\"name\">hasOutParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L67-L68","name":"Lean.getOutParamPositions?","line":67,"kind":"def","docLink":"./Lean/Class.html#Lean.getOutParamPositions?","doc":"If `declName` is a class, return the position of its `outParams`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.getOutParamPositions?\"><span class=\"name\">Lean</span>.<span class=\"name\">getOutParamPositions?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L63-L64","name":"Lean.isClass","line":63,"kind":"def","docLink":"./Lean/Class.html#Lean.isClass","doc":"Return `true` if `n` is the name of type class in the given environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.isClass\"><span class=\"name\">Lean</span>.<span class=\"name\">isClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L51-L59","name":"Lean.classExtension","line":51,"kind":"opaque","docLink":"./Lean/Class.html#Lean.classExtension","doc":"Type class environment extension\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.classExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">classExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.SimplePersistentEnvExtension\">Lean.SimplePersistentEnvExtension</a> <a href=\"./Lean/Class.html#Lean.ClassEntry\">Lean.ClassEntry</a> <a href=\"./Lean/Class.html#Lean.ClassState\">Lean.ClassState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L46-L47","name":"Lean.ClassState.switch","line":46,"kind":"def","docLink":"./Lean/Class.html#Lean.ClassState.switch","doc":"Switch the state into persistent mode. We switch to this mode after\nwe read all imported .olean files.\nRecall that we use a `SMap` for implementing the state of the type class environment extension.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState.switch\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span>.<span class=\"name\">switch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Class.html#Lean.ClassState\">Lean.ClassState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassState\">Lean.ClassState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L38-L39","name":"Lean.ClassState.addEntry","line":38,"kind":"def","docLink":"./Lean/Class.html#Lean.ClassState.addEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState.addEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span>.<span class=\"name\">addEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Class.html#Lean.ClassState\">Lean.ClassState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(entry : <a href=\"./Lean/Class.html#Lean.ClassEntry\">Lean.ClassEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassState\">Lean.ClassState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L34-L34","name":"Lean.instInhabitedClassState","line":34,"kind":"instance","docLink":"./Lean/Class.html#Lean.instInhabitedClassState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.instInhabitedClassState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedClassState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Class.html#Lean.ClassState\">Lean.ClassState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L33-L33","name":"Lean.ClassState.outParamMap","line":33,"kind":"def","docLink":"./Lean/Class.html#Lean.ClassState.outParamMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState.outParamMap\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span>.<span class=\"name\">outParamMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Class.html#Lean.ClassState\">Lean.ClassState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">Lean.SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L32-L34","name":"Lean.ClassState","line":32,"kind":"structure","docLink":"./Lean/Class.html#Lean.ClassState","doc":"State of the type class environment extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L26-L27","name":"Lean.ClassEntry.lt","line":26,"kind":"def","docLink":"./Lean/Class.html#Lean.ClassEntry.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Class.html#Lean.ClassEntry\">Lean.ClassEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Class.html#Lean.ClassEntry\">Lean.ClassEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L22-L22","name":"Lean.ClassEntry.outParams","line":22,"kind":"def","docLink":"./Lean/Class.html#Lean.ClassEntry.outParams","doc":"Position of the class `outParams`.\nFor example, for class\n```\nclass GetElem (cont : Type u) (idx : Type v) (elem : outParam (Type w)) (dom : outParam (cont → idx → Prop)) where\n```\n`outParams := #[2, 3]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry.outParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span>.<span class=\"name\">outParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Class.html#Lean.ClassEntry\">Lean.ClassEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L13-L13","name":"Lean.ClassEntry.name","line":13,"kind":"def","docLink":"./Lean/Class.html#Lean.ClassEntry.name","doc":"Class name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry.name\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Class.html#Lean.ClassEntry\">Lean.ClassEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L11-L22","name":"Lean.ClassEntry","line":11,"kind":"structure","docLink":"./Lean/Class.html#Lean.ClassEntry","doc":"An entry for the persistent environment extension for declared type classes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L1-L1","name":"Lean.ClassEntry.mk","line":1,"kind":"ctor","docLink":"./Lean/Class.html#Lean.ClassEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(outParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassEntry\">Lean.ClassEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Class.lean#L1-L1","name":"Lean.ClassState.mk","line":1,"kind":"ctor","docLink":"./Lean/Class.html#Lean.ClassState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(outParamMap : <span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">Lean.SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassState\">Lean.ClassState</a></div></div>"}]}