{"name":"Lean.Meta.Tactic.Generalize","instances":[{"typeNames":["Lean.Meta.GeneralizeArg"],"name":"Lean.Meta.instInhabitedGeneralizeArg","className":"Inhabited"}],"imports":["Init","Lean.Meta.KAbstract","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.Intro","Lean.Meta.Tactic.FVarSubst","Lean.Meta.Tactic.Revert"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L86-L103","name":"Lean.MVarId.generalizeHyp","line":86,"kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.MVarId.generalizeHyp","doc":"Extension of `generalize` to support generalizing within specified hypotheses.\nThe `hyps` array contains the list of hypotheses within which to look for occurrences\nof the generalizing expressions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.MVarId.generalizeHyp\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">generalizeHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>) <span class=\"fn\">#[]</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarSubst : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a> <span class=\"fn\">{ <span class=\"fn\">map</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L78-L79","name":"Lean.Meta.generalize","line":78,"kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.generalize","doc":"Telescopic `generalize` tactic. It can simultaneously generalize many terms.\nIt uses `kabstract` to occurrences of the terms that need to be generalized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.generalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">generalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L74-L75","name":"Lean.MVarId.generalize","line":74,"kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.MVarId.generalize","doc":"Telescopic `generalize` tactic. It can simultaneously generalize many terms.\nIt uses `kabstract` to occurrences of the terms that need to be generalized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.MVarId.generalize\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">generalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L19-L19","name":"Lean.Meta.instInhabitedGeneralizeArg","line":19,"kind":"instance","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.instInhabitedGeneralizeArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.instInhabitedGeneralizeArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedGeneralizeArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L18-L18","name":"Lean.Meta.GeneralizeArg.hName?","line":18,"kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.hName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.hName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeArg</span>.<span class=\"name\">hName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L17-L17","name":"Lean.Meta.GeneralizeArg.xName?","line":17,"kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.xName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.xName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeArg</span>.<span class=\"name\">xName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L16-L16","name":"Lean.Meta.GeneralizeArg.expr","line":16,"kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeArg</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L15-L19","name":"Lean.Meta.GeneralizeArg","line":15,"kind":"structure","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg","doc":"The `generalize` tactic takes arguments of the form `h : e = x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Generalize.lean#L1-L1","name":"Lean.Meta.GeneralizeArg.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeArg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xName? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hName? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Lean.Meta.GeneralizeArg</a></div></div>"}]}