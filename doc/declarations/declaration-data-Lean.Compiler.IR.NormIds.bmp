{"name":"Lean.Compiler.IR.NormIds","instances":[{"typeNames":["Lean.IR.NormalizeIds.M","Lean.IR.NormalizeIds.N"],"name":"Lean.IR.NormalizeIds.instMonadLiftMN","className":"MonadLift"}],"imports":["Init","Lean.Compiler.IR.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L173-L174","name":"Lean.IR.FnBody.replaceVar","line":173,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.FnBody.replaceVar","doc":"Replace `x` with `y` in `b`. This function assumes `b` does not shadow `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.FnBody.replaceVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">replaceVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L169-L170","name":"Lean.IR.FnBody.mapVars","line":169,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.FnBody.mapVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.FnBody.mapVars\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">mapVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L151-L165","name":"Lean.IR.MapVars.mapFnBody","line":151,"kind":"opaque","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MapVars</span>.<span class=\"name\">mapFnBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L136-L149","name":"Lean.IR.MapVars.mapExpr","line":136,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MapVars</span>.<span class=\"name\">mapExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L133-L134","name":"Lean.IR.MapVars.mapArgs","line":133,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MapVars</span>.<span class=\"name\">mapArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L129-L131","name":"Lean.IR.MapVars.mapArg","line":129,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MapVars</span>.<span class=\"name\">mapArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L122-L123","name":"Lean.IR.Decl.normalizeIds","line":122,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.Decl.normalizeIds","doc":"Create a declaration equivalent to `d` s.t. `d.normalizeIds.uniqueIds == true` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.Decl.normalizeIds\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">normalizeIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L114-L117","name":"Lean.IR.NormalizeIds.normDecl","line":114,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L93-L112","name":"Lean.IR.NormalizeIds.normFnBody","line":93,"kind":"opaque","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L90-L91","name":"Lean.IR.NormalizeIds.instMonadLiftMN","line":90,"kind":"instance","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.instMonadLiftMN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.instMonadLiftMN\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">instMonadLiftMN</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">Lean.IR.NormalizeIds.M</a> <a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L83-L88","name":"Lean.IR.NormalizeIds.withParams","line":83,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">withParams</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L79-L81","name":"Lean.IR.NormalizeIds.withJP","line":79,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">withJP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L75-L77","name":"Lean.IR.NormalizeIds.withVar","line":75,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">withVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">Lean.IR.NormalizeIds.N</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L73-L73","name":"Lean.IR.NormalizeIds.N","line":73,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">N</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L58-L71","name":"Lean.IR.NormalizeIds.normExpr","line":58,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">Lean.IR.NormalizeIds.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Lean.IR.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L55-L56","name":"Lean.IR.NormalizeIds.normArgs","line":55,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">Lean.IR.NormalizeIds.M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L51-L53","name":"Lean.IR.NormalizeIds.normArg","line":51,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">Lean.IR.NormalizeIds.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Lean.IR.Arg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L48-L49","name":"Lean.IR.NormalizeIds.normJP","line":48,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">Lean.IR.NormalizeIds.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">Lean.IR.JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L45-L46","name":"Lean.IR.NormalizeIds.normVar","line":45,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">Lean.IR.NormalizeIds.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">Lean.IR.VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L40-L43","name":"Lean.IR.NormalizeIds.normIndex","line":40,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normIndex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normIndex\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normIndex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">Lean.IR.NormalizeIds.M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L38-L38","name":"Lean.IR.NormalizeIds.M","line":38,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L33-L34","name":"Lean.IR.Decl.uniqueIds","line":33,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.Decl.uniqueIds","doc":"Return true if variable, parameter and join point ids are unique "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.Decl.uniqueIds\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">uniqueIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L26-L28","name":"Lean.IR.UniqueIds.checkDecl","line":26,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">checkDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Lean.IR.Decl</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\">Lean.IR.UniqueIds.M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L20-L24","name":"Lean.IR.UniqueIds.checkFnBody","line":20,"kind":"opaque","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">checkFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">Lean.IR.FnBody</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\">Lean.IR.UniqueIds.M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L17-L18","name":"Lean.IR.UniqueIds.checkParams","line":17,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">checkParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Lean.IR.Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\">Lean.IR.UniqueIds.M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L12-L15","name":"Lean.IR.UniqueIds.checkId","line":12,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">checkId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Lean.IR.Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\">Lean.IR.UniqueIds.M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/IR/NormIds.lean#L10-L10","name":"Lean.IR.UniqueIds.M","line":10,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}