{"name":"Init.Data.Channel","instances":[{"typeNames":["IO.Channel.State"],"name":"IO.Channel.instInhabitedState","className":"Inhabited"},{"typeNames":["IO.Channel"],"name":"IO.instNonemptyChannel","className":"Nonempty"},{"typeNames":["IO.Channel.Sync"],"name":"IO.instForInSync","className":"ForIn"}],"imports":["Init.Data.Queue","Init.System.Promise","Init.System.Mutex"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L134-L135","name":"IO.instForInSync","line":134,"kind":"instance","docLink":"./Init/Data/Channel.html#IO.instForInSync","doc":"`for msg in ch.sync do ...` receives all messages in the channel until it is closed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.instForInSync\"><span class=\"name\">IO</span>.<span class=\"name\">instForInSync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel.Sync\">IO.Channel.Sync</a> <span class=\"fn\">α</span></span>) <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L121-L122","name":"IO.Channel.Sync.recv?","line":121,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.Sync.recv?","doc":"Synchronously receives a message from the channel.\n\nEvery message is only received once.\nReturns `none` if the channel is closed and the queue is empty.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.Sync.recv?\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">recv?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ch : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel.Sync\">IO.Channel.Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L113-L113","name":"IO.Channel.sync","line":113,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.sync","doc":"Accesses synchronous (blocking) version of channel operations.\n\nFor example, `ch.sync.recv?` blocks until the next message,\nand `for msg in ch.sync do ...` iterates synchronously over the channel.\nThese functions should only be used in dedicated threads.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.sync\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">sync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ch : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel\">IO.Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel.Sync\">IO.Channel.Sync</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L104-L104","name":"IO.Channel.Sync","line":104,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.Sync","doc":"Type tag for synchronous (blocking) operations on a `Channel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.Sync\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L99-L101","name":"IO.Channel.recvAllCurrent","line":99,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.recvAllCurrent","doc":"Receives all currently queued messages from the channel.\n\nThose messages are dequeued and will not be returned by `recv?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.recvAllCurrent\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">recvAllCurrent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ch : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel\">IO.Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L88-L92","name":"IO.Channel.forAsync","line":88,"kind":"opaque","docLink":"./Init/Data/Channel.html#IO.Channel.forAsync","doc":"`ch.forAsync f` calls `f` for every messages received on `ch`.\n\nNote that if this function is called twice, each `forAsync` only gets half the messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.forAsync\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">forAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ch : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel\">IO.Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prio : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L70-L81","name":"IO.Channel.recv?","line":70,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.recv?","doc":"Receives a message, without blocking.\nThe returned task waits for the message.\nEvery message is only received once.\n\nReturns `none` if the channel is closed and the queue is empty.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.recv?\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">recv?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ch : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel\">IO.Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L57-L61","name":"IO.Channel.close","line":57,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.close","doc":"Closes an `Channel`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.close\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">close</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ch : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel\">IO.Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L44-L52","name":"IO.Channel.send","line":44,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.send","doc":"Sends a message on an `Channel`.\n\nThis function does not block.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.send\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ch : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel\">IO.Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L36-L37","name":"IO.Channel.new","line":36,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.new","doc":"Creates a new `Channel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.new\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel\">IO.Channel</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L32-L33","name":"IO.instNonemptyChannel","line":32,"kind":"instance","docLink":"./Init/Data/Channel.html#IO.instNonemptyChannel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.instNonemptyChannel\"><span class=\"name\">IO</span>.<span class=\"name\">instNonemptyChannel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> (<span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel\">IO.Channel</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L30-L30","name":"IO.Channel","line":30,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel","doc":"FIFO channel with unbounded buffer, where `recv?` returns a `Task`.\n\nA channel can be closed.  Once it is closed, all `send`s are ignored, and\n`recv?` returns `none` once the queue is empty.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L22-L22","name":"IO.Channel.instInhabitedState","line":22,"kind":"instance","docLink":"./Init/Data/Channel.html#IO.Channel.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.instInhabitedState\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel.State\">IO.Channel.State</a> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L21-L21","name":"IO.Channel.State.closed","line":21,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.State.closed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.State.closed\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">State</span>.<span class=\"name\">closed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel.State\">IO.Channel.State</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L20-L20","name":"IO.Channel.State.consumers","line":20,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.State.consumers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.State.consumers\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">State</span>.<span class=\"name\">consumers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel.State\">IO.Channel.State</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> (<span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L19-L19","name":"IO.Channel.State.values","line":19,"kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.State.values","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.State.values\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">State</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel.State\">IO.Channel.State</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L18-L18","name":"IO.Channel.State.mk","line":18,"kind":"ctor","docLink":"./Init/Data/Channel.html#IO.Channel.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.State.mk\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(values : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(consumers : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> (<span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(closed : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Channel.html#IO.Channel.State\">IO.Channel.State</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Channel.lean#L18-L22","name":"IO.Channel.State","line":18,"kind":"structure","docLink":"./Init/Data/Channel.html#IO.Channel.State","doc":"Internal state of an `Channel`.\n\nWe maintain the invariant that at all times either `consumers` or `values` is empty.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Channel.html#IO.Channel.State\"><span class=\"name\">IO</span>.<span class=\"name\">Channel</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}