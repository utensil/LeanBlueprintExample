{"name":"Lean.Compiler.ConstFolding","instances":[],"imports":["Init","Lean.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L223-L228","name":"Lean.Compiler.foldUnOp","line":223,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUnOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUnOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUnOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L214-L220","name":"Lean.Compiler.foldBinOp","line":214,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldBinOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldBinOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldBinOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L210-L211","name":"Lean.Compiler.findUnFoldFn","line":210,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.findUnFoldFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.findUnFoldFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">findUnFoldFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn\">Lean.Compiler.UnFoldFn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L207-L208","name":"Lean.Compiler.findBinFoldFn","line":207,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.findBinFoldFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.findBinFoldFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">findBinFoldFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">Lean.Compiler.BinFoldFn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L202-L205","name":"Lean.Compiler.unFoldFns","line":202,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.unFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.unFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">unFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn\">Lean.Compiler.UnFoldFn</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L199-L200","name":"Lean.Compiler.uintFoldToNatFns","line":199,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.uintFoldToNatFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.uintFoldToNatFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">uintFoldToNatFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn\">Lean.Compiler.UnFoldFn</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L195-L197","name":"Lean.Compiler.foldToNat","line":195,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldToNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldToNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L187-L193","name":"Lean.Compiler.foldCharOfNat","line":187,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldCharOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldCharOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldCharOfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L183-L185","name":"Lean.Compiler.foldNatSucc","line":183,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatSucc\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L180-L181","name":"Lean.Compiler.binFoldFns","line":180,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.binFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.binFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">binFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">Lean.Compiler.BinFoldFn</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L177-L178","name":"Lean.Compiler.boolFoldFns","line":177,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.boolFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.boolFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">boolFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">Lean.Compiler.BinFoldFn</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L167-L175","name":"Lean.Compiler.foldStrictOr","line":167,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldStrictOr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldStrictOr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldStrictOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L157-L165","name":"Lean.Compiler.foldStrictAnd","line":157,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldStrictAnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldStrictAnd\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldStrictAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L152-L155","name":"Lean.Compiler.getBoolLit","line":152,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getBoolLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getBoolLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getBoolLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L138-L150","name":"Lean.Compiler.natFoldFns","line":138,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.natFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.natFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">natFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">Lean.Compiler.BinFoldFn</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L136-L136","name":"Lean.Compiler.foldNatBlt","line":136,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L135-L135","name":"Lean.Compiler.foldNatBle","line":135,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBle\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBle</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L134-L134","name":"Lean.Compiler.foldNatBeq","line":134,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L126-L132","name":"Lean.Compiler.foldNatBinBoolPred","line":126,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinBoolPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinBoolPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBinBoolPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L124-L124","name":"Lean.Compiler.foldNatDecLe","line":124,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecLe\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatDecLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L123-L123","name":"Lean.Compiler.foldNatDecLt","line":123,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatDecLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L122-L122","name":"Lean.Compiler.foldNatDecEq","line":122,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatDecEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L116-L120","name":"Lean.Compiler.foldNatBinPred","line":116,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBinPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mkPred : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L109-L114","name":"Lean.Compiler.toDecidableExpr","line":109,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.toDecidableExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.toDecidableExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">toDecidableExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pred : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L106-L107","name":"Lean.Compiler.mkNatLe","line":106,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatLe\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkNatLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L103-L104","name":"Lean.Compiler.mkNatLt","line":103,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkNatLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L100-L101","name":"Lean.Compiler.mkNatEq","line":100,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkNatEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L92-L98","name":"Lean.Compiler.foldNatPow","line":92,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L90-L90","name":"Lean.Compiler.natPowThreshold","line":90,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.natPowThreshold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.natPowThreshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">natPowThreshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L87-L87","name":"Lean.Compiler.foldNatMod","line":87,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L86-L86","name":"Lean.Compiler.foldNatDiv","line":86,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L85-L85","name":"Lean.Compiler.foldNatMul","line":85,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L84-L84","name":"Lean.Compiler.foldNatAdd","line":84,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L79-L82","name":"Lean.Compiler.foldNatBinOp","line":79,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBinOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L76-L77","name":"Lean.Compiler.uintBinFoldFns","line":76,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.uintBinFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.uintBinFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">uintBinFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">Lean.Compiler.BinFoldFn</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L72-L74","name":"Lean.Compiler.preUIntBinFoldFns","line":72,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.preUIntBinFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.preUIntBinFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">preUIntBinFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">Lean.Compiler.BinFoldFn</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L70-L70","name":"Lean.Compiler.foldUIntSub","line":70,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntSub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L69-L69","name":"Lean.Compiler.foldUIntMod","line":69,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L68-L68","name":"Lean.Compiler.foldUIntDiv","line":68,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntDiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntDiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L67-L67","name":"Lean.Compiler.foldUIntMul","line":67,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L66-L66","name":"Lean.Compiler.foldUIntAdd","line":66,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L60-L64","name":"Lean.Compiler.foldBinUInt","line":60,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldBinUInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldBinUInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldBinUInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beforeErasure : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L57-L58","name":"Lean.Compiler.mkUInt32Lit","line":57,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUInt32Lit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUInt32Lit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkUInt32Lit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L54-L55","name":"Lean.Compiler.mkUIntLit","line":54,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUIntLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUIntLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkUIntLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L49-L52","name":"Lean.Compiler.getNumLit","line":49,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getNumLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getNumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getNumLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L44-L46","name":"Lean.Compiler.getInfoFromVal","line":44,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getInfoFromVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getInfoFromVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getInfoFromVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L38-L42","name":"Lean.Compiler.getInfoFromFn","line":38,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getInfoFromFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getInfoFromFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getInfoFromFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L35-L36","name":"Lean.Compiler.isToNat","line":35,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.isToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.isToNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">isToNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L32-L33","name":"Lean.Compiler.isOfNat","line":32,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.isOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.isOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">isOfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L28-L30","name":"Lean.Compiler.numScalarTypes","line":28,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.numScalarTypes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.numScalarTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">numScalarTypes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L26-L26","name":"Lean.Compiler.NumScalarTypeInfo.size","line":26,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L25-L25","name":"Lean.Compiler.NumScalarTypeInfo.toNatFn","line":25,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.toNatFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.toNatFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">toNatFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L24-L24","name":"Lean.Compiler.NumScalarTypeInfo.ofNatFn","line":24,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.ofNatFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.ofNatFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">ofNatFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L23-L23","name":"Lean.Compiler.NumScalarTypeInfo.id","line":23,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L22-L22","name":"Lean.Compiler.NumScalarTypeInfo.nbits","line":22,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.nbits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.nbits\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">nbits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L21-L26","name":"Lean.Compiler.NumScalarTypeInfo","line":21,"kind":"structure","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L18-L19","name":"Lean.Compiler.mkUIntTypeName","line":18,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUIntTypeName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUIntTypeName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkUIntTypeName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(nbytes : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L16-L16","name":"Lean.Compiler.UnFoldFn","line":16,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">UnFoldFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L15-L15","name":"Lean.Compiler.BinFoldFn","line":15,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">BinFoldFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L12-L13","name":"Lean.Compiler.mkLcProof","line":12,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkLcProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkLcProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkLcProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/ConstFolding.lean#L1-L1","name":"Lean.Compiler.NumScalarTypeInfo.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(nbits : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ofNatFn : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toNatFn : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">Lean.Compiler.NumScalarTypeInfo</a></div></div>"}]}