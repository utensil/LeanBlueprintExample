{"name":"Lean.Server.AsyncList","instances":[{"typeNames":["IO.AsyncList"],"name":"IO.AsyncList.instInhabitedAsyncList","className":"Inhabited"},{"typeNames":["IO.AsyncList"],"name":"IO.AsyncList.instAppendAsyncList","className":"Append"},{"typeNames":["List","IO.AsyncList"],"name":"IO.AsyncList.instCoeListAsyncList","className":"Coe"}],"imports":["Init","Init.System.IO"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L112-L113","name":"IO.AsyncList.waitHead?","line":112,"kind":"def","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitHead?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.waitHead?\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">waitHead?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L100-L110","name":"IO.AsyncList.getFinishedPrefix","line":100,"kind":"opaque","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefix","doc":"Retrieve the already-computed prefix of the list. If computation has finished with an error, return it as well. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefix\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">getFinishedPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L89-L97","name":"IO.AsyncList.waitFind?","line":89,"kind":"opaque","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitFind?","doc":"Spawns a `Task` acting like `List.find?` but which will wait for tail evalution\nwhen necessary to traverse the list. If the tail terminates before a matching element\nis found, the task throws the terminating value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.waitFind?\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">waitFind?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L83-L84","name":"IO.AsyncList.waitAll","line":83,"kind":"def","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitAll","doc":"Spawns a `Task` waiting on all elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.waitAll\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">waitAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L70-L80","name":"IO.AsyncList.waitUntil","line":70,"kind":"opaque","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitUntil","doc":"Spawns a `Task` returning the prefix of elements up to (including) the first element for which `p` is true.\nWhen `p` is not true of any element, it returns the entire list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.waitUntil\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">waitUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L58-L66","name":"IO.AsyncList.getAll","line":58,"kind":"opaque","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.getAll","doc":"The computed, synchronous list. If an async tail was present, returns also\nits terminating value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.getAll\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">getAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L45-L51","name":"IO.AsyncList.unfoldAsync.step","line":45,"kind":"opaque","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.unfoldAsync.step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.unfoldAsync.step\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">unfoldAsync</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> (<span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span></span>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> (<span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L43-L54","name":"IO.AsyncList.unfoldAsync","line":43,"kind":"def","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.unfoldAsync","doc":"A stateful step computation `f` is applied iteratively, forming an async\nstream. The stream ends once `f` returns `none` for the first time.\n\nFor cooperatively cancelling an ongoing computation, we recommend referencing\na cancellation token in `f` and checking it when appropriate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.unfoldAsync\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">unfoldAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> (<span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span></span>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L36-L36","name":"IO.AsyncList.instCoeListAsyncList","line":36,"kind":"instance","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.instCoeListAsyncList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.instCoeListAsyncList\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">instCoeListAsyncList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L33-L34","name":"IO.AsyncList.ofList","line":33,"kind":"def","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.ofList\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L31-L31","name":"IO.AsyncList.instAppendAsyncList","line":31,"kind":"instance","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.instAppendAsyncList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.instAppendAsyncList\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">instAppendAsyncList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> (<span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L26-L29","name":"IO.AsyncList.append","line":26,"kind":"opaque","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.append\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L23-L23","name":"IO.AsyncList.instInhabitedAsyncList","line":23,"kind":"instance","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.instInhabitedAsyncList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.instInhabitedAsyncList\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">instInhabitedAsyncList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L19-L19","name":"IO.AsyncList.nil","line":19,"kind":"ctor","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.nil\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L18-L18","name":"IO.AsyncList.delayed","line":18,"kind":"ctor","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.delayed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.delayed\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">delayed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tl : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> (<span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L17-L17","name":"IO.AsyncList.cons","line":17,"kind":"ctor","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.cons\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tl : <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">IO.AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Server/AsyncList.lean#L16-L19","name":"IO.AsyncList","line":16,"kind":"inductive","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList","doc":"An async IO list is like a lazy list but instead of being *unevaluated* `Thunk`s,\n`delayed` suffixes are `Task`s *being evaluated asynchronously*. A delayed suffix can signal the end\nof computation (successful or due to a failure) with a terminating value of type `ε`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ε : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"}]}