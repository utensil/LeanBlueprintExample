{"name":"Lean.Elab.PreDefinition.Structural.BRecOn","instances":[],"imports":["Init","Lean.Util.HasConstCache","Lean.Meta.CasesOn","Lean.Meta.Match.Match","Lean.Elab.RecAppSyntax","Lean.Elab.PreDefinition.Basic","Lean.Elab.PreDefinition.Structural.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L199-L239","name":"Lean.Elab.Structural.mkBRecOn","line":199,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBRecOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(recFnName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(recArgInfo : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.RecArgInfo\">Lean.Elab.Structural.RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">Lean.Elab.Structural.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L90-L98","name":"Lean.Elab.Structural.refinedArgType","line":90,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.refinedArgType","doc":"This method is used after `matcherApp.addArg arg` to check whether the new type of `arg` has been \"refined/modified\"\nin at least one alternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.refinedArgType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">refinedArgType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(matcherApp : <a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.MatcherApp\">Lean.Meta.MatcherApp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}