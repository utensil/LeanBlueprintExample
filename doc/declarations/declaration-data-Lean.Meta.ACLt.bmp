{"name":"Lean.Meta.ACLt","instances":[],"imports":["Init","Lean.Meta.Basic","Lean.Meta.FunInfo","Lean.Meta.DiscrTree"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L179-L179","name":"Lean.Meta.Expr.acLt","line":179,"kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.Expr.acLt","doc":"An AC-compatible ordering.\n\nRecall that an AC-compatible ordering if it is monotonic, well-founded, and total.\nBoth KBO and LPO are AC-compatible. KBO is faster, but we do not cache the weight of\neach expression in Lean 4. Even if we did, we would need to have a weight where implicit instace arguments are ignored.\nSo, we use a LPO-like term ordering.\n\nRemark: this method is used to implement ordered rewriting. We ignore implicit instance\narguments to address an issue reported at issue #972.\n\nRemark: the order is not really total on terms since\n - We instance implicit arguments.\n - We ignore metadata.\n - We ignore universe parameterst at constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.Expr.acLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Expr</span>.<span class=\"name\">acLt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L157-L172","name":"Lean.Meta.ACLt.main.lpo","line":157,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lpo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lpo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">lpo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L154-L155","name":"Lean.Meta.ACLt.main.someChildGe","line":154,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.someChildGe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.someChildGe\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">someChildGe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L134-L152","name":"Lean.Meta.ACLt.main.allChildrenLt","line":134,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.allChildrenLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.allChildrenLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">allChildrenLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L116-L132","name":"Lean.Meta.ACLt.main.lexSameCtor","line":116,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lexSameCtor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lexSameCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">lexSameCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L86-L114","name":"Lean.Meta.ACLt.main.ltApp","line":86,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">ltApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L78-L84","name":"Lean.Meta.ACLt.main.ltPair","line":78,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltPair\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">ltPair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L67-L76","name":"Lean.Meta.ACLt.main.lt","line":67,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L55-L65","name":"Lean.Meta.ACLt.main.reduce","line":55,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.reduce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.reduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">reduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L52-L172","name":"Lean.Meta.ACLt.main","line":52,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main","doc":"An AC-compatible ordering.\n\nRecall that an AC-compatible ordering if it is monotonic, well-founded, and total.\nBoth KBO and LPO are AC-compatible. KBO is faster, but we do not cache the weight of\neach expression in Lean 4. Even if we did, we would need to have a weight where implicit instace arguments are ignored.\nSo, we use a LPO-like term ordering.\n\nRemark: this method is used to implement ordered rewriting. We ignore implicit instance\narguments to address an issue reported at issue #972.\n\nRemark: the order is not really total on terms since\n - We instance implicit arguments.\n - We ignore metadata.\n - We ignore universe parameterst at constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a> <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">Lean.Meta.ACLt.ReduceMode.none</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L32-L32","name":"Lean.Meta.ACLt.ReduceMode.none","line":32,"kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L31-L31","name":"Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly","line":31,"kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">reduceSimpleOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L30-L30","name":"Lean.Meta.ACLt.ReduceMode.reduce","line":30,"kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">reduce</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">Lean.Meta.ACLt.ReduceMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L29-L32","name":"Lean.Meta.ACLt.ReduceMode","line":29,"kind":"inductive","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/ACLt.lean#L12-L24","name":"Lean.Expr.ctorWeight","line":12,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Expr.ctorWeight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Expr.ctorWeight\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ctorWeight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"}]}