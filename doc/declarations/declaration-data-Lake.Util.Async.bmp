{"name":"Lake.Util.Async","instances":[{"typeNames":["Id","Id","Task"],"name":"Lake.instSyncIdTask","className":"Lake.Sync"},{"typeNames":["BaseIO","BaseIO","Lake.BaseIOTask"],"name":"Lake.instSyncBaseIOBaseIOTask","className":"Lake.Sync"},{"typeNames":["ReaderT","ReaderT"],"name":"Lake.instSyncReaderTReaderT","className":"Lake.Sync"},{"typeNames":["ExceptT","ExceptT"],"name":"Lake.instSyncExceptTExceptT","className":"Lake.Sync"},{"typeNames":["OptionT","OptionT"],"name":"Lake.instSyncOptionTOptionT","className":"Lake.Sync"},{"typeNames":["EIO","BaseIO","Lake.EIOTask"],"name":"Lake.instSyncEIOBaseIOEIOTask","className":"Lake.Sync"},{"typeNames":["Lake.OptionIO","BaseIO","Lake.OptionIOTask"],"name":"Lake.instSyncOptionIOBaseIOOptionIOTask","className":"Lake.Sync"},{"typeNames":["Id","Id","Task"],"name":"Lake.instAsyncIdTask","className":"Lake.Async"},{"typeNames":["BaseIO","BaseIO","Lake.BaseIOTask"],"name":"Lake.instAsyncBaseIOBaseIOTask","className":"Lake.Async"},{"typeNames":["ReaderT","ReaderT"],"name":"Lake.instAsyncReaderTReaderT","className":"Lake.Async"},{"typeNames":["ExceptT","ExceptT"],"name":"Lake.instAsyncExceptTExceptT","className":"Lake.Async"},{"typeNames":["OptionT","OptionT"],"name":"Lake.instAsyncOptionTOptionT","className":"Lake.Async"},{"typeNames":["EIO","BaseIO","Lake.EIOTask"],"name":"Lake.instAsyncEIOBaseIOEIOTask","className":"Lake.Async"},{"typeNames":["Lake.OptionIO","BaseIO","Lake.OptionIOTask"],"name":"Lake.instAsyncOptionIOBaseIOOptionIOTask","className":"Lake.Async"},{"typeNames":["Task","Id"],"name":"Lake.instAwaitTaskId","className":"Lake.Await"},{"typeNames":["Lake.EIOTask","EIO"],"name":"Lake.instAwaitEIOTaskEIO","className":"Lake.Await"},{"typeNames":["Lake.OptionIOTask","Lake.OptionIO"],"name":"Lake.instAwaitOptionIOTaskOptionIO","className":"Lake.Await"},{"typeNames":["ExceptT","ExceptT"],"name":"Lake.instAwaitExceptTExceptT","className":"Lake.Await"},{"typeNames":["OptionT","OptionT"],"name":"Lake.instAwaitOptionTOptionT","className":"Lake.Await"},{"typeNames":["Id","Id","Task"],"name":"Lake.instBindSyncIdTask","className":"Lake.BindSync"},{"typeNames":["BaseIO","BaseIO","Lake.BaseIOTask"],"name":"Lake.instBindSyncBaseIOBaseIOTask","className":"Lake.BindSync"},{"typeNames":["EIO","BaseIO","Lake.ETask"],"name":"Lake.instBindSyncEIOBaseIOETask","className":"Lake.BindSync"},{"typeNames":["Lake.OptionIO","BaseIO","Lake.OptionIOTask"],"name":"Lake.instBindSyncOptionIOBaseIOOptionIOTask","className":"Lake.BindSync"},{"typeNames":["ReaderT","ReaderT"],"name":"Lake.instBindSyncReaderTReaderT","className":"Lake.BindSync"},{"typeNames":["ExceptT","ExceptT"],"name":"Lake.instBindSyncExceptTExceptT","className":"Lake.BindSync"},{"typeNames":["OptionT","OptionT"],"name":"Lake.instBindSyncOptionTOptionT","className":"Lake.BindSync"},{"typeNames":["Id","Task"],"name":"Lake.instBindAsyncIdTask","className":"Lake.BindAsync"},{"typeNames":["BaseIO","Lake.BaseIOTask"],"name":"Lake.instBindAsyncBaseIOBaseIOTask","className":"Lake.BindAsync"},{"typeNames":["BaseIO","Lake.EIOTask"],"name":"Lake.instBindAsyncBaseIOEIOTask","className":"Lake.BindAsync"},{"typeNames":["BaseIO","Lake.OptionIOTask"],"name":"Lake.instBindAsyncBaseIOOptionIOTask","className":"Lake.BindAsync"},{"typeNames":["ReaderT"],"name":"Lake.instBindAsyncReaderT","className":"Lake.BindAsync"},{"typeNames":["ExceptT"],"name":"Lake.instBindAsyncExceptT","className":"Lake.BindAsync"},{"typeNames":["OptionT"],"name":"Lake.instBindAsyncOptionT","className":"Lake.BindAsync"},{"typeNames":["Id","Task"],"name":"Lake.instApplicativeAsyncIdTask","className":"Lake.ApplicativeAsync"},{"typeNames":["BaseIO","Lake.BaseIOTask"],"name":"Lake.instApplicativeAsyncBaseIOBaseIOTask","className":"Lake.ApplicativeAsync"},{"typeNames":["ExceptT"],"name":"Lake.instApplicativeAsyncExceptT","className":"Lake.ApplicativeAsync"},{"typeNames":["OptionT"],"name":"Lake.instApplicativeAsyncOptionT","className":"Lake.ApplicativeAsync"}],"imports":["Init","Lake.Util.Task","Lake.Util.OptionIO","Lake.Util.Lift"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L266-L267","name":"Lake.foldRightArrayAsync","line":266,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.foldRightArrayAsync","doc":"Fold an `Array` of (a)synchronous tasks from left to right (i.e., a left fold) into a single task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.foldRightArrayAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">foldRightArrayAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\">Lake.SeqWithAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L262-L263","name":"Lake.foldRightListAsync","line":262,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.foldRightListAsync","doc":"Fold a `List` of (a)synchronous tasks from left to right (i.e., a left fold) into a single task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.foldRightListAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">foldRightListAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\">Lake.SeqWithAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L258-L259","name":"Lake.foldLeftArrayAsync","line":258,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.foldLeftArrayAsync","doc":"Fold an `Array` of (a)synchronous tasks from right to left (i.e., a right fold) into a single task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.foldLeftArrayAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">foldLeftArrayAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\">Lake.SeqWithAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L254-L255","name":"Lake.foldLeftListAsync","line":254,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.foldLeftListAsync","doc":"Fold a `List` of (a)synchronous tasks from right to left (i.e., a right fold) into a single task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.foldLeftListAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">foldLeftListAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\">Lake.SeqWithAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L243-L247","name":"Lake.seqRightArrayAsync","line":243,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.seqRightArrayAsync","doc":"Combine all (a)synchronous tasks in a `Array` from left to right into a single task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.seqRightArrayAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">seqRightArrayAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqRightAsync\">Lake.SeqRightAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L236-L240","name":"Lake.seqLeftArrayAsync","line":236,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.seqLeftArrayAsync","doc":"Combine all (a)synchronous tasks in a `Array` from right to left into a single task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.seqLeftArrayAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">seqLeftArrayAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync\">Lake.SeqLeftAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L231-L233","name":"Lake.seqRightListAsync","line":231,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.seqRightListAsync","doc":"Combine all (a)synchronous tasks in a `List` from left to right into a single task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.seqRightListAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">seqRightListAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqRightAsync\">Lake.SeqRightAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L226-L228","name":"Lake.seqLeftListAsync","line":226,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.seqLeftListAsync","doc":"Combine all (a)synchronous tasks in a `List` from right to left into a single task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.seqLeftListAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">seqLeftListAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync\">Lake.SeqLeftAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L221-L223","name":"Lake.seqLeftList1Async","line":221,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.seqLeftList1Async","doc":"Combine all (a)synchronous tasks in a `List` from right to left into a single task ending `last`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.seqLeftList1Async\"><span class=\"name\">Lake</span>.<span class=\"name\">seqLeftList1Async</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync\">Lake.SeqLeftAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(last : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L209-L212","name":"Lake.instApplicativeAsyncOptionT","line":209,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instApplicativeAsyncOptionT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instApplicativeAsyncOptionT\"><span class=\"name\">Lake</span>.<span class=\"name\">instApplicativeAsyncOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync\">Lake.ApplicativeAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync\">Lake.ApplicativeAsync</a> <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L204-L207","name":"Lake.instApplicativeAsyncExceptT","line":204,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instApplicativeAsyncExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instApplicativeAsyncExceptT\"><span class=\"name\">Lake</span>.<span class=\"name\">instApplicativeAsyncExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync\">Lake.ApplicativeAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync\">Lake.ApplicativeAsync</a> <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L201-L202","name":"Lake.instApplicativeAsyncBaseIOBaseIOTask","line":201,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instApplicativeAsyncBaseIOBaseIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instApplicativeAsyncBaseIOBaseIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instApplicativeAsyncBaseIOBaseIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync\">Lake.ApplicativeAsync</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.BaseIOTask\">Lake.BaseIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L198-L199","name":"Lake.instApplicativeAsyncIdTask","line":198,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instApplicativeAsyncIdTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instApplicativeAsyncIdTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instApplicativeAsyncIdTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync\">Lake.ApplicativeAsync</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Core.html#Task\">Task</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L193-L196","name":"Lake.instBindAsyncOptionT","line":193,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindAsyncOptionT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindAsyncOptionT\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindAsyncOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L188-L191","name":"Lake.instBindAsyncExceptT","line":188,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindAsyncExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindAsyncExceptT\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindAsyncExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L185-L186","name":"Lake.instBindAsyncReaderT","line":185,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindAsyncReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindAsyncReaderT\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindAsyncReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">n</span></span>) <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L180-L183","name":"Lake.instBindAsyncBaseIOOptionIOTask","line":180,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindAsyncBaseIOOptionIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindAsyncBaseIOOptionIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindAsyncBaseIOOptionIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.OptionIOTask\">Lake.OptionIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L175-L178","name":"Lake.instBindAsyncBaseIOEIOTask","line":175,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindAsyncBaseIOEIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindAsyncBaseIOEIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindAsyncBaseIOEIOTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Lake/Util/Task.html#Lake.EIOTask\">Lake.EIOTask</a> <span class=\"fn\">ε</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L173-L173","name":"Lake.instBindAsyncBaseIOBaseIOTask","line":173,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindAsyncBaseIOBaseIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindAsyncBaseIOBaseIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindAsyncBaseIOBaseIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.BaseIOTask\">Lake.BaseIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L172-L172","name":"Lake.instBindAsyncIdTask","line":172,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindAsyncIdTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindAsyncIdTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindAsyncIdTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Core.html#Task\">Task</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L167-L170","name":"Lake.instBindSyncOptionTOptionT","line":167,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindSyncOptionTOptionT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindSyncOptionTOptionT\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindSyncOptionTOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span></span>) <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L162-L165","name":"Lake.instBindSyncExceptTExceptT","line":162,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindSyncExceptTExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindSyncExceptTExceptT\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindSyncExceptTExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>) <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L159-L160","name":"Lake.instBindSyncReaderTReaderT","line":159,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindSyncReaderTReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindSyncReaderTReaderT\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindSyncReaderTReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">n</span></span>) <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L154-L157","name":"Lake.instBindSyncOptionIOBaseIOOptionIOTask","line":154,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindSyncOptionIOBaseIOOptionIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindSyncOptionIOBaseIOOptionIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindSyncOptionIOBaseIOOptionIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> <a href=\"./Lake/Util/OptionIO.html#Lake.OptionIO\">Lake.OptionIO</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.OptionIOTask\">Lake.OptionIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L149-L152","name":"Lake.instBindSyncEIOBaseIOETask","line":149,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindSyncEIOBaseIOETask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindSyncEIOBaseIOETask\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindSyncEIOBaseIOETask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> (<span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span></span>) <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Lake/Util/Task.html#Lake.ETask\">Lake.ETask</a> <span class=\"fn\">ε</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L147-L147","name":"Lake.instBindSyncBaseIOBaseIOTask","line":147,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindSyncBaseIOBaseIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindSyncBaseIOBaseIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindSyncBaseIOBaseIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.BaseIOTask\">Lake.BaseIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L146-L146","name":"Lake.instBindSyncIdTask","line":146,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instBindSyncIdTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instBindSyncIdTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instBindSyncIdTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Core.html#Task\">Task</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L138-L138","name":"Lake.ApplicativeAsync.mk","line":138,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.ApplicativeAsync.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">ApplicativeAsync</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toSeqAsync : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqAsync\">Lake.SeqAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toSeqLeftAsync : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync\">Lake.SeqLeftAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toSeqRightAsync : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqRightAsync\">Lake.SeqRightAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toSeqWithAsync : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\">Lake.SeqWithAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync\">Lake.ApplicativeAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L138-L142","name":"Lake.ApplicativeAsync","line":138,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.ApplicativeAsync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.ApplicativeAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">ApplicativeAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqAsync</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqLeftAsync</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqRightAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqRightAsync</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqWithAsync</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L134-L134","name":"Lake.SeqWithAsync.seqWithAsync","line":134,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.SeqWithAsync.seqWithAsync","doc":"Combine two (a)synchronous tasks using `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqWithAsync.seqWithAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqWithAsync</span>.<span class=\"name\">seqWithAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\">Lake.SeqWithAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">γ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L132-L132","name":"Lake.SeqWithAsync.mk","line":132,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.SeqWithAsync.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqWithAsync.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqWithAsync</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(seqWithAsync : <span class=\"fn\">{<span class=\"fn\">γ </span>α β : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">γ</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\">Lake.SeqWithAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L132-L134","name":"Lake.SeqWithAsync","line":132,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.SeqWithAsync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqWithAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqWithAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L128-L128","name":"Lake.SeqRightAsync.seqRightAsync","line":128,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.SeqRightAsync.seqRightAsync","doc":"Combine two (a)synchronous tasks, returning the result of the second one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqRightAsync.seqRightAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqRightAsync</span>.<span class=\"name\">seqRightAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqRightAsync\">Lake.SeqRightAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L126-L126","name":"Lake.SeqRightAsync.mk","line":126,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.SeqRightAsync.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqRightAsync.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqRightAsync</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(seqRightAsync : <span class=\"fn\">{<span class=\"fn\">α </span>β : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqRightAsync\">Lake.SeqRightAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L126-L128","name":"Lake.SeqRightAsync","line":126,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.SeqRightAsync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqRightAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqRightAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L122-L122","name":"Lake.SeqLeftAsync.seqLeftAsync","line":122,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.SeqLeftAsync.seqLeftAsync","doc":"Combine two (a)synchronous tasks, returning the result of the first one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync.seqLeftAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqLeftAsync</span>.<span class=\"name\">seqLeftAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync\">Lake.SeqLeftAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L120-L120","name":"Lake.SeqLeftAsync.mk","line":120,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.SeqLeftAsync.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqLeftAsync</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(seqLeftAsync : <span class=\"fn\">{<span class=\"fn\">α </span>β : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync\">Lake.SeqLeftAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L120-L122","name":"Lake.SeqLeftAsync","line":120,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.SeqLeftAsync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqLeftAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqLeftAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L116-L116","name":"Lake.SeqAsync.seqAsync","line":116,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.SeqAsync.seqAsync","doc":"Combine two (a)synchronous tasks, applying the result of the second one ot the first one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqAsync.seqAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqAsync</span>.<span class=\"name\">seqAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqAsync\">Lake.SeqAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> (<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L114-L114","name":"Lake.SeqAsync.mk","line":114,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.SeqAsync.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqAsync.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqAsync</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(seqAsync : <span class=\"fn\">{<span class=\"fn\">α </span>β : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> (<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.SeqAsync\">Lake.SeqAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L114-L116","name":"Lake.SeqAsync","line":114,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.SeqAsync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.SeqAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">SeqAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L110-L110","name":"Lake.BindAsync.bindAsync","line":110,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.BindAsync.bindAsync","doc":"Perform a asynchronous task after another (a)synchronous task completes successfully. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.BindAsync.bindAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">BindAsync</span>.<span class=\"name\">bindAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L108-L108","name":"Lake.BindAsync.mk","line":108,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.BindAsync.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.BindAsync.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">BindAsync</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bindAsync : <span class=\"fn\">{<span class=\"fn\">α </span>β : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindAsync\">Lake.BindAsync</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L108-L110","name":"Lake.BindAsync","line":108,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.BindAsync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.BindAsync\"><span class=\"name\">Lake</span>.<span class=\"name\">BindAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L104-L104","name":"Lake.BindSync.bindSync","line":104,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.BindSync.bindSync","doc":"Perform a synchronous action after another (a)synchronous task completes successfully. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.BindSync.bindSync\"><span class=\"name\">Lake</span>.<span class=\"name\">BindSync</span>.<span class=\"name\">bindSync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>) → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L102-L102","name":"Lake.BindSync.mk","line":102,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.BindSync.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.BindSync.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">BindSync</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bindSync : <span class=\"fn\">{<span class=\"fn\">α </span>β : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>) → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">β</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.BindSync\">Lake.BindSync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L102-L104","name":"Lake.BindSync","line":102,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.BindSync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.BindSync\"><span class=\"name\">Lake</span>.<span class=\"name\">BindSync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max (max (u + 1) u') v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L95-L96","name":"Lake.instAwaitOptionTOptionT","line":95,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAwaitOptionTOptionT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAwaitOptionTOptionT\"><span class=\"name\">Lake</span>.<span class=\"name\">instAwaitOptionTOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">k</span></span>) (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L92-L93","name":"Lake.instAwaitExceptTExceptT","line":92,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAwaitExceptTExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAwaitExceptTExceptT\"><span class=\"name\">Lake</span>.<span class=\"name\">instAwaitExceptTExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">k</span></span>) (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L89-L90","name":"Lake.instAwaitOptionIOTaskOptionIO","line":89,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAwaitOptionIOTaskOptionIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAwaitOptionIOTaskOptionIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instAwaitOptionIOTaskOptionIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> <a href=\"./Lake/Util/Task.html#Lake.OptionIOTask\">Lake.OptionIOTask</a> <a href=\"./Lake/Util/OptionIO.html#Lake.OptionIO\">Lake.OptionIO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L86-L87","name":"Lake.instAwaitEIOTaskEIO","line":86,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAwaitEIOTaskEIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAwaitEIOTaskEIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instAwaitEIOTaskEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> (<span class=\"fn\"><a href=\"./Lake/Util/Task.html#Lake.EIOTask\">Lake.EIOTask</a> <span class=\"fn\">ε</span></span>) (<span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L84-L84","name":"Lake.instAwaitTaskId","line":84,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAwaitTaskId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAwaitTaskId\"><span class=\"name\">Lake</span>.<span class=\"name\">instAwaitTaskId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> <a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L81-L82","name":"Lake.instAsyncOptionIOBaseIOOptionIOTask","line":81,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAsyncOptionIOBaseIOOptionIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAsyncOptionIOBaseIOOptionIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instAsyncOptionIOBaseIOOptionIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> <a href=\"./Lake/Util/OptionIO.html#Lake.OptionIO\">Lake.OptionIO</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.OptionIOTask\">Lake.OptionIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L78-L79","name":"Lake.instAsyncEIOBaseIOEIOTask","line":78,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAsyncEIOBaseIOEIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAsyncEIOBaseIOEIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instAsyncEIOBaseIOEIOTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> (<span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span></span>) <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Lake/Util/Task.html#Lake.EIOTask\">Lake.EIOTask</a> <span class=\"fn\">ε</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L75-L76","name":"Lake.instAsyncOptionTOptionT","line":75,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAsyncOptionTOptionT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAsyncOptionTOptionT\"><span class=\"name\">Lake</span>.<span class=\"name\">instAsyncOptionTOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span></span>) <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L72-L73","name":"Lake.instAsyncExceptTExceptT","line":72,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAsyncExceptTExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAsyncExceptTExceptT\"><span class=\"name\">Lake</span>.<span class=\"name\">instAsyncExceptTExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>) <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L69-L70","name":"Lake.instAsyncReaderTReaderT","line":69,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAsyncReaderTReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAsyncReaderTReaderT\"><span class=\"name\">Lake</span>.<span class=\"name\">instAsyncReaderTReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">n</span></span>) <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L67-L67","name":"Lake.instAsyncBaseIOBaseIOTask","line":67,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAsyncBaseIOBaseIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAsyncBaseIOBaseIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instAsyncBaseIOBaseIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.BaseIOTask\">Lake.BaseIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L66-L66","name":"Lake.instAsyncIdTask","line":66,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instAsyncIdTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instAsyncIdTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instAsyncIdTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Core.html#Task\">Task</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L63-L64","name":"Lake.instSyncOptionIOBaseIOOptionIOTask","line":63,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instSyncOptionIOBaseIOOptionIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instSyncOptionIOBaseIOOptionIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instSyncOptionIOBaseIOOptionIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> <a href=\"./Lake/Util/OptionIO.html#Lake.OptionIO\">Lake.OptionIO</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.OptionIOTask\">Lake.OptionIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L60-L61","name":"Lake.instSyncEIOBaseIOEIOTask","line":60,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instSyncEIOBaseIOEIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instSyncEIOBaseIOEIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instSyncEIOBaseIOEIOTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> (<span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span></span>) <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Lake/Util/Task.html#Lake.EIOTask\">Lake.EIOTask</a> <span class=\"fn\">ε</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L57-L58","name":"Lake.instSyncOptionTOptionT","line":57,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instSyncOptionTOptionT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instSyncOptionTOptionT\"><span class=\"name\">Lake</span>.<span class=\"name\">instSyncOptionTOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span></span>) <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L54-L55","name":"Lake.instSyncExceptTExceptT","line":54,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instSyncExceptTExceptT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instSyncExceptTExceptT\"><span class=\"name\">Lake</span>.<span class=\"name\">instSyncExceptTExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>) <span class=\"fn\">n</span> (<span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L51-L52","name":"Lake.instSyncReaderTReaderT","line":51,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instSyncReaderTReaderT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instSyncReaderTReaderT\"><span class=\"name\">Lake</span>.<span class=\"name\">instSyncReaderTReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">n</span></span>) <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L49-L49","name":"Lake.instSyncBaseIOBaseIOTask","line":49,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instSyncBaseIOBaseIOTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instSyncBaseIOBaseIOTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instSyncBaseIOBaseIOTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Task.html#Lake.BaseIOTask\">Lake.BaseIOTask</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L48-L48","name":"Lake.instSyncIdTask","line":48,"kind":"instance","docLink":"./Lake/Util/Async.html#Lake.instSyncIdTask","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.instSyncIdTask\"><span class=\"name\">Lake</span>.<span class=\"name\">instSyncIdTask</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Core.html#Task\">Task</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L42-L42","name":"Lake.Await.await","line":42,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.Await.await","doc":"Wait for an (a)synchronous task to finish. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Await.await\"><span class=\"name\">Lake</span>.<span class=\"name\">Await</span>.<span class=\"name\">await</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L40-L40","name":"Lake.Await.mk","line":40,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.Await.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Await.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Await</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(await : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Await\">Lake.Await</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L40-L42","name":"Lake.Await","line":40,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.Await","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Await\"><span class=\"name\">Lake</span>.<span class=\"name\">Await</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max (u + 1) v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L36-L36","name":"Lake.Async.async","line":36,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.Async.async","doc":"Run the monadic action as an asynchronous task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Async.async\"><span class=\"name\">Lake</span>.<span class=\"name\">Async</span>.<span class=\"name\">async</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L34-L34","name":"Lake.Async.mk","line":34,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.Async.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Async.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Async</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(async : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Async\">Lake.Async</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L34-L36","name":"Lake.Async","line":34,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.Async","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Async\"><span class=\"name\">Lake</span>.<span class=\"name\">Async</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max (u + 1) v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L30-L30","name":"Lake.Sync.sync","line":30,"kind":"def","docLink":"./Lake/Util/Async.html#Lake.Sync.sync","doc":"Run the monadic action as a synchronous task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Sync.sync\"><span class=\"name\">Lake</span>.<span class=\"name\">Sync</span>.<span class=\"name\">sync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L28-L28","name":"Lake.Sync.mk","line":28,"kind":"ctor","docLink":"./Lake/Util/Async.html#Lake.Sync.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Sync.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Sync</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sync : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> (<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">α</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Async.html#Lake.Sync\">Lake.Sync</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/Util/Async.lean#L28-L30","name":"Lake.Sync","line":28,"kind":"class","docLink":"./Lake/Util/Async.html#Lake.Sync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Async.html#Lake.Sync\"><span class=\"name\">Lake</span>.<span class=\"name\">Sync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u' → <a href=\"./foundational_types.html\">Type</a> w</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> (<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max (u + 1) v) w)</div></div>"}]}