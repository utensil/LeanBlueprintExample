{"name":"Lake.DSL.Meta","instances":[],"imports":["Init","Lake.Util.EvalTerm","Lean.Elab.ElabRules"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/DSL/Meta.lean#L28-L53","name":"Lake.DSL.metaIf","line":28,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.metaIf","doc":"The `meta if` command has two forms:\n\n```lean\nmeta if <c:term> then <a:command>\nmeta if <c:term> then <a:command> else <b:command>\n```\n\nIt expands to the command `a` if the term `c` evaluates to true\n(at elaboration time). Otherwise, it expands to command `b` (if an `else`\nclause is provided).\n\nOne can use this command to specify, for example, external library targets\nonly available on specific platforms:\n\n```lean\nmeta if System.Platform.isWindows then\nextern_lib winOnlyLib := ...\nelse meta if System.Platform.isOSX then\nextern_lib macOnlyLib := ...\nelse\nextern_lib linuxOnlyLib := ...\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.metaIf\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">metaIf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/DSL/Meta.lean#L23-L26","name":"Lake.DSL.expandCmdDo","line":23,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.expandCmdDo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.expandCmdDo\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">expandCmdDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lake.DSL.cmdDo</span></span> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Command\">Lean.Command</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/lake/Lake/DSL/Meta.lean#L16-L21","name":"Lake.DSL.cmdDo","line":16,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.cmdDo","doc":"The `do` command syntax groups multiple similarly indented commands together.\nThe group can then be passed to another command that usually only accepts a\nsingle command (e.g., `meta if`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.cmdDo\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">cmdDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}