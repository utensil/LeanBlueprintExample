{"name":"Lean.Meta.CollectMVars","instances":[],"imports":["Init","Lean.Util.CollectMVars","Lean.Meta.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/CollectMVars.lean#L44-L46","name":"Lean.Meta.getMVarsAtDecl","line":44,"kind":"def","docLink":"./Lean/Meta/CollectMVars.html#Lean.Meta.getMVarsAtDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CollectMVars.html#Lean.Meta.getMVarsAtDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getMVarsAtDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/CollectMVars.lean#L41-L42","name":"Lean.Meta.collectMVarsAtDecl","line":41,"kind":"def","docLink":"./Lean/Meta/CollectMVars.html#Lean.Meta.collectMVarsAtDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CollectMVars.html#Lean.Meta.collectMVarsAtDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">collectMVarsAtDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Util/CollectMVars.html#Lean.CollectMVars.State\">Lean.CollectMVars.State</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/CollectMVars.lean#L37-L39","name":"Lean.Meta.getMVarsNoDelayed","line":37,"kind":"def","docLink":"./Lean/Meta/CollectMVars.html#Lean.Meta.getMVarsNoDelayed","doc":"Similar to getMVars, but removes delayed assignments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CollectMVars.html#Lean.Meta.getMVarsNoDelayed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getMVarsNoDelayed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/CollectMVars.lean#L32-L34","name":"Lean.Meta.getMVars","line":32,"kind":"def","docLink":"./Lean/Meta/CollectMVars.html#Lean.Meta.getMVars","doc":"Return metavariables in occuring the given expression. See `collectMVars` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CollectMVars.html#Lean.Meta.getMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/CollectMVars.lean#L20-L29","name":"Lean.Meta.collectMVars","line":20,"kind":"opaque","docLink":"./Lean/Meta/CollectMVars.html#Lean.Meta.collectMVars","doc":"Collect unassigned metavariables occuring in the given expression.\n\nRemark: if `e` contains `?m` and there is a `t` assigned to `?m`, we\ncollect unassigned metavariables occurring in `t`.\n\nRemark: if `e` contains `?m` and `?m` is delayed assigned to some term `t`,\nwe collect `?m` and unassigned metavariables occurring in `t`.\nWe collect `?m` because it has not been assigned yet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CollectMVars.html#Lean.Meta.collectMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">collectMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Util/CollectMVars.html#Lean.CollectMVars.State\">Lean.CollectMVars.State</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}