{"name":"Lean.Elab.Arg","instances":[{"typeNames":["Lean.Elab.Term.Arg"],"name":"Lean.Elab.Term.instInhabitedArg","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.NamedArg"],"name":"Lean.Elab.Term.instInhabitedNamedArg","className":"Inhabited"}],"imports":["Init","Lean.Elab.Term"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L54-L56","name":"Lean.Elab.Term.expandApp","line":54,"kind":"def","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.expandApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.expandApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Lean.Elab.Term.Arg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L33-L52","name":"Lean.Elab.Term.expandArgs","line":33,"kind":"def","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.expandArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.expandArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Lean.Elab.Term.Arg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L28-L31","name":"Lean.Elab.Term.addNamedArg","line":28,"kind":"def","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.addNamedArg","doc":"Add a new named argument to `namedArgs`, and throw an error if it already contains a named argument\nwith the same name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.addNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addNamedArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(namedArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(namedArg : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L23-L23","name":"Lean.Elab.Term.instInhabitedNamedArg","line":23,"kind":"instance","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedNamedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedNamedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L22-L22","name":"Lean.Elab.Term.NamedArg.val","line":22,"kind":"def","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Lean.Elab.Term.Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L21-L21","name":"Lean.Elab.Term.NamedArg.name","line":21,"kind":"def","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L20-L20","name":"Lean.Elab.Term.NamedArg.ref","line":20,"kind":"def","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L19-L23","name":"Lean.Elab.Term.NamedArg","line":19,"kind":"structure","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg","doc":"Named arguments created using the notation `(x := val)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L16-L16","name":"Lean.Elab.Term.instInhabitedArg","line":16,"kind":"instance","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Lean.Elab.Term.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L15-L15","name":"Lean.Elab.Term.Arg.expr","line":15,"kind":"ctor","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Arg</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Lean.Elab.Term.Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L14-L14","name":"Lean.Elab.Term.Arg.stx","line":14,"kind":"ctor","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Arg</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Lean.Elab.Term.Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L13-L16","name":"Lean.Elab.Term.Arg","line":13,"kind":"inductive","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg","doc":"Auxiliary inductive datatype for combining unelaborated syntax\nand already elaborated expressions. It is used to elaborate applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Elab/Arg.lean#L1-L1","name":"Lean.Elab.Term.NamedArg.mk","line":1,"kind":"ctor","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Lean.Elab.Term.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">Lean.Elab.Term.NamedArg</a></div></div>"}]}