{"name":"Init.Data.Queue","instances":[{"typeNames":["Std.Queue"],"name":"Std.Queue.instEmptyCollectionQueue","className":"EmptyCollection"},{"typeNames":["Std.Queue"],"name":"Std.Queue.instInhabitedQueue","className":"Inhabited"}],"imports":["Init.Data.List"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L61-L62","name":"Std.Queue.toArray","line":61,"kind":"def","docLink":"./Init/Data/Queue.html#Std.Queue.toArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L53-L59","name":"Std.Queue.dequeue?","line":53,"kind":"def","docLink":"./Init/Data/Queue.html#Std.Queue.dequeue?","doc":"`O(1)` amortized, `O(n)` worst case. Pop an element from the back of the queue,\nreturning the element and the new queue.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.dequeue?\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">dequeue?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L46-L47","name":"Std.Queue.enqueueAll","line":46,"kind":"def","docLink":"./Init/Data/Queue.html#Std.Queue.enqueueAll","doc":"`O(|vs|)`. Push a list of elements `vs` on the front of the queue. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.enqueueAll\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">enqueueAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(vs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L42-L43","name":"Std.Queue.enqueue","line":42,"kind":"def","docLink":"./Init/Data/Queue.html#Std.Queue.enqueue","doc":"`O(1)`. Push an element on the front of the queue. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.enqueue\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">enqueue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L38-L39","name":"Std.Queue.isEmpty","line":38,"kind":"def","docLink":"./Init/Data/Queue.html#Std.Queue.isEmpty","doc":"`O(1)`. Is the queue empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L35-L35","name":"Std.Queue.instInhabitedQueue","line":35,"kind":"instance","docLink":"./Init/Data/Queue.html#Std.Queue.instInhabitedQueue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.instInhabitedQueue\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">instInhabitedQueue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L34-L34","name":"Std.Queue.instEmptyCollectionQueue","line":34,"kind":"instance","docLink":"./Init/Data/Queue.html#Std.Queue.instEmptyCollectionQueue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.instEmptyCollectionQueue\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">instEmptyCollectionQueue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> (<span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L32-L32","name":"Std.Queue.empty","line":32,"kind":"def","docLink":"./Init/Data/Queue.html#Std.Queue.empty","doc":"`O(1)`. The empty queue. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.empty\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L25-L25","name":"Std.Queue.dList","line":25,"kind":"def","docLink":"./Init/Data/Queue.html#Std.Queue.dList","doc":"The dequeue list, which buffers elements ready to be dequeued\n(with the head being the next item to be yielded by `dequeue?`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.dList\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">dList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L22-L22","name":"Std.Queue.eList","line":22,"kind":"def","docLink":"./Init/Data/Queue.html#Std.Queue.eList","doc":"The enqueue list, which stores elements that have just been pushed\n(with the most recently enqueued elements at the head). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.eList\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">eList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L19-L19","name":"Std.Queue.mk","line":19,"kind":"ctor","docLink":"./Init/Data/Queue.html#Std.Queue.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eList : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dList : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Init/Data/Queue.lean#L19-L25","name":"Std.Queue","line":19,"kind":"structure","docLink":"./Init/Data/Queue.html#Std.Queue","doc":"A functional queue data structure, using two back-to-back lists.\nIf we think of the queue as having elements pushed on the front and\npopped from the back, then the queue itself is effectively `eList ++ dList.reverse`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Queue.html#Std.Queue\"><span class=\"name\">Std</span>.<span class=\"name\">Queue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}