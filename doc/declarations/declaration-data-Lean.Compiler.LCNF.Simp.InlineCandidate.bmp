{"name":"Lean.Compiler.LCNF.Simp.InlineCandidate","instances":[],"imports":["Init","Lean.Compiler.LCNF.Simp.SimpM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L34-L106","name":"Lean.Compiler.LCNF.Simp.inlineCandidate?","line":34,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.inlineCandidate?","doc":"Return `some info` if `e` should be inlined.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.inlineCandidate?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">inlineCandidate?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">Lean.Compiler.LCNF.Simp.SimpM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L28-L29","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.arity","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.arity","doc":"The arity (aka number of parameters) of the function to be inlined. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.arity\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">arity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L25-L25","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.recursive","line":25,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.recursive","doc":"`recursive = true` if the declaration being inline is in a mutually recursive block. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.recursive\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">recursive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L23-L23","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.ifReduce","line":23,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.ifReduce","doc":"`ifReduce = true` if the declaration being inlined was tagged with `inline_if_reduce`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.ifReduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">ifReduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L21-L21","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.args","line":21,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.args","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L20-L20","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.fType","line":20,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.fType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.fType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">fType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L19-L19","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.value","line":19,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.value","doc":"Value (lambda expression) of the function to be inlined. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L17-L17","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.params","line":17,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.params","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L16-L16","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.isLocal","line":16,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.isLocal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.isLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">isLocal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L15-L25","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo","line":15,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo","doc":"Result of `inlineCandidate?`.\nIt contains information for inlining local and global functions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L1-L1","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(isLocal : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Lean.Compiler.LCNF.Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ifReduce : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(recursive : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">Lean.Compiler.LCNF.Simp.InlineCandidateInfo</a></div></div>"}]}