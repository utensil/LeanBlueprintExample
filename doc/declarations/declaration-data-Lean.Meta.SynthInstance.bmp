{"name":"Lean.Meta.SynthInstance","instances":[{"typeNames":["Lean.Meta.SynthInstance.Instance"],"name":"Lean.Meta.SynthInstance.instInhabitedInstance","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.GeneratorNode"],"name":"Lean.Meta.SynthInstance.instInhabitedGeneratorNode","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.ConsumerNode"],"name":"Lean.Meta.SynthInstance.instInhabitedConsumerNode","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.MkTableKey.M"],"name":"Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.Meta.SynthInstance.Answer"],"name":"Lean.Meta.SynthInstance.instInhabitedAnswer","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.SynthM"],"name":"Lean.Meta.SynthInstance.instInhabitedSynthM","className":"Inhabited"}],"imports":["Init","Lean.Meta.Basic","Lean.Meta.Instances","Lean.Meta.AbstractMVars","Lean.Meta.WHNF","Lean.Meta.Check","Lean.Util.Profile"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L740-L747","name":"Lean.Meta.synthInstance","line":740,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxResultSize? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L735-L738","name":"Lean.Meta.trySynthInstance","line":735,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.trySynthInstance","doc":"Return `LOption.some r` if succeeded, `LOption.none` if it failed, and `LOption.undef` if\ninstance cannot be synthesized right now because `type` contains metavariables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.trySynthInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">trySynthInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxResultSize? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Lean/Data/LOption.html#Lean.LOption\">Lean.LOption</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L673-L681","name":"Lean.Meta.synthInstance?.assignOutParams","line":673,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance?.assignOutParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance?.assignOutParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance?</span>.<span class=\"name\">assignOutParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(result : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L662-L730","name":"Lean.Meta.synthInstance?","line":662,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxResultSize? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L577-L590","name":"Lean.Meta.SynthInstance.main","line":577,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.main","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxResultSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L569-L575","name":"Lean.Meta.SynthInstance.synth","line":569,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.synth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.synth\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">synth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L566-L567","name":"Lean.Meta.SynthInstance.getResult","line":566,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L554-L564","name":"Lean.Meta.SynthInstance.step","line":554,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.step\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">step</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L537-L552","name":"Lean.Meta.SynthInstance.resume","line":537,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.resume","doc":"Given `(cNode, answer)` on the top of the resume stack, continue execution by using `answer` to solve the\nnext subgoal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.resume\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">resume</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L529-L532","name":"Lean.Meta.SynthInstance.getNextToResume","line":529,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getNextToResume","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getNextToResume\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getNextToResume</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> (<span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L510-L527","name":"Lean.Meta.SynthInstance.generate","line":510,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.generate","doc":"Try the next instance in the node on the top of the generator stack. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.generate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">generate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L506-L507","name":"Lean.Meta.SynthInstance.modifyTop","line":506,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.modifyTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.modifyTop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">modifyTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a> → <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L503-L504","name":"Lean.Meta.SynthInstance.getTop","line":503,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getTop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getTop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L454-L501","name":"Lean.Meta.SynthInstance.consume","line":454,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.consume","doc":"Process the next subgoal in the given consumer node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.consume\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">consume</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cNode : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L385-L399","name":"Lean.Meta.SynthInstance.addAnswer","line":385,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.addAnswer","doc":"Create a new answer after `cNode` resolved all subgoals.\nThat is, `cNode.subgoals == []`.\nAnd then, store it in the tabled entries map, and wakeup waiters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.addAnswer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">addAnswer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cNode : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L367-L371","name":"Lean.Meta.SynthInstance.isNewAnswer","line":367,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.isNewAnswer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.isNewAnswer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">isNewAnswer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(oldAnswers : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(answer : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L353-L365","name":"Lean.Meta.SynthInstance.wakeUp","line":353,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.wakeUp","doc":"Move waiters that are waiting for the given answer to the resume stack. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.wakeUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">wakeUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(answer : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Lean.Meta.SynthInstance.Waiter</a> → <span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L344-L350","name":"Lean.Meta.SynthInstance.tryAnswer","line":344,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryAnswer","doc":"Assign a precomputed answer to `mvar`.\nIf it succeeds, the result is a new updated metavariable context and a new list of subgoals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryAnswer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">tryAnswer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(answer : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L327-L339","name":"Lean.Meta.SynthInstance.tryResolve","line":327,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryResolve","doc":"Try to synthesize metavariable `mvar` using the instance `inst`.\nRemark: `mctx` is set using `withMCtx`.\nIf it succeeds, the result is a new updated metavariable context and a new list of subgoals.\nA subgoal is created for each instance implicit parameter of `inst`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryResolve\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">tryResolve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inst : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L298-L320","name":"Lean.Meta.SynthInstance.getSubgoals","line":298,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getSubgoals","doc":"`getSubgoals lctx localInsts xs inst` creates the subgoals for the instance `inst`.\nThe subgoals are in the context of the free variables `xs`, and\n`(lctx, localInsts)` is the local context and instances before we added the free variables to it.\n\nThis extra complication is required because\n  1- We want all metavariables created by `synthInstance` to share the same local context.\n  2- We want to ensure that applications such as `mvar xs` are higher order patterns.\n\nThe method `getGoals` create a new metavariable for each parameter of `inst`.\nFor example, suppose the type of `inst` is `forall (x_1 : A_1) ... (x_n : A_n), B x_1 ... x_n`.\nThen, we create the metavariables `?m_i : forall xs, A_i`, and return the subset of these\nmetavariables that are instance implicit arguments, and the expressions:\n  - `inst (?m_1 xs) ... (?m_n xs)` (aka `instVal`)\n  - `B (?m_1 xs) ... (?m_n xs)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getSubgoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getSubgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInsts : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inst : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">Lean.Meta.SynthInstance.SubgoalsResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L281-L281","name":"Lean.Meta.SynthInstance.SubgoalsResult.instTypeBody","line":281,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.instTypeBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.instTypeBody\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span>.<span class=\"name\">instTypeBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">Lean.Meta.SynthInstance.SubgoalsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L280-L280","name":"Lean.Meta.SynthInstance.SubgoalsResult.instVal","line":280,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.instVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.instVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span>.<span class=\"name\">instVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">Lean.Meta.SynthInstance.SubgoalsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L279-L279","name":"Lean.Meta.SynthInstance.SubgoalsResult.subgoals","line":279,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.subgoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.subgoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span>.<span class=\"name\">subgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">Lean.Meta.SynthInstance.SubgoalsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L278-L281","name":"Lean.Meta.SynthInstance.SubgoalsResult","line":278,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult","doc":"See `getSubgoals` and `getSubgoalsAux`\n\nWe use the parameter `j` to reduce the number of `instantiate*` invocations.\nIt is the same approach we use at `forallTelescope` and `lambdaTelescope`.\nGiven `getSubgoalsAux args j subgoals instVal type`,\nwe have that `type.instantiateRevRange j args.size args` does not have loose bound variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L266-L270","name":"Lean.Meta.SynthInstance.mkTableKeyFor","line":266,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKeyFor","doc":"Create a `key` for the goal associated with the given metavariable.\nThat is, we create a key for the type of the metavariable.\n\nWe must instantiate assigned metavariables before we invoke `mkTableKey`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKeyFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">mkTableKeyFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L256-L259","name":"Lean.Meta.SynthInstance.getEntry","line":256,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(key : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">Lean.Meta.SynthInstance.TableEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L253-L254","name":"Lean.Meta.SynthInstance.findEntry?","line":253,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.findEntry?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.findEntry?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">findEntry?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(key : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">Lean.Meta.SynthInstance.TableEntry</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L241-L251","name":"Lean.Meta.SynthInstance.newSubgoal","line":241,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.newSubgoal","doc":"Create a new generator node for `mvar` and add `waiter` as its waiter.\n`key` must be `mkTableKey mctx mvarType`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.newSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">newSubgoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(key : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(waiter : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Lean.Meta.SynthInstance.Waiter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L225-L236","name":"Lean.Meta.SynthInstance.mkGeneratorNode?","line":225,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkGeneratorNode?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkGeneratorNode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">mkGeneratorNode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(key : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L188-L223","name":"Lean.Meta.SynthInstance.getInstances","line":188,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getInstances","doc":"Return globals and locals instances that may unify with `type` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L184-L185","name":"Lean.Meta.SynthInstance.instInhabitedSynthM","line":184,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedSynthM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedSynthM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedSynthM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L181-L182","name":"Lean.Meta.SynthInstance.mapMetaM","line":181,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mapMetaM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mapMetaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">mapMetaM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L178-L179","name":"Lean.Meta.SynthInstance.checkMaxHeartbeats","line":178,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.checkMaxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.checkMaxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">checkMaxHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">Lean.Meta.SynthInstance.SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L176-L176","name":"Lean.Meta.SynthInstance.SynthM","line":176,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SynthM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L174-L174","name":"Lean.Meta.SynthInstance.State.tableEntries","line":174,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.tableEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.tableEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">tableEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">Lean.Meta.SynthInstance.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">Lean.Meta.SynthInstance.TableEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L173-L173","name":"Lean.Meta.SynthInstance.State.resumeStack","line":173,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.resumeStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.resumeStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">resumeStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">Lean.Meta.SynthInstance.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L172-L172","name":"Lean.Meta.SynthInstance.State.generatorStack","line":172,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.generatorStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.generatorStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">generatorStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">Lean.Meta.SynthInstance.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L171-L171","name":"Lean.Meta.SynthInstance.State.result?","line":171,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.result?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.result?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">result?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">Lean.Meta.SynthInstance.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L170-L174","name":"Lean.Meta.SynthInstance.State","line":170,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State","doc":"Remark: the SynthInstance.State is not really an extension of `Meta.State`.\nThe field `postponed` is not needed, and the field `mctx` is misleading since\n`synthInstance` methods operate over different `MetavarContext`s simultaneously.\nThat being said, we still use `extends` because it makes it simpler to move from\n`M` to `MetaM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L161-L161","name":"Lean.Meta.SynthInstance.Context.maxHeartbeats","line":161,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.maxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.maxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context\">Lean.Meta.SynthInstance.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L160-L160","name":"Lean.Meta.SynthInstance.Context.maxResultSize","line":160,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.maxResultSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.maxResultSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxResultSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context\">Lean.Meta.SynthInstance.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L159-L161","name":"Lean.Meta.SynthInstance.Context","line":159,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L157-L157","name":"Lean.Meta.SynthInstance.TableEntry.answers","line":157,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.answers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.answers\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">TableEntry</span>.<span class=\"name\">answers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">Lean.Meta.SynthInstance.TableEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L156-L156","name":"Lean.Meta.SynthInstance.TableEntry.waiters","line":156,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.waiters","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.waiters\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">TableEntry</span>.<span class=\"name\">waiters</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">Lean.Meta.SynthInstance.TableEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Lean.Meta.SynthInstance.Waiter</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L155-L157","name":"Lean.Meta.SynthInstance.TableEntry","line":155,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">TableEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L153-L153","name":"Lean.Meta.SynthInstance.instInhabitedAnswer","line":153,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedAnswer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedAnswer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedAnswer</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L152-L152","name":"Lean.Meta.SynthInstance.Answer.size","line":152,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L151-L151","name":"Lean.Meta.SynthInstance.Answer.resultType","line":151,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.resultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span>.<span class=\"name\">resultType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L150-L150","name":"Lean.Meta.SynthInstance.Answer.result","line":150,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.result","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.result\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span>.<span class=\"name\">result</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L149-L153","name":"Lean.Meta.SynthInstance.Answer","line":149,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L144-L147","name":"Lean.Meta.SynthInstance.mkTableKey","line":144,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKey","doc":"Remark: `mkTableKey` assumes `e` does not contain assigned metavariables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">mkTableKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L116-L139","name":"Lean.Meta.SynthInstance.MkTableKey.normExpr","line":116,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">normExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M\">Lean.Meta.SynthInstance.MkTableKey.M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L96-L114","name":"Lean.Meta.SynthInstance.MkTableKey.normLevel","line":96,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">normLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M\">Lean.Meta.SynthInstance.MkTableKey.M</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L92-L94","name":"Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","line":92,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">instMonadMCtxM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M\">Lean.Meta.SynthInstance.MkTableKey.M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L89-L89","name":"Lean.Meta.SynthInstance.MkTableKey.M","line":89,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L87-L87","name":"Lean.Meta.SynthInstance.MkTableKey.State.mctx","line":87,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">Lean.Meta.SynthInstance.MkTableKey.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L86-L86","name":"Lean.Meta.SynthInstance.MkTableKey.State.emap","line":86,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.emap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.emap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">emap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">Lean.Meta.SynthInstance.MkTableKey.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L85-L85","name":"Lean.Meta.SynthInstance.MkTableKey.State.lmap","line":85,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.lmap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.lmap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">lmap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">Lean.Meta.SynthInstance.MkTableKey.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L84-L84","name":"Lean.Meta.SynthInstance.MkTableKey.State.nextIdx","line":84,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.nextIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">Lean.Meta.SynthInstance.MkTableKey.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L83-L87","name":"Lean.Meta.SynthInstance.MkTableKey.State","line":83,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L57-L59","name":"Lean.Meta.SynthInstance.Waiter.isRoot","line":57,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.isRoot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.isRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">isRoot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Lean.Meta.SynthInstance.Waiter</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L55-L55","name":"Lean.Meta.SynthInstance.Waiter.root","line":55,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.root","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.root\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">root</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Lean.Meta.SynthInstance.Waiter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L54-L54","name":"Lean.Meta.SynthInstance.Waiter.consumerNode","line":54,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.consumerNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.consumerNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">consumerNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a> → <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Lean.Meta.SynthInstance.Waiter</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L53-L55","name":"Lean.Meta.SynthInstance.Waiter","line":53,"kind":"inductive","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Waiter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L51-L51","name":"Lean.Meta.SynthInstance.instInhabitedConsumerNode","line":51,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedConsumerNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedConsumerNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedConsumerNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L50-L50","name":"Lean.Meta.SynthInstance.ConsumerNode.size","line":50,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L49-L49","name":"Lean.Meta.SynthInstance.ConsumerNode.subgoals","line":49,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.subgoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.subgoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">subgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L48-L48","name":"Lean.Meta.SynthInstance.ConsumerNode.mctx","line":48,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L47-L47","name":"Lean.Meta.SynthInstance.ConsumerNode.key","line":47,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.key","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">key</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L46-L46","name":"Lean.Meta.SynthInstance.ConsumerNode.mvar","line":46,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">mvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L45-L51","name":"Lean.Meta.SynthInstance.ConsumerNode","line":45,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L43-L43","name":"Lean.Meta.SynthInstance.instInhabitedGeneratorNode","line":43,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedGeneratorNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedGeneratorNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedGeneratorNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L42-L42","name":"Lean.Meta.SynthInstance.GeneratorNode.currInstanceIdx","line":42,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.currInstanceIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.currInstanceIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">currInstanceIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L41-L41","name":"Lean.Meta.SynthInstance.GeneratorNode.instances","line":41,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.instances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.instances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">instances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L40-L40","name":"Lean.Meta.SynthInstance.GeneratorNode.mctx","line":40,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L39-L39","name":"Lean.Meta.SynthInstance.GeneratorNode.key","line":39,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.key","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">key</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L38-L38","name":"Lean.Meta.SynthInstance.GeneratorNode.mvar","line":38,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">mvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L37-L43","name":"Lean.Meta.SynthInstance.GeneratorNode","line":37,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L35-L35","name":"Lean.Meta.SynthInstance.instInhabitedInstance","line":35,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L34-L34","name":"Lean.Meta.SynthInstance.Instance.synthOrder","line":34,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.synthOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.synthOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Instance</span>.<span class=\"name\">synthOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L33-L33","name":"Lean.Meta.SynthInstance.Instance.val","line":33,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Instance</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L32-L35","name":"Lean.Meta.SynthInstance.Instance","line":32,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Instance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L29-L30","name":"Lean.Meta.SynthInstance.getMaxHeartbeats","line":29,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getMaxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getMaxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getMaxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L22-L25","name":"Lean.Meta.synthInstance.maxSize","line":22,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance</span>.<span class=\"name\">maxSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L17-L20","name":"Lean.Meta.synthInstance.maxHeartbeats","line":17,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.GeneratorNode.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(key : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(instances : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(currInstanceIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.Context.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(maxResultSize : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxHeartbeats : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context\">Lean.Meta.SynthInstance.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.SubgoalsResult.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(subgoals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(instVal : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(instTypeBody : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">Lean.Meta.SynthInstance.SubgoalsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.TableEntry.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">TableEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(waiters : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Lean.Meta.SynthInstance.Waiter</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(answers : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">Lean.Meta.SynthInstance.TableEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.State.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(result? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(generatorStack : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">Lean.Meta.SynthInstance.GeneratorNode</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(resumeStack : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tableEntries : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">Lean.Meta.SynthInstance.TableEntry</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">Lean.Meta.SynthInstance.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.ConsumerNode.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(key : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subgoals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">Lean.Meta.SynthInstance.ConsumerNode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.Answer.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(result : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(resultType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Lean.Meta.SynthInstance.Answer</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.Instance.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Instance</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(synthOrder : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Lean.Meta.SynthInstance.Instance</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/SynthInstance.lean#L1-L1","name":"Lean.Meta.SynthInstance.MkTableKey.State.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(nextIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lmap : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(emap : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">Lean.Meta.SynthInstance.MkTableKey.State</a></div></div>"}]}