{"name":"Lean.Compiler.LCNF.FixedParams","instances":[{"typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"],"name":"Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"],"name":"Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"],"name":"Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","className":"Hashable"}],"imports":["Init","Lean.Compiler.LCNF.Basic","Lean.Compiler.LCNF.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L165-L173","name":"Lean.Compiler.LCNF.mkFixedParamsMap","line":165,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.mkFixedParamsMap","doc":"Given the (potentially mutually) recursive declarations `decls`,\nreturn a map from declaration name `decl.name` to a bit-mask `m` where `m[i]` is true\niff the `decl.params[i]` is a fixed argument. That is, it does not change in recursive\napplications.\nThe function assumes that if a function `f` was declared in a mutual block, then `decls`\ncontains all (computationally relevant) functions in the mutual block.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.mkFixedParamsMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">mkFixedParamsMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lake.NameMap</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L148-L152","name":"Lean.Compiler.LCNF.FixedParams.mkInitialValues","line":148,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkInitialValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkInitialValues\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">mkInitialValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(numParams : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L113-L144","name":"Lean.Compiler.LCNF.FixedParams.evalApp","line":113,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">Lean.Compiler.LCNF.FixedParams.FixParamM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L106-L111","name":"Lean.Compiler.LCNF.FixedParams.evalCode","line":106,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(code : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Lean.Compiler.LCNF.Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">Lean.Compiler.LCNF.FixedParams.FixParamM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L101-L104","name":"Lean.Compiler.LCNF.FixedParams.evalLetValue","line":101,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">Lean.Compiler.LCNF.LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">Lean.Compiler.LCNF.FixedParams.FixParamM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L93-L97","name":"Lean.Compiler.LCNF.FixedParams.mkAssignment","line":93,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkAssignment","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">mkAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(values : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L90-L91","name":"Lean.Compiler.LCNF.FixedParams.inMutualBlock","line":90,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.inMutualBlock","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.inMutualBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">inMutualBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">Lean.Compiler.LCNF.FixedParams.FixParamM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L83-L88","name":"Lean.Compiler.LCNF.FixedParams.evalArg","line":83,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Lean.Compiler.LCNF.Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">Lean.Compiler.LCNF.FixedParams.FixParamM</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L79-L81","name":"Lean.Compiler.LCNF.FixedParams.evalFVar","line":79,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">Lean.Compiler.LCNF.FixedParams.FixParamM</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L75-L77","name":"Lean.Compiler.LCNF.FixedParams.abort","line":75,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.abort","doc":"Stop the analysis and mark all parameters as non-fixed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.abort\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">abort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">Lean.Compiler.LCNF.FixedParams.FixParamM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L72-L72","name":"Lean.Compiler.LCNF.FixedParams.FixParamM","line":72,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM","doc":"Monad for the fixed parameter static analyzer. We use the unit-exception to interrupt the analysis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">FixParamM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L69-L69","name":"Lean.Compiler.LCNF.FixedParams.State.fixed","line":69,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.fixed","doc":"Bitmask containing the result, i.e., which parameters of `main` are fixed.\nWe initialize it with `true` everywhere.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.fixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">State</span>.<span class=\"name\">fixed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State\">Lean.Compiler.LCNF.FixedParams.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L64-L64","name":"Lean.Compiler.LCNF.FixedParams.State.visited","line":64,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.visited","doc":"Set of calls that have been already analyzed.\nRecall that we assume that only functions in `decls` may have recursive calls to the function being analyzed (i.e., `main`).\nWhenever there is function application `f a₁ ... aₙ`, where `f` is in `decls`, `f` is not `main`, and\nwe visit with the abstract values assigned to `aᵢ`, but first we record the visit here.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">State</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State\">Lean.Compiler.LCNF.FixedParams.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L57-L69","name":"Lean.Compiler.LCNF.FixedParams.State","line":57,"kind":"structure","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L55-L55","name":"Lean.Compiler.LCNF.FixedParams.Context.assignment","line":55,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.assignment","doc":"The assignment maps free variable ids in the current code being analyzed to abstract values.\nWe only track the abstract value assigned to parameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span>.<span class=\"name\">assignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\">Lean.Compiler.LCNF.FixedParams.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L50-L50","name":"Lean.Compiler.LCNF.FixedParams.Context.main","line":50,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.main","doc":"Function being analyzed. We check every recursive call to this function.\nRemark: `main` is in `decls`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\">Lean.Compiler.LCNF.FixedParams.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L45-L45","name":"Lean.Compiler.LCNF.FixedParams.Context.decls","line":45,"kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.decls","doc":"Declaration in the same mutual block. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\">Lean.Compiler.LCNF.FixedParams.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L43-L55","name":"Lean.Compiler.LCNF.FixedParams.Context","line":43,"kind":"structure","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L41-L41","name":"Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","line":41,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instHashableAbsValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instHashableAbsValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L41-L41","name":"Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","line":41,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instBEqAbsValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instBEqAbsValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L41-L41","name":"Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","line":41,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instInhabitedAbsValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L40-L40","name":"Lean.Compiler.LCNF.FixedParams.AbsValue.val","line":40,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">AbsValue</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L39-L39","name":"Lean.Compiler.LCNF.FixedParams.AbsValue.erased","line":39,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.erased","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">AbsValue</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L38-L38","name":"Lean.Compiler.LCNF.FixedParams.AbsValue.top","line":38,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.top\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">AbsValue</span>.<span class=\"name\">top</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L37-L41","name":"Lean.Compiler.LCNF.FixedParams.AbsValue","line":37,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue","doc":"Abstract value for the \"fixed parameter\" analysis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">AbsValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L1-L1","name":"Lean.Compiler.LCNF.FixedParams.Context.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(main : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Lean.Compiler.LCNF.Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignment : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">Lean.FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\">Lean.Compiler.LCNF.FixedParams.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/FixedParams.lean#L1-L1","name":"Lean.Compiler.LCNF.FixedParams.State.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(visited : <span class=\"fn\"><a href=\"./Lean/Data/HashSet.html#Lean.HashSet\">Lean.HashSet</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">Lean.Compiler.LCNF.FixedParams.AbsValue</a></span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fixed : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State\">Lean.Compiler.LCNF.FixedParams.State</a></div></div>"}]}