{"name":"Lean.LazyInitExtension","instances":[{"typeNames":["Lean.LazyInitExtension"],"name":"Lean.instInhabitedLazyInitExtension","className":"Inhabited"}],"imports":["Init","Lean.MonadEnv"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/LazyInitExtension.lean#L33-L39","name":"Lean.LazyInitExtension.get","line":33,"kind":"def","docLink":"./Lean/LazyInitExtension.html#Lean.LazyInitExtension.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension.get\"><span class=\"name\">Lean</span>.<span class=\"name\">LazyInitExtension</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\"><a href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension\">Lean.LazyInitExtension</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/LazyInitExtension.lean#L29-L31","name":"Lean.registerLazyInitExtension","line":29,"kind":"def","docLink":"./Lean/LazyInitExtension.html#Lean.registerLazyInitExtension","doc":"Register an environment extension for storing the result of `fn`.\nWe initialize the extension with `none`, and `fn` is executed the\nfirst time `LazyInit.get` is executed.\n\nThis kind of extension is useful for avoiding work duplication in\nscenarios where a thunk cannot be used because the computation depends\non state from the `m` monad. For example, we may want to \"cache\" a collection\nof theorems as a `SimpLemmas` object.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LazyInitExtension.html#Lean.registerLazyInitExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">registerLazyInitExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<span class=\"fn\"><a href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension\">Lean.LazyInitExtension</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/LazyInitExtension.lean#L14-L18","name":"Lean.instInhabitedLazyInitExtension","line":14,"kind":"instance","docLink":"./Lean/LazyInitExtension.html#Lean.instInhabitedLazyInitExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LazyInitExtension.html#Lean.instInhabitedLazyInitExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLazyInitExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\"><a href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension\">Lean.LazyInitExtension</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/LazyInitExtension.lean#L12-L12","name":"Lean.LazyInitExtension.fn","line":12,"kind":"def","docLink":"./Lean/LazyInitExtension.html#Lean.LazyInitExtension.fn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension.fn\"><span class=\"name\">Lean</span>.<span class=\"name\">LazyInitExtension</span>.<span class=\"name\">fn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension\">Lean.LazyInitExtension</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/LazyInitExtension.lean#L11-L11","name":"Lean.LazyInitExtension.ext","line":11,"kind":"def","docLink":"./Lean/LazyInitExtension.html#Lean.LazyInitExtension.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">LazyInitExtension</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension\">Lean.LazyInitExtension</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/LazyInitExtension.lean#L10-L10","name":"Lean.LazyInitExtension.mk","line":10,"kind":"ctor","docLink":"./Lean/LazyInitExtension.html#Lean.LazyInitExtension.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">LazyInitExtension</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ext : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">Lean.EnvExtension</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fn : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension\">Lean.LazyInitExtension</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/LazyInitExtension.lean#L10-L12","name":"Lean.LazyInitExtension","line":10,"kind":"structure","docLink":"./Lean/LazyInitExtension.html#Lean.LazyInitExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LazyInitExtension.html#Lean.LazyInitExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">LazyInitExtension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}