{"name":"Lean.Compiler.LCNF.ConfigOptions","instances":[{"typeNames":["Lean.Compiler.LCNF.ConfigOptions"],"name":"Lean.Compiler.LCNF.instInhabitedConfigOptions","className":"Inhabited"}],"imports":["Init","Lean.Data.Options"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L59-L64","name":"Lean.Compiler.LCNF.toConfigOptions","line":59,"kind":"def","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.toConfigOptions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.toConfigOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toConfigOptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">Lean.Compiler.LCNF.ConfigOptions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L53-L57","name":"Lean.Compiler.LCNF.compiler.checkTypes","line":53,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.checkTypes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.checkTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">checkTypes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L47-L51","name":"Lean.Compiler.LCNF.compiler.maxRecInlineIfReduce","line":47,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.maxRecInlineIfReduce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.maxRecInlineIfReduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">maxRecInlineIfReduce</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L41-L45","name":"Lean.Compiler.LCNF.compiler.maxRecInline","line":41,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.maxRecInline","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.maxRecInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">maxRecInline</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L35-L39","name":"Lean.Compiler.LCNF.compiler.small","line":35,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.small","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.small\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">small</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L33-L33","name":"Lean.Compiler.LCNF.instInhabitedConfigOptions","line":33,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.instInhabitedConfigOptions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.instInhabitedConfigOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedConfigOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">Lean.Compiler.LCNF.ConfigOptions</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L32-L32","name":"Lean.Compiler.LCNF.ConfigOptions.checkTypes","line":32,"kind":"def","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.checkTypes","doc":"Perform type compatibility checking after each compiler pass.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.checkTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">checkTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">Lean.Compiler.LCNF.ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L28-L28","name":"Lean.Compiler.LCNF.ConfigOptions.maxRecInlineIfReduce","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.maxRecInlineIfReduce","doc":"Maximum number of times a recursive definition tagged with `[inline_if_reduce]` can be recursively inlined\nbefore generating an error during compilation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.maxRecInlineIfReduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">maxRecInlineIfReduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">Lean.Compiler.LCNF.ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L23-L23","name":"Lean.Compiler.LCNF.ConfigOptions.maxRecInline","line":23,"kind":"def","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.maxRecInline","doc":"Maximum number of times a recursive definition tagged with `[inline]` can be recursively inlined before generating an\nerror during compilation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.maxRecInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">maxRecInline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">Lean.Compiler.LCNF.ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L18-L18","name":"Lean.Compiler.LCNF.ConfigOptions.smallThreshold","line":18,"kind":"def","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.smallThreshold","doc":"Any function declaration or join point with size `≤ smallThresold` is inlined\neven if there are multiple occurrences.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.smallThreshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">smallThreshold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">Lean.Compiler.LCNF.ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L13-L33","name":"Lean.Compiler.LCNF.ConfigOptions","line":13,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions","doc":"User controlled configuration options for the code generator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Compiler/LCNF/ConfigOptions.lean#L1-L1","name":"Lean.Compiler.LCNF.ConfigOptions.mk","line":1,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(smallThreshold : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxRecInline : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxRecInlineIfReduce : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(checkTypes : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">Lean.Compiler.LCNF.ConfigOptions</a></div></div>"}]}