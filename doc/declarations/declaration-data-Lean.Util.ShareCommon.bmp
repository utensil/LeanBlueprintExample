{"name":"Lean.Util.ShareCommon","instances":[{"typeNames":["Lean.ShareCommon.ShareCommonT"],"name":"Lean.ShareCommon.ShareCommonT.monadShareCommon","className":"MonadShareCommon"},{"typeNames":["Lean.ShareCommon.PShareCommonT"],"name":"Lean.ShareCommon.PShareCommonT.monadShareCommon","className":"MonadShareCommon"}],"imports":["Init","Lean.Data.HashSet","Lean.Data.HashMap","Lean.Data.PersistentHashMap","Lean.Data.PersistentHashSet"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L48-L48","name":"Lean.ShareCommon.shareCommon","line":48,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.shareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.shareCommon\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">shareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L46-L46","name":"Lean.ShareCommon.PShareCommonM.run","line":46,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">PShareCommonM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonM\">Lean.ShareCommon.PShareCommonM</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L45-L45","name":"Lean.ShareCommon.ShareCommonM.run","line":45,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">ShareCommonM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonM\">Lean.ShareCommon.ShareCommonM</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L44-L44","name":"Lean.ShareCommon.PShareCommonT.run","line":44,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT.run\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">PShareCommonT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT\">Lean.ShareCommon.PShareCommonT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L43-L43","name":"Lean.ShareCommon.ShareCommonT.run","line":43,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT.run\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">ShareCommonT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT\">Lean.ShareCommon.ShareCommonT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L40-L41","name":"Lean.ShareCommon.PShareCommonT.monadShareCommon","line":40,"kind":"instance","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT.monadShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT.monadShareCommon\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">PShareCommonT</span>.<span class=\"name\">monadShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> (<span class=\"fn\"><a href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT\">Lean.ShareCommon.PShareCommonT</a> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L37-L38","name":"Lean.ShareCommon.ShareCommonT.monadShareCommon","line":37,"kind":"instance","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT.monadShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT.monadShareCommon\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">ShareCommonT</span>.<span class=\"name\">monadShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> (<span class=\"fn\"><a href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT\">Lean.ShareCommon.ShareCommonT</a> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L34-L35","name":"Lean.ShareCommon.PShareCommonT.withShareCommon","line":34,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT.withShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT.withShareCommon\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">PShareCommonT</span>.<span class=\"name\">withShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT\">Lean.ShareCommon.PShareCommonT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L31-L32","name":"Lean.ShareCommon.ShareCommonT.withShareCommon","line":31,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT.withShareCommon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT.withShareCommon\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">ShareCommonT</span>.<span class=\"name\">withShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT\">Lean.ShareCommon.ShareCommonT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L29-L29","name":"Lean.ShareCommon.PShareCommonM","line":29,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonM\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">PShareCommonM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L28-L28","name":"Lean.ShareCommon.ShareCommonM","line":28,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonM\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">ShareCommonM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L27-L27","name":"Lean.ShareCommon.PShareCommonT","line":27,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.PShareCommonT\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">PShareCommonT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L26-L26","name":"Lean.ShareCommon.ShareCommonT","line":26,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.ShareCommonT\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">ShareCommonT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L20-L24","name":"Lean.ShareCommon.persistentObjectFactory","line":20,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.persistentObjectFactory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.persistentObjectFactory\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">persistentObjectFactory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Util/ShareCommon.lean#L14-L18","name":"Lean.ShareCommon.objectFactory","line":14,"kind":"def","docLink":"./Lean/Util/ShareCommon.html#Lean.ShareCommon.objectFactory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/ShareCommon.html#Lean.ShareCommon.objectFactory\"><span class=\"name\">Lean</span>.<span class=\"name\">ShareCommon</span>.<span class=\"name\">objectFactory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a></div></div>"}]}