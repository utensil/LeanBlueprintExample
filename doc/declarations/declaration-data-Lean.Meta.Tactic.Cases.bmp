{"name":"Lean.Meta.Tactic.Cases","instances":[],"imports":["Init","Lean.Meta.AppBuilder","Lean.Meta.Tactic.Induction","Lean.Meta.Tactic.Injection","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Subst","Lean.Meta.Tactic.Acyclic","Lean.Meta.Tactic.UnifyEq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L311-L316","name":"Lean.MVarId.byCases","line":311,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.byCases","doc":"Split the goal in two subgoals: one containing the hypothesis `h : p` and another containing `h : ¬ p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.byCases\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">byCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hName : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> <span class=\"fn\">`h</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Lean.Meta.ByCasesSubgoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Lean.Meta.ByCasesSubgoal</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L302-L302","name":"Lean.Meta.ByCasesSubgoal.fvarId","line":302,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ByCasesSubgoal</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Lean.Meta.ByCasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L301-L301","name":"Lean.Meta.ByCasesSubgoal.mvarId","line":301,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ByCasesSubgoal</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Lean.Meta.ByCasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L300-L302","name":"Lean.Meta.ByCasesSubgoal","line":300,"kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal","doc":"Auxiliary structure for storing `byCases` tactic result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ByCasesSubgoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L293-L297","name":"Lean.MVarId.substEqs","line":293,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.substEqs","doc":"Applies `cases` to any hypothesis of the form `h : r = s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.substEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">substEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L286-L288","name":"Lean.MVarId.casesAnd","line":286,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesAnd","doc":"Applies `cases` (recursively) to any hypothesis of the form `h : p ∧ q`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesAnd\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">casesAnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L271-L281","name":"Lean.MVarId.casesRec","line":271,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesRec","doc":"Keep applying `cases` on any hypothesis that satisfies `p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesRec\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">casesRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L265-L266","name":"Lean.Meta.cases","line":265,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(majorFVarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(givenNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">Lean.Meta.AltVarNames</a></span>) <span class=\"fn\">#[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">Lean.Meta.CasesSubgoal</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L261-L262","name":"Lean.MVarId.cases","line":261,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.cases","doc":"Apply `casesOn` using the free variable `majorFVarId` as the major premise (aka discriminant).\n`givenNames` contains user-facing names for each alternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(majorFVarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(givenNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">Lean.Meta.AltVarNames</a></span>) <span class=\"fn\">#[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">Lean.Meta.CasesSubgoal</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L232-L253","name":"Lean.Meta.Cases.cases","line":232,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(majorFVarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(givenNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">Lean.Meta.AltVarNames</a></span>) <span class=\"fn\">#[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">Lean.Meta.CasesSubgoal</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L202-L210","name":"Lean.Meta.Cases.unifyEqs?","line":202,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.unifyEqs?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.unifyEqs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">unifyEqs?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(numEqs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subst : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(caseName? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>) <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L136-L136","name":"Lean.Meta.Cases.Context.majorTypeIndices","line":136,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeIndices","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">majorTypeIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Lean.Meta.Cases.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L135-L135","name":"Lean.Meta.Cases.Context.majorTypeArgs","line":135,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">majorTypeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Lean.Meta.Cases.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L134-L134","name":"Lean.Meta.Cases.Context.majorTypeFn","line":134,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">majorTypeFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Lean.Meta.Cases.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L133-L133","name":"Lean.Meta.Cases.Context.majorDecl","line":133,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">majorDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Lean.Meta.Cases.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L132-L132","name":"Lean.Meta.Cases.Context.nminors","line":132,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.nminors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.nminors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">nminors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Lean.Meta.Cases.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L131-L131","name":"Lean.Meta.Cases.Context.casesOnVal","line":131,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.casesOnVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.casesOnVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">casesOnVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Lean.Meta.Cases.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L130-L130","name":"Lean.Meta.Cases.Context.inductiveVal","line":130,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.inductiveVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.inductiveVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">inductiveVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Lean.Meta.Cases.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L129-L136","name":"Lean.Meta.Cases.Context","line":129,"kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L125-L125","name":"Lean.Meta.CasesSubgoal.ctorName","line":125,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.ctorName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.ctorName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesSubgoal</span>.<span class=\"name\">ctorName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">Lean.Meta.CasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L124-L125","name":"Lean.Meta.CasesSubgoal","line":124,"kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesSubgoal</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.InductionSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InductionSubgoal</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L85-L122","name":"Lean.Meta.generalizeIndices","line":85,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeIndices","doc":"Similar to `generalizeTargets` but customized for the `casesOn` motive.\nGiven a metavariable `mvarId` representing the\n```\nCtx, h : I A j, D |- T\n```\nwhere `fvarId` is `h`s id, and the type `I A j` is an inductive datatype where `A` are parameters,\nand `j` the indices. Generate the goal\n```\nCtx, h : I A j, D, j' : J, h' : I A j' |- j == j' -> h == h' -> T\n```\nRemark: `(j == j' -> h == h')` is a \"telescopic\" equality.\nRemark: `j` is sequence of terms, and `j'` a sequence of free variables.\nThe result contains the fields\n- `mvarId`: the new goal\n- `indicesFVarIds`: `j'` ids\n- `fvarId`: `h'` id\n- `numEqs`: number of equations in the target "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">generalizeIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">Lean.Meta.GeneralizeIndicesSubgoal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L65-L65","name":"Lean.Meta.GeneralizeIndicesSubgoal.numEqs","line":65,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.numEqs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.numEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">numEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">Lean.Meta.GeneralizeIndicesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L64-L64","name":"Lean.Meta.GeneralizeIndicesSubgoal.fvarId","line":64,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">Lean.Meta.GeneralizeIndicesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L63-L63","name":"Lean.Meta.GeneralizeIndicesSubgoal.indicesFVarIds","line":63,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.indicesFVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.indicesFVarIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">indicesFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">Lean.Meta.GeneralizeIndicesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L62-L62","name":"Lean.Meta.GeneralizeIndicesSubgoal.mvarId","line":62,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">Lean.Meta.GeneralizeIndicesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L61-L65","name":"Lean.Meta.GeneralizeIndicesSubgoal","line":61,"kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L45-L59","name":"Lean.Meta.generalizeTargetsEq","line":45,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeTargetsEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeTargetsEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">generalizeTargetsEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(motiveType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(targets : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L19-L24","name":"Lean.Meta.getInductiveUniverseAndParams","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.getInductiveUniverseAndParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.getInductiveUniverseAndParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getInductiveUniverseAndParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L1-L1","name":"Lean.Meta.CasesSubgoal.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesSubgoal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toInductionSubgoal : <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.InductionSubgoal\">Lean.Meta.InductionSubgoal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">Lean.Meta.CasesSubgoal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L1-L1","name":"Lean.Meta.GeneralizeIndicesSubgoal.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indicesFVarIds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numEqs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">Lean.Meta.GeneralizeIndicesSubgoal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L1-L1","name":"Lean.Meta.Cases.Context.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(inductiveVal : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">Lean.InductiveVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(casesOnVal : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">Lean.DefinitionVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nminors : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(majorDecl : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(majorTypeFn : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(majorTypeArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(majorTypeIndices : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Lean.Meta.Cases.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a62d2fd4979671b76b8ab13ccbe4fdf410ec0d9d/src/Lean/Meta/Tactic/Cases.lean#L1-L1","name":"Lean.Meta.ByCasesSubgoal.mk","line":1,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ByCasesSubgoal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Lean.Meta.ByCasesSubgoal</a></div></div>"}]}